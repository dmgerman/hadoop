begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyFloat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttemptStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobUpdatedNodesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|TaskAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|AMRMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestRMContainerAllocator
specifier|public
class|class
name|TestRMContainerAllocator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple ()
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testSimple"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|,
name|event3
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResource ()
specifier|public
name|void
name|testResource
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testResource"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event2
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapReduceScheduling ()
specifier|public
name|void
name|testMapReduceScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testMapReduceScheduling"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// create the container request
comment|// send MAP request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send REDUCE request
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|3000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// send MAP request
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|2048
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkAssignments
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|event1
block|,
name|event3
block|}
argument_list|,
name|assigned
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// validate that no container is assigned to h1 as it doesn't have 2048
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Assigned count not correct"
argument_list|,
literal|"h1"
operator|.
name|equals
argument_list|(
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyResourceManager
specifier|private
specifier|static
class|class
name|MyResourceManager
extends|extends
name|MockRM
block|{
DECL|method|MyResourceManager (Configuration conf)
specifier|public
name|MyResourceManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDispatcher ()
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSchedulerEventDispatcher ()
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
comment|// Dispatch inline for test sanity
return|return
operator|new
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createScheduler ()
specifier|protected
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
return|return
operator|new
name|MyFifoScheduler
argument_list|(
name|this
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReportedAppProgress ()
specifier|public
name|void
name|testReportedAppProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testReportedAppProgress"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|rmDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|21504
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MRApp
name|mrApp
init|=
operator|new
name|MRApp
argument_list|(
name|appAttemptId
argument_list|,
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|appAttemptId
argument_list|,
name|context
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DrainDispatcher
name|amDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|mrApp
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|(
name|MyContainerAllocator
operator|)
name|mrApp
operator|.
name|getContainerAllocator
argument_list|()
decl_stmt|;
name|mrApp
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait till all map-attempts request for containers
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|TaskAttemptImpl
operator|)
name|t
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
block|}
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all map-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send heartbeat
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 1 map.
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.095f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.095f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 7 more so that map-progress is 80%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.41f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.41f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off the 2 remaining maps
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all reduce-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finish off 2 reduces
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off the remaining 8 reduces.
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Remaining is JobCleanup
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
DECL|method|finishNextNTasks (DrainDispatcher rmDispatcher, MockNM node, MRApp mrApp, Iterator<Task> it, int nextN)
specifier|private
name|void
name|finishNextNTasks
parameter_list|(
name|DrainDispatcher
name|rmDispatcher
parameter_list|,
name|MockNM
name|node
parameter_list|,
name|MRApp
name|mrApp
parameter_list|,
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
parameter_list|,
name|int
name|nextN
parameter_list|)
throws|throws
name|Exception
block|{
name|Task
name|task
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nextN
condition|;
name|i
operator|++
control|)
block|{
name|task
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|finishTask
argument_list|(
name|rmDispatcher
argument_list|,
name|node
argument_list|,
name|mrApp
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishTask (DrainDispatcher rmDispatcher, MockNM node, MRApp mrApp, Task task)
specifier|private
name|void
name|finishTask
parameter_list|(
name|DrainDispatcher
name|rmDispatcher
parameter_list|,
name|MockNM
name|node
parameter_list|,
name|MRApp
name|mrApp
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|contStatus
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|contStatus
operator|.
name|add
argument_list|(
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|attempt
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|statusUpdate
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusUpdate
operator|.
name|put
argument_list|(
name|mrApp
operator|.
name|getAppID
argument_list|()
argument_list|,
name|contStatus
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
name|statusUpdate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|waitForState
argument_list|(
name|task
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReportedAppProgressWithOnlyMaps ()
specifier|public
name|void
name|testReportedAppProgressWithOnlyMaps
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testReportedAppProgressWithOnlyMaps"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|rmDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|11264
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MRApp
name|mrApp
init|=
operator|new
name|MRApp
argument_list|(
name|appAttemptId
argument_list|,
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|appAttemptId
argument_list|,
name|context
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|mrApp
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|mrApp
operator|.
name|getContext
argument_list|()
operator|.
name|getAllJobs
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DrainDispatcher
name|amDispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|mrApp
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|(
name|MyContainerAllocator
operator|)
name|mrApp
operator|.
name|getContainerAllocator
argument_list|()
decl_stmt|;
name|mrApp
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait till all map-attempts request for containers
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mrApp
operator|.
name|waitForInternalState
argument_list|(
operator|(
name|TaskAttemptImpl
operator|)
name|t
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
name|amDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all map-tasks to be running
for|for
control|(
name|Task
name|t
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mrApp
operator|.
name|waitForState
argument_list|(
name|t
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send heartbeat
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Finish off 1 map so that map-progress is 10%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.14f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.14f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off 5 more map so that map-progress is 60%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.59f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// Finish off remaining map so that map-progress is 100%
name|finishNextNTasks
argument_list|(
name|rmDispatcher
argument_list|,
name|amNodeManager
argument_list|,
name|mrApp
argument_list|,
name|it
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|job
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.95f
argument_list|,
name|rmApp
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdatedNodes ()
specifier|public
name|void
name|testUpdatedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// create the map container request
name|ContainerRequestEvent
name|event
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|event
operator|.
name|getAttemptID
argument_list|()
decl_stmt|;
name|TaskAttempt
name|mockTaskAttempt
init|=
name|mock
argument_list|(
name|TaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTaskAttempt
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|mockTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|getAttempt
argument_list|(
name|attemptId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTaskAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getTask
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTask
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// get the assignment
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|assigned
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// no updated nodes reported
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark nodes bad
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// schedule response returns updated nodes
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// updated nodes are reported
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdatedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no updated nodes reported
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getJobUpdatedNodeEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getTaskAttemptKillEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlackListedNodes ()
specifier|public
name|void
name|testBlackListedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testBlackListedNodes"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
comment|// send 1 more request with different resource req
name|ContainerRequestEvent
name|event2
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event2
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|ContainerFailedEvent
name|f2
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f2
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark h1/h2 as bad nodes
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nodeManager2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No of assignments must be 3"
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// validate that all containers are assigned to h3
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Assigned container host not correct"
argument_list|,
literal|"h3"
operator|.
name|equals
argument_list|(
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIgnoreBlacklisting ()
specifier|public
name|void
name|testIgnoreBlacklisting
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testIgnoreBlacklisting"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
index|[]
name|nodeManagers
init|=
operator|new
name|MockNM
index|[
literal|10
index|]
decl_stmt|;
name|int
name|nmNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
literal|null
decl_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
literal|0
index|]
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// Known=1, blacklisted=0, ignore should be false - assign first container
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing container _1 on H1 (Node should be blacklisted and"
operator|+
literal|" ignore blacklisting enabled"
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
comment|// Test single node.
comment|// Known=1, blacklisted=1, ignore should be true - assign 1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Known=2, blacklisted=1, ignore should be true - assign 1 anyway.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
name|nodeManagers
index|[
literal|1
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Known=3, blacklisted=1, ignore should be true - assign 1 anyway.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=3, blacklisted=1, ignore should be true - assign 1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|5
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Known=4, blacklisted=1, ignore should be false - assign 1 anyway
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|6
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h4"
block|}
argument_list|,
name|nodeManagers
index|[
literal|3
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test blacklisting re-enabled.
comment|// Known=4, blacklisted=1, ignore should be false - no assignment on h1
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// RMContainerRequestor would have created a replacement request.
comment|// Blacklist h2
name|ContainerFailedEvent
name|f2
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|"h2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f2
argument_list|)
expr_stmt|;
comment|// Test ignore blacklisting re-enabled
comment|// Known=4, blacklisted=2, ignore should be true. Should assign 2
comment|// containers.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|8
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
name|nodeManagers
index|[
literal|0
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 2"
argument_list|,
literal|2
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Known=4, blacklisted=2, ignore should be true.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|9
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h2"
block|}
argument_list|,
name|nodeManagers
index|[
literal|1
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test blacklist while ignore blacklisting enabled
name|ContainerFailedEvent
name|f3
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|4
argument_list|,
literal|"h3"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f3
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Known=5, blacklisted=3, ignore should be true.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign on 5 more nodes - to re-enable blacklisting
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|nodeManagers
index|[
name|nmNum
index|]
operator|=
name|registerNodeManager
argument_list|(
name|nmNum
operator|++
argument_list|,
name|rm
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|11
operator|+
name|i
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
literal|5
operator|+
name|i
argument_list|)
block|}
argument_list|,
name|nodeManagers
index|[
literal|4
operator|+
name|i
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test h3 (blacklisted while ignoring blacklisting) is blacklisted.
name|assigned
operator|=
name|getContainerOnHost
argument_list|(
name|jobId
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h3"
block|}
argument_list|,
name|nodeManagers
index|[
literal|2
index|]
argument_list|,
name|dispatcher
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNodeManager (int i, MyResourceManager rm, DrainDispatcher dispatcher)
specifier|private
name|MockNM
name|registerNodeManager
parameter_list|(
name|int
name|i
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|,
name|DrainDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|Exception
block|{
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|":1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|nm
return|;
block|}
specifier|private
DECL|method|getContainerOnHost (JobId jobId, int taskAttemptId, int memory, String[] hosts, MockNM mockNM, DrainDispatcher dispatcher, MyContainerAllocator allocator)
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|getContainerOnHost
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|MockNM
name|mockNM
parameter_list|,
name|DrainDispatcher
name|dispatcher
parameter_list|,
name|MyContainerAllocator
name|allocator
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerRequestEvent
name|reqEvent
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|memory
argument_list|,
name|hosts
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|reqEvent
argument_list|)
expr_stmt|;
comment|// Send the request to the RM
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat from the required nodeManager
name|mockNM
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|assigned
return|;
block|}
annotation|@
name|Test
DECL|method|testBlackListedNodesWithSchedulingToThatNode ()
specifier|public
name|void
name|testBlackListedNodesWithSchedulingToThatNode
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testBlackListedNodesWithSchedulingToThatNode"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"amNM:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|mockJob
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJob
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|MyContainerAllocator
name|allocator
init|=
operator|new
name|MyContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|mockJob
argument_list|)
decl_stmt|;
comment|// add resources to scheduler
name|MockNM
name|nodeManager1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nodeManager3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting 1 Containers _1 on H1"
argument_list|)
expr_stmt|;
comment|// create the container request
name|ContainerRequestEvent
name|event1
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (to send the container requests)"
argument_list|)
expr_stmt|;
comment|// this tells the scheduler about the requests
comment|// as nodes are not added, no allocations
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assigned
init|=
name|allocator
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"h1 Heartbeat (To actually schedule the containers)"
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 1"
argument_list|,
literal|1
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing container _1 on H1 (should blacklist the node)"
argument_list|)
expr_stmt|;
comment|// Send events to blacklist nodes h1 and h2
name|ContainerFailedEvent
name|f1
init|=
name|createFailEvent
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendFailure
argument_list|(
name|f1
argument_list|)
expr_stmt|;
comment|//At this stage, a request should be created for a fast fail map
comment|//Create a FAST_FAIL request for a previously failed map.
name|ContainerRequestEvent
name|event1f
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event1f
argument_list|)
expr_stmt|;
comment|//Update the Scheduler with the new requests.
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// send another request with different resource and priority
name|ContainerRequestEvent
name|event3
init|=
name|createReq
argument_list|(
name|jobId
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|sendRequest
argument_list|(
name|event3
argument_list|)
expr_stmt|;
comment|//Allocator is aware of prio:5 container, and prio:20 (h1+h3) container.
comment|//RM is only aware of the prio:5 container
name|LOG
operator|.
name|info
argument_list|(
literal|"h1 Heartbeat (To actually schedule the containers)"
argument_list|)
expr_stmt|;
comment|// update resources in scheduler
name|nodeManager1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//RMContainerAllocator gets assigned a p:5 on a blacklisted node.
comment|//Send a release for the p:5 container + another request.
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the re-scheduled containers)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Hearbeat from H3 to schedule on this host.
name|LOG
operator|.
name|info
argument_list|(
literal|"h3 Heartbeat (To re-schedule the containers)"
argument_list|)
expr_stmt|;
name|nodeManager3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RM Heartbeat (To process the re-scheduled containers for H3)"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// For debugging
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|assig
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" assgined to "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" with priority "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 2"
argument_list|,
literal|2
argument_list|,
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate that all containers are assigned to h3
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assig
range|:
name|assigned
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned container "
operator|+
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" host not correct"
argument_list|,
literal|"h3"
argument_list|,
name|assig
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyFifoScheduler
specifier|private
specifier|static
class|class
name|MyFifoScheduler
extends|extends
name|FifoScheduler
block|{
DECL|method|MyFifoScheduler (RMContext rmContext)
specifier|public
name|MyFifoScheduler
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"add application failed with "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
comment|// override this to copy the objects otherwise FifoScheduler updates the
comment|// numContainers in same objects as kept by RMContainerAllocator
annotation|@
name|Override
DECL|method|allocate ( ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release)
specifier|public
specifier|synchronized
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|ask
control|)
block|{
name|ResourceRequest
name|reqCopy
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|req
operator|.
name|getHostName
argument_list|()
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|askCopy
operator|.
name|add
argument_list|(
name|reqCopy
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|allocate
argument_list|(
name|applicationAttemptId
argument_list|,
name|askCopy
argument_list|,
name|release
argument_list|)
return|;
block|}
block|}
DECL|method|createReq (JobId jobId, int taskAttemptId, int memory, String[] hosts)
specifier|private
name|ContainerRequestEvent
name|createReq
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
return|return
name|createReq
argument_list|(
name|jobId
argument_list|,
name|taskAttemptId
argument_list|,
name|memory
argument_list|,
name|hosts
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ContainerRequestEvent
DECL|method|createReq (JobId jobId, int taskAttemptId, int memory, String[] hosts, boolean earlierFailedAttempt, boolean reduce)
name|createReq
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|boolean
name|earlierFailedAttempt
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
name|Resource
name|containerNeed
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|memory
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|earlierFailedAttempt
condition|)
block|{
return|return
name|ContainerRequestEvent
operator|.
name|createContainerRequestEventForFailedContainer
argument_list|(
name|attemptId
argument_list|,
name|containerNeed
argument_list|)
return|;
block|}
return|return
operator|new
name|ContainerRequestEvent
argument_list|(
name|attemptId
argument_list|,
name|containerNeed
argument_list|,
name|hosts
argument_list|,
operator|new
name|String
index|[]
block|{
name|NetworkTopology
operator|.
name|DEFAULT_RACK
block|}
argument_list|)
return|;
block|}
DECL|method|createFailEvent (JobId jobId, int taskAttemptId, String host, boolean reduce)
specifier|private
name|ContainerFailedEvent
name|createFailEvent
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|int
name|taskAttemptId
parameter_list|,
name|String
name|host
parameter_list|,
name|boolean
name|reduce
parameter_list|)
block|{
name|TaskId
name|taskId
decl_stmt|;
if|if
condition|(
name|reduce
condition|)
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|attemptId
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskId
argument_list|,
name|taskAttemptId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContainerFailedEvent
argument_list|(
name|attemptId
argument_list|,
name|host
argument_list|)
return|;
block|}
DECL|method|checkAssignments (ContainerRequestEvent[] requests, List<TaskAttemptContainerAssignedEvent> assignments, boolean checkHostMatch)
specifier|private
name|void
name|checkAssignments
parameter_list|(
name|ContainerRequestEvent
index|[]
name|requests
parameter_list|,
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|assignments
parameter_list|,
name|boolean
name|checkHostMatch
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Container not assigned"
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned count not correct"
argument_list|,
name|requests
operator|.
name|length
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for uniqueness of containerIDs
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|assigned
range|:
name|assignments
control|)
block|{
name|containerIds
operator|.
name|add
argument_list|(
name|assigned
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Assigned containers must be different"
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|,
name|containerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for all assignment
for|for
control|(
name|ContainerRequestEvent
name|req
range|:
name|requests
control|)
block|{
name|TaskAttemptContainerAssignedEvent
name|assigned
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskAttemptContainerAssignedEvent
name|ass
range|:
name|assignments
control|)
block|{
if|if
condition|(
name|ass
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getAttemptID
argument_list|()
argument_list|)
condition|)
block|{
name|assigned
operator|=
name|ass
expr_stmt|;
break|break;
block|}
block|}
name|checkAssignment
argument_list|(
name|req
argument_list|,
name|assigned
argument_list|,
name|checkHostMatch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkAssignment (ContainerRequestEvent request, TaskAttemptContainerAssignedEvent assigned, boolean checkHostMatch)
specifier|private
name|void
name|checkAssignment
parameter_list|(
name|ContainerRequestEvent
name|request
parameter_list|,
name|TaskAttemptContainerAssignedEvent
name|assigned
parameter_list|,
name|boolean
name|checkHostMatch
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Nothing assigned to attempt "
operator|+
name|request
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"assigned to wrong attempt"
argument_list|,
name|request
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|assigned
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkHostMatch
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not assigned to requested host"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|request
operator|.
name|getHosts
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|assigned
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Mock RMContainerAllocator
comment|// Instead of talking to remote Scheduler,uses the local Scheduler
DECL|class|MyContainerAllocator
specifier|private
specifier|static
class|class
name|MyContainerAllocator
extends|extends
name|RMContainerAllocator
block|{
DECL|field|events
specifier|static
specifier|final
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|taskAttemptKillEvents
specifier|static
specifier|final
name|List
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
name|taskAttemptKillEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobUpdatedNodeEvents
specifier|static
specifier|final
name|List
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
name|jobUpdatedNodeEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rm
specifier|private
name|MyResourceManager
name|rm
decl_stmt|;
DECL|method|createAppContext ( ApplicationAttemptId appAttemptId, Job job)
specifier|private
specifier|static
name|AppContext
name|createAppContext
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|AppContext
name|context
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getJob
argument_list|(
name|isA
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ClusterInfo
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// Only capture interesting events.
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptContainerAssignedEvent
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|(
name|TaskAttemptContainerAssignedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|taskAttemptKillEvents
operator|.
name|add
argument_list|(
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobUpdatedNodesEvent
condition|)
block|{
name|jobUpdatedNodeEvents
operator|.
name|add
argument_list|(
operator|(
name|JobUpdatedNodesEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createAppContext ( ApplicationAttemptId appAttemptId, Job job, Clock clock)
specifier|private
specifier|static
name|AppContext
name|createAppContext
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|AppContext
name|context
init|=
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createMockClientService ()
specifier|private
specifier|static
name|ClientService
name|createMockClientService
parameter_list|()
block|{
name|ClientService
name|service
init|=
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:4567"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getHttpPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|890
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|// Use this constructor when using a real job.
DECL|method|MyContainerAllocator (MyResourceManager rm, ApplicationAttemptId appAttemptId, AppContext context)
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
comment|// Use this constructor when you are using a mocked job.
DECL|method|MyContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job)
specifier|public
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|MyContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job, Clock clock)
specifier|public
name|MyContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|createMockClientService
argument_list|()
argument_list|,
name|createAppContext
argument_list|(
name|appAttemptId
argument_list|,
name|job
argument_list|,
name|clock
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSchedulerProxy ()
specifier|protected
name|AMRMProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|this
operator|.
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register ()
specifier|protected
name|void
name|register
parameter_list|()
block|{
name|super
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unregister ()
specifier|protected
name|void
name|unregister
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getMinContainerCapability ()
specifier|protected
name|Resource
name|getMinContainerCapability
parameter_list|()
block|{
return|return
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxContainerCapability ()
specifier|protected
name|Resource
name|getMaxContainerCapability
parameter_list|()
block|{
return|return
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|10240
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|sendRequest (ContainerRequestEvent req)
specifier|public
name|void
name|sendRequest
parameter_list|(
name|ContainerRequestEvent
name|req
parameter_list|)
block|{
name|sendRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ContainerRequestEvent
index|[]
block|{
name|req
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendRequests (List<ContainerRequestEvent> reqs)
specifier|public
name|void
name|sendRequests
parameter_list|(
name|List
argument_list|<
name|ContainerRequestEvent
argument_list|>
name|reqs
parameter_list|)
block|{
for|for
control|(
name|ContainerRequestEvent
name|req
range|:
name|reqs
control|)
block|{
name|super
operator|.
name|handleEvent
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendFailure (ContainerFailedEvent f)
specifier|public
name|void
name|sendFailure
parameter_list|(
name|ContainerFailedEvent
name|f
parameter_list|)
block|{
name|super
operator|.
name|handleEvent
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|// API to be used by tests
DECL|method|schedule ()
specifier|public
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|schedule
parameter_list|()
block|{
comment|// run the scheduler
try|try
block|{
name|super
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in heartbeat "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptContainerAssignedEvent
argument_list|>
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getTaskAttemptKillEvents ()
name|List
argument_list|<
name|TaskAttemptKillEvent
argument_list|>
name|getTaskAttemptKillEvents
parameter_list|()
block|{
return|return
name|taskAttemptKillEvents
return|;
block|}
DECL|method|getJobUpdatedNodeEvents ()
name|List
argument_list|<
name|JobUpdatedNodesEvent
argument_list|>
name|getJobUpdatedNodeEvents
parameter_list|()
block|{
return|return
name|jobUpdatedNodeEvents
return|;
block|}
annotation|@
name|Override
DECL|method|startAllocatorThread ()
specifier|protected
name|void
name|startAllocatorThread
parameter_list|()
block|{
comment|// override to NOT start thread
block|}
block|}
annotation|@
name|Test
DECL|method|testReduceScheduling ()
specifier|public
name|void
name|testReduceScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|totalMaps
init|=
literal|10
decl_stmt|;
name|int
name|succeededMaps
init|=
literal|1
decl_stmt|;
name|int
name|scheduledMaps
init|=
literal|10
decl_stmt|;
name|int
name|scheduledReduces
init|=
literal|0
decl_stmt|;
name|int
name|assignedMaps
init|=
literal|2
decl_stmt|;
name|int
name|assignedReduces
init|=
literal|0
decl_stmt|;
name|int
name|mapResourceReqt
init|=
literal|1024
decl_stmt|;
name|int
name|reduceResourceReqt
init|=
literal|2
operator|*
literal|1024
decl_stmt|;
name|int
name|numPendingReduces
init|=
literal|4
decl_stmt|;
name|float
name|maxReduceRampupLimit
init|=
literal|0.5f
decl_stmt|;
name|float
name|reduceSlowStart
init|=
literal|0.2f
decl_stmt|;
name|RMContainerAllocator
name|allocator
init|=
name|mock
argument_list|(
name|RMContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|scheduleReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyFloat
argument_list|()
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test slow-start
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify slow-start still in effect when no more maps need to
comment|// be scheduled but some have yet to complete
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
literal|0
argument_list|,
name|scheduledReduces
argument_list|,
name|totalMaps
operator|-
name|succeededMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|scheduleAllReduces
argument_list|()
expr_stmt|;
name|succeededMaps
operator|=
literal|3
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Test reduce ramp-up
name|doReturn
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getMemLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|)
operator|.
name|rampUpReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test reduce ramp-down
name|scheduledReduces
operator|=
literal|3
expr_stmt|;
name|doReturn
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
operator|.
name|when
argument_list|(
name|allocator
argument_list|)
operator|.
name|getMemLimit
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|scheduleReduces
argument_list|(
name|totalMaps
argument_list|,
name|succeededMaps
argument_list|,
name|scheduledMaps
argument_list|,
name|scheduledReduces
argument_list|,
name|assignedMaps
argument_list|,
name|assignedReduces
argument_list|,
name|mapResourceReqt
argument_list|,
name|reduceResourceReqt
argument_list|,
name|numPendingReduces
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|allocator
argument_list|)
operator|.
name|rampDownReduces
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|RecalculateContainerAllocator
specifier|private
specifier|static
class|class
name|RecalculateContainerAllocator
extends|extends
name|MyContainerAllocator
block|{
DECL|field|recalculatedReduceSchedule
specifier|public
name|boolean
name|recalculatedReduceSchedule
init|=
literal|false
decl_stmt|;
DECL|method|RecalculateContainerAllocator (MyResourceManager rm, Configuration conf, ApplicationAttemptId appAttemptId, Job job)
specifier|public
name|RecalculateContainerAllocator
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleReduces (int totalMaps, int completedMaps, int scheduledMaps, int scheduledReduces, int assignedMaps, int assignedReduces, int mapResourceReqt, int reduceResourceReqt, int numPendingReduces, float maxReduceRampupLimit, float reduceSlowStart)
specifier|public
name|void
name|scheduleReduces
parameter_list|(
name|int
name|totalMaps
parameter_list|,
name|int
name|completedMaps
parameter_list|,
name|int
name|scheduledMaps
parameter_list|,
name|int
name|scheduledReduces
parameter_list|,
name|int
name|assignedMaps
parameter_list|,
name|int
name|assignedReduces
parameter_list|,
name|int
name|mapResourceReqt
parameter_list|,
name|int
name|reduceResourceReqt
parameter_list|,
name|int
name|numPendingReduces
parameter_list|,
name|float
name|maxReduceRampupLimit
parameter_list|,
name|float
name|reduceSlowStart
parameter_list|)
block|{
name|recalculatedReduceSchedule
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompletedTasksRecalculateSchedule ()
specifier|public
name|void
name|testCompletedTasksRecalculateSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testCompletedTasksRecalculateSchedule"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MyResourceManager
name|rm
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|mock
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"jobfile"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|10
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getTotalMaps
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|10
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getTotalReduces
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getCompletedMaps
argument_list|()
expr_stmt|;
name|RecalculateContainerAllocator
name|allocator
init|=
operator|new
name|RecalculateContainerAllocator
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|appAttemptId
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|recalculatedReduceSchedule
operator|=
literal|false
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unexpected recalculate of reduce schedule"
argument_list|,
name|allocator
operator|.
name|recalculatedReduceSchedule
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|job
argument_list|)
operator|.
name|getCompletedMaps
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected recalculate of reduce schedule"
argument_list|,
name|allocator
operator|.
name|recalculatedReduceSchedule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeartbeatHandler ()
specifier|public
name|void
name|testHeartbeatHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testHeartbeatHandler"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
decl_stmt|;
name|AppContext
name|appContext
init|=
name|mock
argument_list|(
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appContext
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainerAllocator
name|allocator
init|=
operator|new
name|RMContainerAllocator
argument_list|(
name|mock
argument_list|(
name|ClientService
operator|.
name|class
argument_list|)
argument_list|,
name|appContext
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|register
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|protected
name|AMRMProtocol
name|createSchedulerProxy
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|AMRMProtocol
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|heartbeat
parameter_list|()
throws|throws
name|Exception
block|{           }
block|}
decl_stmt|;
name|allocator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|start
argument_list|()
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|int
name|timeToWaitMs
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|5
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|=
literal|5000
expr_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|7
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|callbackCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|runOnNextHeartbeat
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callbackCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|=
literal|5000
expr_stmt|;
while|while
condition|(
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
operator|!=
literal|8
operator|&&
name|timeToWaitMs
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|timeToWaitMs
operator|-=
literal|10
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|allocator
operator|.
name|getLastHeartbeatTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|callbackCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRMContainerAllocator
name|t
init|=
operator|new
name|TestRMContainerAllocator
argument_list|()
decl_stmt|;
name|t
operator|.
name|testSimple
argument_list|()
expr_stmt|;
name|t
operator|.
name|testResource
argument_list|()
expr_stmt|;
name|t
operator|.
name|testMapReduceScheduling
argument_list|()
expr_stmt|;
name|t
operator|.
name|testReportedAppProgress
argument_list|()
expr_stmt|;
name|t
operator|.
name|testReportedAppProgressWithOnlyMaps
argument_list|()
expr_stmt|;
name|t
operator|.
name|testBlackListedNodes
argument_list|()
expr_stmt|;
name|t
operator|.
name|testCompletedTasksRecalculateSchedule
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

