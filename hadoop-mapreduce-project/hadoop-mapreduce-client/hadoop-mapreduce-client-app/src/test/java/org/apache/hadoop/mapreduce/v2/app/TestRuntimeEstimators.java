begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|DefaultSpeculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|ExponentiallySmoothedTaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|LegacyTaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|Speculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SpeculatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|TaskRuntimeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestRuntimeEstimators
specifier|public
class|class
name|TestRuntimeEstimators
block|{
DECL|field|INITIAL_NUMBER_FREE_SLOTS
specifier|private
specifier|static
name|int
name|INITIAL_NUMBER_FREE_SLOTS
init|=
literal|600
decl_stmt|;
DECL|field|MAP_SLOT_REQUIREMENT
specifier|private
specifier|static
name|int
name|MAP_SLOT_REQUIREMENT
init|=
literal|3
decl_stmt|;
comment|// this has to be at least as much as map slot requirement
DECL|field|REDUCE_SLOT_REQUIREMENT
specifier|private
specifier|static
name|int
name|REDUCE_SLOT_REQUIREMENT
init|=
literal|4
decl_stmt|;
DECL|field|MAP_TASKS
specifier|private
specifier|static
name|int
name|MAP_TASKS
init|=
literal|200
decl_stmt|;
DECL|field|REDUCE_TASKS
specifier|private
specifier|static
name|int
name|REDUCE_TASKS
init|=
literal|150
decl_stmt|;
DECL|field|clock
name|MockClock
name|clock
decl_stmt|;
DECL|field|myJob
name|Job
name|myJob
decl_stmt|;
DECL|field|myAppContext
name|AppContext
name|myAppContext
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRuntimeEstimators
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|slotsInUse
specifier|private
specifier|final
name|AtomicInteger
name|slotsInUse
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|dispatcher
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|speculator
name|DefaultSpeculator
name|speculator
decl_stmt|;
DECL|field|estimator
name|TaskRuntimeEstimator
name|estimator
decl_stmt|;
comment|// This is a huge kluge.  The real implementations have a decent approach
DECL|field|completedMaps
specifier|private
specifier|final
name|AtomicInteger
name|completedMaps
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|completedReduces
specifier|private
specifier|final
name|AtomicInteger
name|completedReduces
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|successfulSpeculations
specifier|private
specifier|final
name|AtomicInteger
name|successfulSpeculations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|taskTimeSavedBySpeculation
specifier|private
specifier|final
name|AtomicLong
name|taskTimeSavedBySpeculation
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|coreTestEstimator (TaskRuntimeEstimator testedEstimator, int expectedSpeculations)
specifier|private
name|void
name|coreTestEstimator
parameter_list|(
name|TaskRuntimeEstimator
name|testedEstimator
parameter_list|,
name|int
name|expectedSpeculations
parameter_list|)
block|{
name|estimator
operator|=
name|testedEstimator
expr_stmt|;
name|clock
operator|=
operator|new
name|MockClock
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|myJob
operator|=
literal|null
expr_stmt|;
name|slotsInUse
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|completedMaps
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|completedReduces
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|successfulSpeculations
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|taskTimeSavedBySpeculation
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advanceTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|myAppContext
operator|=
operator|new
name|MyAppContext
argument_list|(
name|MAP_TASKS
argument_list|,
name|REDUCE_TASKS
argument_list|)
expr_stmt|;
name|myJob
operator|=
name|myAppContext
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|estimator
operator|.
name|contextualize
argument_list|(
name|conf
argument_list|,
name|myAppContext
argument_list|)
expr_stmt|;
name|speculator
operator|=
operator|new
name|DefaultSpeculator
argument_list|(
name|conf
argument_list|,
name|myAppContext
argument_list|,
name|estimator
argument_list|,
name|clock
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|speculator
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskEventType
operator|.
name|class
argument_list|,
operator|new
name|SpeculationRequestEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|speculator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|speculator
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Now that the plumbing is hooked up, we do the following:
comment|//  do until all tasks are finished, ...
comment|//  1: If we have spare capacity, assign as many map tasks as we can, then
comment|//     assign as many reduce tasks as we can.  Note that an odd reduce
comment|//     task might be started while there are still map tasks, because
comment|//     map tasks take 3 slots and reduce tasks 2 slots.
comment|//  2: Send a speculation event for every task attempt that's running
comment|//  note that new attempts might get started by the speculator
comment|// discover undone tasks
name|int
name|undoneMaps
init|=
name|MAP_TASKS
decl_stmt|;
name|int
name|undoneReduces
init|=
name|REDUCE_TASKS
decl_stmt|;
comment|// build a task sequence where all the maps precede any of the reduces
name|List
argument_list|<
name|Task
argument_list|>
name|allTasksSequence
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|allTasksSequence
operator|.
name|addAll
argument_list|(
name|myJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|allTasksSequence
operator|.
name|addAll
argument_list|(
name|myJob
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|undoneMaps
operator|+
name|undoneReduces
operator|>
literal|0
condition|)
block|{
name|undoneMaps
operator|=
literal|0
expr_stmt|;
name|undoneReduces
operator|=
literal|0
expr_stmt|;
comment|// start all attempts which are new but for which there is enough slots
for|for
control|(
name|Task
name|task
range|:
name|allTasksSequence
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|isFinished
argument_list|()
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
operator|++
name|undoneMaps
expr_stmt|;
block|}
else|else
block|{
operator|++
name|undoneReduces
expr_stmt|;
block|}
block|}
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|NEW
operator|&&
name|INITIAL_NUMBER_FREE_SLOTS
operator|-
name|slotsInUse
operator|.
name|get
argument_list|()
operator|>=
name|taskTypeSlots
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|MyTaskAttemptImpl
name|attemptImpl
init|=
operator|(
name|MyTaskAttemptImpl
operator|)
name|attempt
decl_stmt|;
name|SpeculatorEvent
name|event
init|=
operator|new
name|SpeculatorEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|speculator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|attemptImpl
operator|.
name|startUp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If a task attempt is in progress we should send the news to
comment|// the Speculator.
name|TaskAttemptStatus
name|status
init|=
operator|new
name|TaskAttemptStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|id
operator|=
name|attempt
operator|.
name|getID
argument_list|()
expr_stmt|;
name|status
operator|.
name|progress
operator|=
name|attempt
operator|.
name|getProgress
argument_list|()
expr_stmt|;
name|status
operator|.
name|stateString
operator|=
name|attempt
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|status
operator|.
name|taskState
operator|=
name|attempt
operator|.
name|getState
argument_list|()
expr_stmt|;
name|SpeculatorEvent
name|event
init|=
operator|new
name|SpeculatorEvent
argument_list|(
name|status
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|speculator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// drain the speculator event queue
while|while
condition|(
operator|!
name|speculator
operator|.
name|eventQueueEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|startTime
operator|+
literal|130000
condition|)
block|{
return|return;
block|}
block|}
name|clock
operator|.
name|advanceTime
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
if|if
condition|(
name|clock
operator|.
name|getTime
argument_list|()
operator|%
literal|10000L
operator|==
literal|0L
condition|)
block|{
name|speculator
operator|.
name|scanForSpeculations
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We got the wrong number of successful speculations."
argument_list|,
name|expectedSpeculations
argument_list|,
name|successfulSpeculations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyEstimator ()
specifier|public
name|void
name|testLegacyEstimator
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskRuntimeEstimator
name|specificEstimator
init|=
operator|new
name|LegacyTaskRuntimeEstimator
argument_list|()
decl_stmt|;
name|coreTestEstimator
argument_list|(
name|specificEstimator
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExponentialEstimator ()
specifier|public
name|void
name|testExponentialEstimator
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskRuntimeEstimator
name|specificEstimator
init|=
operator|new
name|ExponentiallySmoothedTaskRuntimeEstimator
argument_list|()
decl_stmt|;
name|coreTestEstimator
argument_list|(
name|specificEstimator
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|taskTypeSlots (TaskType type)
name|int
name|taskTypeSlots
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|MAP_SLOT_REQUIREMENT
else|:
name|REDUCE_SLOT_REQUIREMENT
return|;
block|}
DECL|class|SpeculationRequestEventHandler
class|class
name|SpeculationRequestEventHandler
implements|implements
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (TaskEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskEvent
name|event
parameter_list|)
block|{
name|TaskId
name|taskID
init|=
name|event
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|Task
name|task
init|=
name|myJob
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong type event"
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SpeculationRequestEventHandler.handle adds a speculation task for "
operator|+
name|taskID
argument_list|)
expr_stmt|;
name|addAttempt
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addAttempt (Task task)
name|void
name|addAttempt
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|MyTaskImpl
name|myTask
init|=
operator|(
name|MyTaskImpl
operator|)
name|task
decl_stmt|;
name|myTask
operator|.
name|addAttempt
argument_list|()
expr_stmt|;
block|}
DECL|class|MyTaskImpl
class|class
name|MyTaskImpl
implements|implements
name|Task
block|{
DECL|field|taskID
specifier|private
specifier|final
name|TaskId
name|taskID
decl_stmt|;
DECL|field|attempts
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|method|MyTaskImpl (JobId jobID, int index, TaskType type)
name|MyTaskImpl
parameter_list|(
name|JobId
name|jobID
parameter_list|,
name|int
name|index
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
name|taskID
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
expr_stmt|;
name|taskID
operator|.
name|setId
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|taskID
operator|.
name|setTaskType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|taskID
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
block|}
DECL|method|addAttempt ()
name|void
name|addAttempt
parameter_list|()
block|{
name|TaskAttempt
name|taskAttempt
init|=
operator|new
name|MyTaskAttemptImpl
argument_list|(
name|taskID
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|TaskAttemptId
name|taskAttemptID
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
decl_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|taskAttemptID
argument_list|,
name|taskAttempt
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE.MyTaskImpl.addAttempt "
operator|+
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|SpeculatorEvent
name|event
init|=
operator|new
name|SpeculatorEvent
argument_list|(
name|taskID
argument_list|,
operator|+
literal|1
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskId
name|getID
parameter_list|()
block|{
return|return
name|taskID
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskReport
name|getReport
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|float
name|result
init|=
literal|0.0F
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|=
name|Math
operator|.
name|max
argument_list|(
name|result
argument_list|,
name|attempt
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|TaskType
name|getType
parameter_list|()
block|{
return|return
name|taskID
operator|.
name|getTaskType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempts ()
specifier|public
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|getAttempts
parameter_list|()
block|{
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|(
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempt (TaskAttemptId attemptID)
specifier|public
name|TaskAttempt
name|getAttempt
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|SUCCEEDED
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|canCommit (TaskAttemptId taskAttemptID)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskState
name|getState
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
block|}
DECL|class|MyJobImpl
class|class
name|MyJobImpl
implements|implements
name|Job
block|{
DECL|field|jobID
specifier|private
specifier|final
name|JobId
name|jobID
decl_stmt|;
DECL|field|allTasks
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|allTasks
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mapTasks
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|mapTasks
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTasks
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|reduceTasks
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MyJobImpl (JobId jobID, int numMaps, int numReduces)
name|MyJobImpl
parameter_list|(
name|JobId
name|jobID
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|)
block|{
name|this
operator|.
name|jobID
operator|=
name|jobID
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
operator|++
name|i
control|)
block|{
name|Task
name|newTask
init|=
operator|new
name|MyTaskImpl
argument_list|(
name|jobID
argument_list|,
name|i
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|mapTasks
operator|.
name|put
argument_list|(
name|newTask
operator|.
name|getID
argument_list|()
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|put
argument_list|(
name|newTask
operator|.
name|getID
argument_list|()
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReduces
condition|;
operator|++
name|i
control|)
block|{
name|Task
name|newTask
init|=
operator|new
name|MyTaskImpl
argument_list|(
name|jobID
argument_list|,
name|i
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|reduceTasks
operator|.
name|put
argument_list|(
name|newTask
operator|.
name|getID
argument_list|()
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|put
argument_list|(
name|newTask
operator|.
name|getID
argument_list|()
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
block|}
comment|// give every task an attempt
for|for
control|(
name|Task
name|task
range|:
name|allTasks
operator|.
name|values
argument_list|()
control|)
block|{
name|MyTaskImpl
name|myTaskImpl
init|=
operator|(
name|MyTaskImpl
operator|)
name|task
decl_stmt|;
name|myTaskImpl
operator|.
name|addAttempt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|JobId
name|getID
parameter_list|()
block|{
return|return
name|jobID
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|JobState
name|getState
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|JobReport
name|getReport
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getAllCounters ()
specifier|public
name|Counters
name|getAllCounters
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getTasks ()
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|allTasks
return|;
block|}
annotation|@
name|Override
DECL|method|getTasks (TaskType taskType)
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
return|return
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|mapTasks
else|:
name|reduceTasks
return|;
block|}
annotation|@
name|Override
DECL|method|getTask (TaskId taskID)
specifier|public
name|Task
name|getTask
parameter_list|(
name|TaskId
name|taskID
parameter_list|)
block|{
return|return
name|allTasks
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCompletedMaps ()
specifier|public
name|int
name|getCompletedMaps
parameter_list|()
block|{
return|return
name|completedMaps
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCompletedReduces ()
specifier|public
name|int
name|getCompletedReduces
parameter_list|()
block|{
return|return
name|completedReduces
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptCompletionEvent
index|[]
DECL|method|getTaskAttemptCompletionEvents (int fromEventId, int maxEvents)
name|getTaskAttemptCompletionEvents
parameter_list|(
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|TaskCompletionEvent
index|[]
DECL|method|getMapAttemptCompletionEvents (int startIndex, int maxEvents)
name|getMapAttemptCompletionEvents
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|mapTasks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|reduceTasks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isUber ()
specifier|public
name|boolean
name|isUber
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, JobACL jobOperation)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getConfFile ()
specifier|public
name|Path
name|getConfFile
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobACLs ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAMInfos
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|loadConfFile ()
specifier|public
name|Configuration
name|loadConfFile
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/*    * We follow the pattern of the real XxxImpl .  We create a job and initialize    * it with a full suite of tasks which in turn have one attempt each in the    * NEW state.  Attempts transition only from NEW to RUNNING to SUCCEEDED .    */
DECL|class|MyTaskAttemptImpl
class|class
name|MyTaskAttemptImpl
implements|implements
name|TaskAttempt
block|{
DECL|field|myAttemptID
specifier|private
specifier|final
name|TaskAttemptId
name|myAttemptID
decl_stmt|;
DECL|field|startMockTime
name|long
name|startMockTime
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|shuffleCompletedTime
name|long
name|shuffleCompletedTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|overridingState
name|TaskAttemptState
name|overridingState
init|=
name|TaskAttemptState
operator|.
name|NEW
decl_stmt|;
DECL|method|MyTaskAttemptImpl (TaskId taskID, int index, Clock clock)
name|MyTaskAttemptImpl
parameter_list|(
name|TaskId
name|taskID
parameter_list|,
name|int
name|index
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|myAttemptID
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
expr_stmt|;
name|myAttemptID
operator|.
name|setId
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|myAttemptID
operator|.
name|setTaskId
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
block|}
DECL|method|startUp ()
name|void
name|startUp
parameter_list|()
block|{
name|startMockTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|overridingState
operator|=
literal|null
expr_stmt|;
name|slotsInUse
operator|.
name|addAndGet
argument_list|(
name|taskTypeSlots
argument_list|(
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE.MyTaskAttemptImpl.startUp starting "
operator|+
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|SpeculatorEvent
name|event
init|=
operator|new
name|SpeculatorEvent
argument_list|(
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskAttemptId
name|getID
parameter_list|()
block|{
return|return
name|myAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskAttemptReport
name|getReport
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getShufflePort ()
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
DECL|method|getCodeRuntime ()
specifier|private
name|float
name|getCodeRuntime
parameter_list|()
block|{
name|int
name|taskIndex
init|=
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|int
name|attemptIndex
init|=
name|myAttemptID
operator|.
name|getId
argument_list|()
decl_stmt|;
name|float
name|result
init|=
literal|200.0F
decl_stmt|;
switch|switch
condition|(
name|taskIndex
operator|%
literal|4
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|taskIndex
operator|%
literal|40
operator|==
literal|0
operator|&&
name|attemptIndex
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|600.0F
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|2
case|:
break|break;
case|case
literal|1
case|:
name|result
operator|=
literal|150.0F
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|=
literal|250.0F
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
DECL|method|getMapProgress ()
specifier|private
name|float
name|getMapProgress
parameter_list|()
block|{
name|float
name|runtime
init|=
name|getCodeRuntime
argument_list|()
decl_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
call|(
name|float
call|)
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|startMockTime
argument_list|)
operator|/
operator|(
name|runtime
operator|*
literal|1000.0F
operator|)
argument_list|,
literal|1.0F
argument_list|)
return|;
block|}
DECL|method|getReduceProgress ()
specifier|private
name|float
name|getReduceProgress
parameter_list|()
block|{
name|Job
name|job
init|=
name|myAppContext
operator|.
name|getJob
argument_list|(
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|runtime
init|=
name|getCodeRuntime
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Task
argument_list|>
name|allMapTasks
init|=
name|job
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|numberMaps
init|=
name|allMapTasks
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numberDoneMaps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Task
name|mapTask
range|:
name|allMapTasks
control|)
block|{
if|if
condition|(
name|mapTask
operator|.
name|isFinished
argument_list|()
condition|)
block|{
operator|++
name|numberDoneMaps
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numberMaps
operator|==
name|numberDoneMaps
condition|)
block|{
name|shuffleCompletedTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|shuffleCompletedTime
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
call|(
name|float
call|)
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|shuffleCompletedTime
argument_list|)
operator|/
operator|(
name|runtime
operator|*
literal|2000.0F
operator|)
operator|+
literal|0.5F
argument_list|,
literal|1.0F
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|numberDoneMaps
operator|)
operator|/
name|numberMaps
operator|*
literal|0.5F
return|;
block|}
block|}
comment|// we compute progress from time and an algorithm now
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|overridingState
operator|==
name|TaskAttemptState
operator|.
name|NEW
condition|)
block|{
return|return
literal|0.0F
return|;
block|}
return|return
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|getMapProgress
argument_list|()
else|:
name|getReduceProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPhase ()
specifier|public
name|Phase
name|getPhase
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskAttemptState
name|getState
parameter_list|()
block|{
if|if
condition|(
name|overridingState
operator|!=
literal|null
condition|)
block|{
return|return
name|overridingState
return|;
block|}
name|TaskAttemptState
name|result
init|=
name|getProgress
argument_list|()
operator|<
literal|1.0F
condition|?
name|TaskAttemptState
operator|.
name|RUNNING
else|:
name|TaskAttemptState
operator|.
name|SUCCEEDED
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|TaskAttemptState
operator|.
name|SUCCEEDED
condition|)
block|{
name|overridingState
operator|=
name|TaskAttemptState
operator|.
name|SUCCEEDED
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MyTaskAttemptImpl.getState() -- attempt "
operator|+
name|myAttemptID
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
name|slotsInUse
operator|.
name|addAndGet
argument_list|(
operator|-
name|taskTypeSlots
argument_list|(
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|completedMaps
else|:
name|completedReduces
operator|)
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
comment|// check for a spectacularly successful speculation
name|TaskId
name|taskID
init|=
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|Task
name|task
init|=
name|myJob
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|otherAttempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|otherAttempt
operator|!=
name|this
operator|&&
name|otherAttempt
operator|.
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|RUNNING
condition|)
block|{
comment|// we had two instances running.  Try to determine how much
comment|//  we might have saved by speculation
if|if
condition|(
name|getID
argument_list|()
operator|.
name|getId
argument_list|()
operator|>
name|otherAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
comment|// the speculation won
name|successfulSpeculations
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|float
name|hisProgress
init|=
name|otherAttempt
operator|.
name|getProgress
argument_list|()
decl_stmt|;
name|long
name|hisStartTime
init|=
operator|(
operator|(
name|MyTaskAttemptImpl
operator|)
name|otherAttempt
operator|)
operator|.
name|startMockTime
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE:A speculation finished at time "
operator|+
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|".  The stalled attempt is at "
operator|+
operator|(
name|hisProgress
operator|*
literal|100.0
operator|)
operator|+
literal|"% progress, and it started at "
operator|+
name|hisStartTime
operator|+
literal|", which is "
operator|+
operator|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|hisStartTime
operator|)
operator|+
literal|" ago."
argument_list|)
expr_stmt|;
name|long
name|originalTaskEndEstimate
init|=
operator|(
name|hisStartTime
operator|+
name|estimator
operator|.
name|estimatedRuntime
argument_list|(
name|otherAttempt
operator|.
name|getID
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE: We would have expected the original attempt to take "
operator|+
name|estimator
operator|.
name|estimatedRuntime
argument_list|(
name|otherAttempt
operator|.
name|getID
argument_list|()
argument_list|)
operator|+
literal|", finishing at "
operator|+
name|originalTaskEndEstimate
argument_list|)
expr_stmt|;
name|long
name|estimatedSavings
init|=
name|originalTaskEndEstimate
operator|-
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|taskTimeSavedBySpeculation
operator|.
name|addAndGet
argument_list|(
name|estimatedSavings
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE: The task is "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|slotsInUse
operator|.
name|addAndGet
argument_list|(
operator|-
name|taskTypeSlots
argument_list|(
name|myAttemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyTaskAttemptImpl
operator|)
name|otherAttempt
operator|)
operator|.
name|overridingState
operator|=
name|TaskAttemptState
operator|.
name|KILLED
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TLTRE: The normal attempt beat the speculation in "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|getProgress
argument_list|()
operator|==
literal|1.0F
return|;
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerID ()
specifier|public
name|ContainerId
name|getAssignedContainerID
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getNodeHttpAddress ()
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getNodeRackName ()
specifier|public
name|String
name|getNodeRackName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getLaunchTime ()
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
return|return
name|startMockTime
return|;
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getSortFinishTime ()
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerMgrAddress ()
specifier|public
name|String
name|getAssignedContainerMgrAddress
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
block|}
DECL|class|MockClock
specifier|static
class|class
name|MockClock
implements|implements
name|Clock
block|{
DECL|field|currentTime
specifier|private
name|long
name|currentTime
init|=
literal|0
decl_stmt|;
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|currentTime
return|;
block|}
DECL|method|setMeasuredTime (long newTime)
name|void
name|setMeasuredTime
parameter_list|(
name|long
name|newTime
parameter_list|)
block|{
name|currentTime
operator|=
name|newTime
expr_stmt|;
block|}
DECL|method|advanceTime (long increment)
name|void
name|advanceTime
parameter_list|(
name|long
name|increment
parameter_list|)
block|{
name|currentTime
operator|+=
name|increment
expr_stmt|;
block|}
block|}
DECL|class|MyAppMaster
class|class
name|MyAppMaster
extends|extends
name|CompositeService
block|{
DECL|field|clock
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|method|MyAppMaster (Clock clock)
specifier|public
name|MyAppMaster
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|MyAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clock
operator|==
literal|null
condition|)
block|{
name|clock
operator|=
operator|new
name|SystemClock
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created MyAppMaster"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyAppContext
class|class
name|MyAppContext
implements|implements
name|AppContext
block|{
DECL|field|myAppAttemptID
specifier|private
specifier|final
name|ApplicationAttemptId
name|myAppAttemptID
decl_stmt|;
DECL|field|myApplicationID
specifier|private
specifier|final
name|ApplicationId
name|myApplicationID
decl_stmt|;
DECL|field|myJobID
specifier|private
specifier|final
name|JobId
name|myJobID
decl_stmt|;
DECL|field|allJobs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|allJobs
decl_stmt|;
DECL|method|MyAppContext (int numberMaps, int numberReduces)
name|MyAppContext
parameter_list|(
name|int
name|numberMaps
parameter_list|,
name|int
name|numberReduces
parameter_list|)
block|{
name|myApplicationID
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|myAppAttemptID
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|myApplicationID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|myJobID
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
expr_stmt|;
name|myJobID
operator|.
name|setAppId
argument_list|(
name|myApplicationID
argument_list|)
expr_stmt|;
name|Job
name|myJob
init|=
operator|new
name|MyJobImpl
argument_list|(
name|myJobID
argument_list|,
name|numberMaps
argument_list|,
name|numberReduces
argument_list|)
decl_stmt|;
name|allJobs
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|myJobID
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|myAppAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|myApplicationID
return|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|allJobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|allJobs
return|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CharSequence
name|getUser
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
operator|new
name|ClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistedNodes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlacklistedNodes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

