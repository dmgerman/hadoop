begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.speculate.forecast
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|forecast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * Implementation of the static model for Simple exponential smoothing.  */
end_comment

begin_class
DECL|class|SimpleExponentialSmoothing
specifier|public
class|class
name|SimpleExponentialSmoothing
block|{
DECL|field|DEFAULT_FORECAST
specifier|public
specifier|final
specifier|static
name|double
name|DEFAULT_FORECAST
init|=
operator|-
literal|1.0
decl_stmt|;
DECL|field|kMinimumReads
specifier|private
specifier|final
name|int
name|kMinimumReads
decl_stmt|;
DECL|field|kStagnatedWindow
specifier|private
specifier|final
name|long
name|kStagnatedWindow
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|timeConstant
specifier|private
name|long
name|timeConstant
decl_stmt|;
DECL|field|forecastRefEntry
specifier|private
name|AtomicReference
argument_list|<
name|ForecastRecord
argument_list|>
name|forecastRefEntry
decl_stmt|;
DECL|method|createForecast (long timeConstant, int skipCnt, long stagnatedWindow, long timeStamp)
specifier|public
specifier|static
name|SimpleExponentialSmoothing
name|createForecast
parameter_list|(
name|long
name|timeConstant
parameter_list|,
name|int
name|skipCnt
parameter_list|,
name|long
name|stagnatedWindow
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
return|return
operator|new
name|SimpleExponentialSmoothing
argument_list|(
name|timeConstant
argument_list|,
name|skipCnt
argument_list|,
name|stagnatedWindow
argument_list|,
name|timeStamp
argument_list|)
return|;
block|}
DECL|method|SimpleExponentialSmoothing (long ktConstant, int skipCnt, long stagnatedWindow, long timeStamp)
name|SimpleExponentialSmoothing
parameter_list|(
name|long
name|ktConstant
parameter_list|,
name|int
name|skipCnt
parameter_list|,
name|long
name|stagnatedWindow
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
name|kMinimumReads
operator|=
name|skipCnt
expr_stmt|;
name|kStagnatedWindow
operator|=
name|stagnatedWindow
expr_stmt|;
name|this
operator|.
name|timeConstant
operator|=
name|ktConstant
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|timeStamp
expr_stmt|;
name|this
operator|.
name|forecastRefEntry
operator|=
operator|new
name|AtomicReference
argument_list|<
name|ForecastRecord
argument_list|>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|class|ForecastRecord
specifier|private
class|class
name|ForecastRecord
block|{
DECL|field|alpha
specifier|private
name|double
name|alpha
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
DECL|field|sample
specifier|private
name|double
name|sample
decl_stmt|;
DECL|field|rawData
specifier|private
name|double
name|rawData
decl_stmt|;
DECL|field|forecast
specifier|private
name|double
name|forecast
decl_stmt|;
DECL|field|sseError
specifier|private
name|double
name|sseError
decl_stmt|;
DECL|field|myIndex
specifier|private
name|long
name|myIndex
decl_stmt|;
DECL|method|ForecastRecord (double forecast, double rawData, long timeStamp)
name|ForecastRecord
parameter_list|(
name|double
name|forecast
parameter_list|,
name|double
name|rawData
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
name|this
argument_list|(
literal|0.0
argument_list|,
name|forecast
argument_list|,
name|rawData
argument_list|,
name|forecast
argument_list|,
name|timeStamp
argument_list|,
literal|0.0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|ForecastRecord (double alpha, double sample, double rawData, double forecast, long timeStamp, double accError, long index)
name|ForecastRecord
parameter_list|(
name|double
name|alpha
parameter_list|,
name|double
name|sample
parameter_list|,
name|double
name|rawData
parameter_list|,
name|double
name|forecast
parameter_list|,
name|long
name|timeStamp
parameter_list|,
name|double
name|accError
parameter_list|,
name|long
name|index
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
name|this
operator|.
name|alpha
operator|=
name|alpha
expr_stmt|;
name|this
operator|.
name|sseError
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|sample
operator|=
name|sample
expr_stmt|;
name|this
operator|.
name|forecast
operator|=
name|forecast
expr_stmt|;
name|this
operator|.
name|rawData
operator|=
name|rawData
expr_stmt|;
name|this
operator|.
name|sseError
operator|=
name|accError
expr_stmt|;
name|this
operator|.
name|myIndex
operator|=
name|index
expr_stmt|;
block|}
DECL|method|preProcessRawData (double rData, long newTime)
specifier|private
name|double
name|preProcessRawData
parameter_list|(
name|double
name|rData
parameter_list|,
name|long
name|newTime
parameter_list|)
block|{
return|return
name|processRawData
argument_list|(
name|this
operator|.
name|rawData
argument_list|,
name|this
operator|.
name|timeStamp
argument_list|,
name|rData
argument_list|,
name|newTime
argument_list|)
return|;
block|}
DECL|method|append (long newTimeStamp, double rData)
specifier|public
name|ForecastRecord
name|append
parameter_list|(
name|long
name|newTimeStamp
parameter_list|,
name|double
name|rData
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|timeStamp
operator|>
name|newTimeStamp
condition|)
block|{
return|return
name|this
return|;
block|}
name|double
name|newSample
init|=
name|preProcessRawData
argument_list|(
name|rData
argument_list|,
name|newTimeStamp
argument_list|)
decl_stmt|;
name|long
name|deltaTime
init|=
name|this
operator|.
name|timeStamp
operator|-
name|newTimeStamp
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|myIndex
operator|==
name|kMinimumReads
condition|)
block|{
name|timeConstant
operator|=
name|Math
operator|.
name|max
argument_list|(
name|timeConstant
argument_list|,
name|newTimeStamp
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|double
name|smoothFactor
init|=
literal|1
operator|-
name|Math
operator|.
name|exp
argument_list|(
operator|(
operator|(
name|double
operator|)
name|deltaTime
operator|)
operator|/
name|timeConstant
argument_list|)
decl_stmt|;
name|double
name|forecastVal
init|=
name|smoothFactor
operator|*
name|newSample
operator|+
operator|(
literal|1.0
operator|-
name|smoothFactor
operator|)
operator|*
name|this
operator|.
name|forecast
decl_stmt|;
name|double
name|newSSEError
init|=
name|this
operator|.
name|sseError
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|newSample
operator|-
name|this
operator|.
name|forecast
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
operator|new
name|ForecastRecord
argument_list|(
name|smoothFactor
argument_list|,
name|newSample
argument_list|,
name|rData
argument_list|,
name|forecastVal
argument_list|,
name|newTimeStamp
argument_list|,
name|newSSEError
argument_list|,
name|this
operator|.
name|myIndex
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|isDataStagnated (long timeStamp)
specifier|public
name|boolean
name|isDataStagnated
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
operator|&&
name|rec
operator|.
name|myIndex
operator|<=
name|kMinimumReads
condition|)
block|{
return|return
operator|(
name|rec
operator|.
name|timeStamp
operator|+
name|kStagnatedWindow
operator|)
operator|<
name|timeStamp
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|processRawData (double oldRawData, long oldTime, double newRawData, long newTime)
specifier|static
name|double
name|processRawData
parameter_list|(
name|double
name|oldRawData
parameter_list|,
name|long
name|oldTime
parameter_list|,
name|double
name|newRawData
parameter_list|,
name|long
name|newTime
parameter_list|)
block|{
name|double
name|rate
init|=
operator|(
name|newRawData
operator|-
name|oldRawData
operator|)
operator|/
operator|(
name|newTime
operator|-
name|oldTime
operator|)
decl_stmt|;
return|return
name|rate
return|;
block|}
DECL|method|incorporateReading (long timeStamp, double rawData)
specifier|public
name|void
name|incorporateReading
parameter_list|(
name|long
name|timeStamp
parameter_list|,
name|double
name|rawData
parameter_list|)
block|{
name|ForecastRecord
name|oldRec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldRec
operator|==
literal|null
condition|)
block|{
name|double
name|oldForecast
init|=
name|processRawData
argument_list|(
literal|0
argument_list|,
name|startTime
argument_list|,
name|rawData
argument_list|,
name|timeStamp
argument_list|)
decl_stmt|;
name|forecastRefEntry
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
operator|new
name|ForecastRecord
argument_list|(
name|oldForecast
argument_list|,
literal|0.0
argument_list|,
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
name|incorporateReading
argument_list|(
name|timeStamp
argument_list|,
name|rawData
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
operator|!
name|forecastRefEntry
operator|.
name|compareAndSet
argument_list|(
name|oldRec
argument_list|,
name|oldRec
operator|.
name|append
argument_list|(
name|timeStamp
argument_list|,
name|rawData
argument_list|)
argument_list|)
condition|)
block|{
name|oldRec
operator|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getForecast ()
specifier|public
name|double
name|getForecast
parameter_list|()
block|{
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
operator|&&
name|rec
operator|.
name|myIndex
operator|>
name|kMinimumReads
condition|)
block|{
return|return
name|rec
operator|.
name|forecast
return|;
block|}
return|return
name|DEFAULT_FORECAST
return|;
block|}
DECL|method|isDefaultForecast (double value)
specifier|public
name|boolean
name|isDefaultForecast
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
name|DEFAULT_FORECAST
return|;
block|}
DECL|method|getSSE ()
specifier|public
name|double
name|getSSE
parameter_list|()
block|{
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
return|return
name|rec
operator|.
name|sseError
return|;
block|}
return|return
name|DEFAULT_FORECAST
return|;
block|}
DECL|method|isErrorWithinBound (double bound)
specifier|public
name|boolean
name|isErrorWithinBound
parameter_list|(
name|double
name|bound
parameter_list|)
block|{
name|double
name|squaredErr
init|=
name|getSSE
argument_list|()
decl_stmt|;
if|if
condition|(
name|squaredErr
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|bound
operator|>
name|squaredErr
return|;
block|}
DECL|method|getRawData ()
specifier|public
name|double
name|getRawData
parameter_list|()
block|{
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
return|return
name|rec
operator|.
name|rawData
return|;
block|}
return|return
name|DEFAULT_FORECAST
return|;
block|}
DECL|method|getTimeStamp ()
specifier|public
name|long
name|getTimeStamp
parameter_list|()
block|{
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
return|return
name|rec
operator|.
name|timeStamp
return|;
block|}
return|return
literal|0L
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getForecastRefEntry ()
specifier|public
name|AtomicReference
argument_list|<
name|ForecastRecord
argument_list|>
name|getForecastRefEntry
parameter_list|()
block|{
return|return
name|forecastRefEntry
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
literal|"NULL"
decl_stmt|;
name|ForecastRecord
name|rec
init|=
name|forecastRefEntry
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
literal|"rec.index = "
operator|+
name|rec
operator|.
name|myIndex
operator|+
literal|", forecast t: "
operator|+
name|rec
operator|.
name|timeStamp
operator|+
literal|", forecast: "
operator|+
name|rec
operator|.
name|forecast
operator|+
literal|", sample: "
operator|+
name|rec
operator|.
name|sample
operator|+
literal|", raw: "
operator|+
name|rec
operator|.
name|rawData
operator|+
literal|", error: "
operator|+
name|rec
operator|.
name|sseError
operator|+
literal|", alpha: "
operator|+
name|rec
operator|.
name|alpha
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

