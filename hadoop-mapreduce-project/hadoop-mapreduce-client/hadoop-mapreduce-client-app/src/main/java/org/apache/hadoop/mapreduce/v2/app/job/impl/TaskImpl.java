begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobMapTaskRescheduledEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskTAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of Task interface.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|TaskImpl
specifier|public
specifier|abstract
class|class
name|TaskImpl
implements|implements
name|Task
implements|,
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|final
name|JobConf
name|conf
decl_stmt|;
DECL|field|jobFile
specifier|protected
specifier|final
name|Path
name|jobFile
decl_stmt|;
DECL|field|committer
specifier|protected
specifier|final
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|partition
specifier|protected
specifier|final
name|int
name|partition
decl_stmt|;
DECL|field|taskAttemptListener
specifier|protected
specifier|final
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|eventHandler
specifier|protected
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|TaskId
name|taskId
decl_stmt|;
DECL|field|attempts
specifier|private
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
decl_stmt|;
DECL|field|maxAttempts
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
DECL|field|clock
specifier|protected
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|MRAppMetrics
name|metrics
decl_stmt|;
DECL|field|appContext
specifier|protected
specifier|final
name|AppContext
name|appContext
decl_stmt|;
DECL|field|scheduledTime
specifier|private
name|long
name|scheduledTime
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|encryptedShuffle
specifier|protected
name|boolean
name|encryptedShuffle
decl_stmt|;
DECL|field|credentials
specifier|protected
name|Credentials
name|credentials
decl_stmt|;
DECL|field|jobToken
specifier|protected
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
comment|// counts the number of attempts that are either running or in a state where
comment|//  they will come to be running when they get a Container
DECL|field|numberUncompletedAttempts
specifier|private
name|int
name|numberUncompletedAttempts
init|=
literal|0
decl_stmt|;
DECL|field|historyTaskStartGenerated
specifier|private
name|boolean
name|historyTaskStartGenerated
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
DECL|field|ATTEMPT_KILLED_TRANSITION
name|ATTEMPT_KILLED_TRANSITION
init|=
operator|new
name|AttemptKilledTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
DECL|field|KILL_TRANSITION
name|KILL_TRANSITION
init|=
operator|new
name|KillTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|TaskImpl
argument_list|,
name|TaskStateInternal
argument_list|,
name|TaskEventType
argument_list|,
name|TaskEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|TaskImpl
argument_list|,
name|TaskStateInternal
argument_list|,
name|TaskEventType
argument_list|,
name|TaskEvent
argument_list|>
argument_list|(
name|TaskStateInternal
operator|.
name|NEW
argument_list|)
comment|// define the state machine of Task
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|NEW
argument_list|,
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskEventType
operator|.
name|T_SCHEDULE
argument_list|,
operator|new
name|InitialScheduleTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|NEW
argument_list|,
name|TaskStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
operator|new
name|KillNewTransition
argument_list|()
argument_list|)
comment|// Transitions from SCHEDULED state
comment|//when the first attempt is launched, the task state is set to RUNNING
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|,
operator|new
name|LaunchTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
name|KILL_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|,
name|ATTEMPT_KILLED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|FAILED
argument_list|)
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|()
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|)
comment|//more attempts may start later
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_COMMIT_PENDING
argument_list|,
operator|new
name|AttemptCommitPendingTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|,
operator|new
name|RedundantScheduleTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|,
operator|new
name|AttemptSucceededTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|,
name|ATTEMPT_KILLED_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|FAILED
argument_list|)
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|,
operator|new
name|AttemptFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
name|KILL_TRANSITION
argument_list|)
comment|// Transitions from KILL_WAIT state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|TaskStateInternal
operator|.
name|KILLED
argument_list|)
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|,
operator|new
name|KillWaitAttemptKilledTransition
argument_list|()
argument_list|)
comment|// Ignore-able transitions.
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|TaskStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_COMMIT_PENDING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|)
argument_list|)
comment|// Transitions from SUCCEEDED state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskStateInternal
operator|.
name|FAILED
argument_list|)
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|,
operator|new
name|RetroactiveFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskStateInternal
operator|.
name|SCHEDULED
argument_list|,
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|)
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|,
operator|new
name|RetroactiveKilledTransition
argument_list|()
argument_list|)
comment|// Ignore-able transitions.
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_COMMIT_PENDING
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskStateInternal
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|TaskStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskStateInternal
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskEventType
operator|.
name|T_KILL
argument_list|,
name|TaskEventType
operator|.
name|T_ADD_SPEC_ATTEMPT
argument_list|)
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|TaskStateInternal
argument_list|,
name|TaskEventType
argument_list|,
name|TaskEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
comment|// By default, the next TaskAttempt number is zero. Changes during recovery
DECL|field|nextAttemptNumber
specifier|protected
name|int
name|nextAttemptNumber
init|=
literal|0
decl_stmt|;
DECL|field|taskAttemptsFromPreviousGeneration
specifier|private
name|List
argument_list|<
name|TaskAttemptInfo
argument_list|>
name|taskAttemptsFromPreviousGeneration
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|RecoverdAttemptsComparator
specifier|private
specifier|static
specifier|final
class|class
name|RecoverdAttemptsComparator
implements|implements
name|Comparator
argument_list|<
name|TaskAttemptInfo
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (TaskAttemptInfo attempt1, TaskAttemptInfo attempt2)
specifier|public
name|int
name|compare
parameter_list|(
name|TaskAttemptInfo
name|attempt1
parameter_list|,
name|TaskAttemptInfo
name|attempt2
parameter_list|)
block|{
name|long
name|diff
init|=
name|attempt1
operator|.
name|getStartTime
argument_list|()
operator|-
name|attempt2
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|diff
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|diff
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
DECL|field|RECOVERED_ATTEMPTS_COMPARATOR
specifier|private
specifier|static
specifier|final
name|RecoverdAttemptsComparator
name|RECOVERED_ATTEMPTS_COMPARATOR
init|=
operator|new
name|RecoverdAttemptsComparator
argument_list|()
decl_stmt|;
comment|//should be set to one which comes first
comment|//saying COMMIT_PENDING
DECL|field|commitAttempt
specifier|private
name|TaskAttemptId
name|commitAttempt
decl_stmt|;
DECL|field|successfulAttempt
specifier|private
name|TaskAttemptId
name|successfulAttempt
decl_stmt|;
DECL|field|failedAttempts
specifier|private
name|int
name|failedAttempts
decl_stmt|;
DECL|field|finishedAttempts
specifier|private
name|int
name|finishedAttempts
decl_stmt|;
comment|//finish are total of success, failed and killed
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getExternalState
argument_list|(
name|getInternalState
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|TaskImpl (JobId jobId, TaskType taskType, int partition, EventHandler eventHandler, Path remoteJobConfFile, JobConf conf, TaskAttemptListener taskAttemptListener, OutputCommitter committer, Token<JobTokenIdentifier> jobToken, Credentials credentials, Clock clock, Map<TaskId, TaskInfo> completedTasksFromPreviousRun, int startCount, MRAppMetrics metrics, AppContext appContext)
specifier|public
name|TaskImpl
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|int
name|partition
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|Path
name|remoteJobConfFile
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|Map
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
name|completedTasksFromPreviousRun
parameter_list|,
name|int
name|startCount
parameter_list|,
name|MRAppMetrics
name|metrics
parameter_list|,
name|AppContext
name|appContext
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|jobFile
operator|=
name|remoteJobConfFile
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|attempts
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
comment|// This overridable method call is okay in a constructor because we
comment|//  have a convention that none of the overrides depends on any
comment|//  fields that need initialization.
name|maxAttempts
operator|=
name|getMaxAttempts
argument_list|()
expr_stmt|;
name|taskId
operator|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
name|partition
argument_list|,
name|taskType
argument_list|)
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|taskAttemptListener
operator|=
name|taskAttemptListener
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|this
operator|.
name|committer
operator|=
name|committer
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
name|this
operator|.
name|jobToken
operator|=
name|jobToken
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
name|this
operator|.
name|encryptedShuffle
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRConfig
operator|.
name|SHUFFLE_SSL_ENABLED_KEY
argument_list|,
name|MRConfig
operator|.
name|SHUFFLE_SSL_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
comment|// See if this is from a previous generation.
if|if
condition|(
name|completedTasksFromPreviousRun
operator|!=
literal|null
operator|&&
name|completedTasksFromPreviousRun
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
condition|)
block|{
comment|// This task has TaskAttempts from previous generation. We have to replay
comment|// them.
name|LOG
operator|.
name|info
argument_list|(
literal|"Task is from previous run "
operator|+
name|taskId
argument_list|)
expr_stmt|;
name|TaskInfo
name|taskInfo
init|=
name|completedTasksFromPreviousRun
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|allAttempts
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
name|taskAttemptsFromPreviousGeneration
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptInfo
argument_list|>
argument_list|()
expr_stmt|;
name|taskAttemptsFromPreviousGeneration
operator|.
name|addAll
argument_list|(
name|allAttempts
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|taskAttemptsFromPreviousGeneration
argument_list|,
name|RECOVERED_ATTEMPTS_COMPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskAttemptsFromPreviousGeneration
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// All the previous attempts are exhausted, now start with a new
comment|// generation.
comment|// All the new TaskAttemptIDs are generated based on MR
comment|// ApplicationAttemptID so that attempts from previous lives don't
comment|// over-step the current one. This assumes that a task won't have more
comment|// than 1000 attempts in its single generation, which is very reasonable.
comment|// Someone is nuts if he/she thinks he/she can live with 1000 TaskAttempts
comment|// and requires serious medical attention.
name|nextAttemptNumber
operator|=
operator|(
name|startCount
operator|-
literal|1
operator|)
operator|*
literal|1000
expr_stmt|;
block|}
else|else
block|{
comment|// There are still some TaskAttempts from previous generation, use them
name|nextAttemptNumber
operator|=
name|taskAttemptsFromPreviousGeneration
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAttempts ()
specifier|public
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|getAttempts
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|attempts
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|attempts
return|;
block|}
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAttempt (TaskAttemptId attemptID)
specifier|public
name|TaskAttempt
name|getAttempt
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskId
name|getID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// TODO: Use stateMachine level method?
return|return
operator|(
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|SUCCEEDED
operator|||
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|FAILED
operator|||
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|KILLED
operator|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskReport
name|getReport
parameter_list|()
block|{
name|TaskReport
name|report
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|report
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|TaskAttemptState
operator|.
name|RUNNING
operator|.
name|equals
argument_list|(
name|attempt
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|report
operator|.
name|addRunningAttempt
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|report
operator|.
name|setSuccessfulAttempt
argument_list|(
name|successfulAttempt
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttempt
name|att
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
literal|"AttemptID:"
operator|+
name|att
operator|.
name|getID
argument_list|()
operator|+
literal|" Info:"
decl_stmt|;
for|for
control|(
name|CharSequence
name|cs
range|:
name|att
operator|.
name|getDiagnostics
argument_list|()
control|)
block|{
name|report
operator|.
name|addDiagnostics
argument_list|(
name|prefix
operator|+
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add a copy of counters as the last step so that their lifetime on heap
comment|// is as small as possible.
name|report
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TaskAttempt
name|bestAttempt
init|=
name|selectBestAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bestAttempt
operator|!=
literal|null
condition|)
block|{
name|counters
operator|=
name|bestAttempt
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counters
operator|=
name|TaskAttemptImpl
operator|.
name|EMPTY_COUNTERS
expr_stmt|;
comment|//        counters.groups = new HashMap<CharSequence, CounterGroup>();
block|}
return|return
name|counters
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TaskAttempt
name|bestAttempt
init|=
name|selectBestAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bestAttempt
operator|==
literal|null
condition|)
block|{
return|return
literal|0f
return|;
block|}
return|return
name|bestAttempt
operator|.
name|getProgress
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInternalState ()
specifier|public
name|TaskStateInternal
name|getInternalState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getExternalState (TaskStateInternal smState)
specifier|private
specifier|static
name|TaskState
name|getExternalState
parameter_list|(
name|TaskStateInternal
name|smState
parameter_list|)
block|{
if|if
condition|(
name|smState
operator|==
name|TaskStateInternal
operator|.
name|KILL_WAIT
condition|)
block|{
return|return
name|TaskState
operator|.
name|KILLED
return|;
block|}
else|else
block|{
return|return
name|TaskState
operator|.
name|valueOf
argument_list|(
name|smState
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|//this is always called in read/write lock
DECL|method|getLaunchTime ()
specifier|private
name|long
name|getLaunchTime
parameter_list|()
block|{
name|long
name|taskLaunchTime
init|=
literal|0
decl_stmt|;
name|boolean
name|launchTimeSet
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|at
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
comment|// select the least launch time of all attempts
name|long
name|attemptLaunchTime
init|=
name|at
operator|.
name|getLaunchTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptLaunchTime
operator|!=
literal|0
operator|&&
operator|!
name|launchTimeSet
condition|)
block|{
comment|// For the first non-zero launch time
name|launchTimeSet
operator|=
literal|true
expr_stmt|;
name|taskLaunchTime
operator|=
name|attemptLaunchTime
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attemptLaunchTime
operator|!=
literal|0
operator|&&
name|taskLaunchTime
operator|>
name|attemptLaunchTime
condition|)
block|{
name|taskLaunchTime
operator|=
name|attemptLaunchTime
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|launchTimeSet
condition|)
block|{
return|return
name|this
operator|.
name|scheduledTime
return|;
block|}
return|return
name|taskLaunchTime
return|;
block|}
comment|//this is always called in read/write lock
comment|//TODO Verify behaviour is Task is killed (no finished attempt)
DECL|method|getFinishTime ()
specifier|private
name|long
name|getFinishTime
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isFinished
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|finishTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|at
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
comment|//select the max finish time of all attempts
if|if
condition|(
name|finishTime
operator|<
name|at
operator|.
name|getFinishTime
argument_list|()
condition|)
block|{
name|finishTime
operator|=
name|at
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|finishTime
return|;
block|}
DECL|method|getFinishTime (TaskAttemptId taId)
specifier|private
name|long
name|getFinishTime
parameter_list|(
name|TaskAttemptId
name|taId
parameter_list|)
block|{
if|if
condition|(
name|taId
operator|==
literal|null
condition|)
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
name|long
name|finishTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|at
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
comment|//select the max finish time of all attempts
if|if
condition|(
name|at
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|taId
argument_list|)
condition|)
block|{
return|return
name|at
operator|.
name|getFinishTime
argument_list|()
return|;
block|}
block|}
return|return
name|finishTime
return|;
block|}
DECL|method|finished (TaskStateInternal finalState)
specifier|private
name|TaskStateInternal
name|finished
parameter_list|(
name|TaskStateInternal
name|finalState
parameter_list|)
block|{
if|if
condition|(
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|RUNNING
condition|)
block|{
name|metrics
operator|.
name|endRunningTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|finalState
return|;
block|}
comment|//select the nextAttemptNumber with best progress
comment|// always called inside the Read Lock
DECL|method|selectBestAttempt ()
specifier|private
name|TaskAttempt
name|selectBestAttempt
parameter_list|()
block|{
name|float
name|progress
init|=
literal|0f
decl_stmt|;
name|TaskAttempt
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|at
range|:
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
switch|switch
condition|(
name|at
operator|.
name|getState
argument_list|()
condition|)
block|{
comment|// ignore all failed task attempts
case|case
name|FAILED
case|:
case|case
name|KILLED
case|:
continue|continue;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|at
expr_stmt|;
comment|//The first time around
block|}
comment|// calculate the best progress
name|float
name|attemptProgress
init|=
name|at
operator|.
name|getProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptProgress
operator|>
name|progress
condition|)
block|{
name|result
operator|=
name|at
expr_stmt|;
name|progress
operator|=
name|attemptProgress
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|canCommit (TaskAttemptId taskAttemptID)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|canCommit
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|commitAttempt
operator|!=
literal|null
condition|)
block|{
name|canCommit
operator|=
name|taskAttemptID
operator|.
name|equals
argument_list|(
name|commitAttempt
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result of canCommit for "
operator|+
name|taskAttemptID
operator|+
literal|":"
operator|+
name|canCommit
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|canCommit
return|;
block|}
DECL|method|createAttempt ()
specifier|protected
specifier|abstract
name|TaskAttemptImpl
name|createAttempt
parameter_list|()
function_decl|;
comment|// No override of this method may require that the subclass be initialized.
DECL|method|getMaxAttempts ()
specifier|protected
specifier|abstract
name|int
name|getMaxAttempts
parameter_list|()
function_decl|;
DECL|method|getSuccessfulAttempt ()
specifier|protected
name|TaskAttempt
name|getSuccessfulAttempt
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|successfulAttempt
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|attempts
operator|.
name|get
argument_list|(
name|successfulAttempt
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This is always called in the Write Lock
DECL|method|addAndScheduleAttempt ()
specifier|private
name|void
name|addAndScheduleAttempt
parameter_list|()
block|{
name|TaskAttempt
name|attempt
init|=
name|createAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created attempt "
operator|+
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|attempts
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|attempts
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|newAttempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|(
name|maxAttempts
argument_list|)
decl_stmt|;
name|newAttempts
operator|.
name|putAll
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
name|attempts
operator|=
name|newAttempts
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
break|break;
default|default:
name|attempts
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Update nextATtemptNumber
if|if
condition|(
name|taskAttemptsFromPreviousGeneration
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|++
name|nextAttemptNumber
expr_stmt|;
block|}
else|else
block|{
comment|// There are still some TaskAttempts from previous generation, use them
name|nextAttemptNumber
operator|=
name|taskAttemptsFromPreviousGeneration
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
operator|++
name|numberUncompletedAttempts
expr_stmt|;
comment|//schedule the nextAttemptNumber
if|if
condition|(
name|failedAttempts
operator|>
literal|0
condition|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_RESCHEDULE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_SCHEDULE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (TaskEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TaskStateInternal
name|oldState
init|=
name|getInternalState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state for "
operator|+
name|this
operator|.
name|taskId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|internalError
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getInternalState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|taskId
operator|+
literal|" Task Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getInternalState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|internalError (TaskEventType type)
specifier|protected
name|void
name|internalError
parameter_list|(
name|TaskEventType
name|type
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid event "
operator|+
name|type
operator|+
literal|" on Task "
operator|+
name|this
operator|.
name|taskId
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|this
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
literal|"Invalid event "
operator|+
name|type
operator|+
literal|" on Task "
operator|+
name|this
operator|.
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// always called inside a transition, in turn inside the Write Lock
DECL|method|handleTaskAttemptCompletion (TaskAttemptId attemptId, TaskAttemptCompletionEventStatus status)
specifier|private
name|void
name|handleTaskAttemptCompletion
parameter_list|(
name|TaskAttemptId
name|attemptId
parameter_list|,
name|TaskAttemptCompletionEventStatus
name|status
parameter_list|)
block|{
name|TaskAttempt
name|attempt
init|=
name|attempts
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
comment|//raise the completion event only if the container is assigned
comment|// to nextAttemptNumber
if|if
condition|(
name|attempt
operator|.
name|getNodeHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TaskAttemptCompletionEvent
name|tce
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptCompletionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|tce
operator|.
name|setEventId
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
operator|(
name|encryptedShuffle
operator|)
condition|?
literal|"https://"
else|:
literal|"http://"
decl_stmt|;
name|tce
operator|.
name|setMapOutputServerAddress
argument_list|(
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|scheme
operator|+
name|attempt
operator|.
name|getNodeHttpAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|attempt
operator|.
name|getShufflePort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setAttemptId
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|runTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|!=
literal|0
operator|&&
name|attempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
name|runTime
operator|=
call|(
name|int
call|)
argument_list|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|tce
operator|.
name|setAttemptRunTime
argument_list|(
name|runTime
argument_list|)
expr_stmt|;
comment|//raise the event to job so that it adds the completion event to its
comment|//data structures
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskAttemptCompletedEvent
argument_list|(
name|tce
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTaskFinishedEvent (TaskImpl task, TaskStateInternal taskState)
specifier|private
specifier|static
name|TaskFinishedEvent
name|createTaskFinishedEvent
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskStateInternal
name|taskState
parameter_list|)
block|{
name|TaskFinishedEvent
name|tfe
init|=
operator|new
name|TaskFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|taskId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|successfulAttempt
argument_list|)
argument_list|,
name|task
operator|.
name|getFinishTime
argument_list|(
name|task
operator|.
name|successfulAttempt
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|taskState
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tfe
return|;
block|}
DECL|method|createTaskFailedEvent (TaskImpl task, List<String> diag, TaskStateInternal taskState, TaskAttemptId taId)
specifier|private
specifier|static
name|TaskFailedEvent
name|createTaskFailedEvent
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|diag
parameter_list|,
name|TaskStateInternal
name|taskState
parameter_list|,
name|TaskAttemptId
name|taId
parameter_list|)
block|{
name|StringBuilder
name|errorSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|diag
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|d
range|:
name|diag
control|)
block|{
name|errorSb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
name|TaskFailedEvent
name|taskFailedEvent
init|=
operator|new
name|TaskFailedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|taskId
argument_list|)
argument_list|,
comment|// Hack since getFinishTime needs isFinished to be true and that doesn't happen till after the transition.
name|task
operator|.
name|getFinishTime
argument_list|(
name|taId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|errorSb
operator|.
name|toString
argument_list|()
argument_list|,
name|taskState
operator|.
name|toString
argument_list|()
argument_list|,
name|taId
operator|==
literal|null
condition|?
literal|null
else|:
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|taskFailedEvent
return|;
block|}
DECL|method|unSucceed (TaskImpl task)
specifier|private
specifier|static
name|void
name|unSucceed
parameter_list|(
name|TaskImpl
name|task
parameter_list|)
block|{
name|task
operator|.
name|commitAttempt
operator|=
literal|null
expr_stmt|;
name|task
operator|.
name|successfulAttempt
operator|=
literal|null
expr_stmt|;
block|}
comment|/**   * @return a String representation of the splits.   *   * Subclasses can override this method to provide their own representations   * of splits (if any).   *   */
DECL|method|getSplitsAsString ()
specifier|protected
name|String
name|getSplitsAsString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
DECL|class|InitialScheduleTransition
specifier|private
specifier|static
class|class
name|InitialScheduleTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|addAndScheduleAttempt
argument_list|()
expr_stmt|;
name|task
operator|.
name|scheduledTime
operator|=
name|task
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|TaskStartedEvent
name|tse
init|=
operator|new
name|TaskStartedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|taskId
argument_list|)
argument_list|,
name|task
operator|.
name|getLaunchTime
argument_list|()
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|task
operator|.
name|getSplitsAsString
argument_list|()
argument_list|)
decl_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tse
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|historyTaskStartGenerated
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Used when creating a new attempt while one is already running.
comment|//  Currently we do this for speculation.  In the future we may do this
comment|//  for tasks that failed in a way that might indicate application code
comment|//  problems, so we can take later failures in parallel and flush the
comment|//  job quickly when this happens.
DECL|class|RedundantScheduleTransition
specifier|private
specifier|static
class|class
name|RedundantScheduleTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling a redundant attempt for task "
operator|+
name|task
operator|.
name|taskId
argument_list|)
expr_stmt|;
name|task
operator|.
name|addAndScheduleAttempt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AttemptCommitPendingTransition
specifier|private
specifier|static
class|class
name|AttemptCommitPendingTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|TaskTAttemptEvent
name|ev
init|=
operator|(
name|TaskTAttemptEvent
operator|)
name|event
decl_stmt|;
comment|// The nextAttemptNumber is commit pending, decide on set the commitAttempt
name|TaskAttemptId
name|attemptID
init|=
name|ev
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|commitAttempt
operator|==
literal|null
condition|)
block|{
comment|// TODO: validate attemptID
name|task
operator|.
name|commitAttempt
operator|=
name|attemptID
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|attemptID
operator|+
literal|" given a go for committing the task output."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Don't think this can be a pluggable decision, so simply raise an
comment|// event for the TaskAttempt to delete its output.
name|LOG
operator|.
name|info
argument_list|(
name|task
operator|.
name|commitAttempt
operator|+
literal|" already given a go for committing the task output, so killing "
operator|+
name|attemptID
argument_list|)
expr_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AttemptSucceededTransition
specifier|private
specifier|static
class|class
name|AttemptSucceededTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|task
operator|.
name|finishedAttempts
operator|++
expr_stmt|;
operator|--
name|task
operator|.
name|numberUncompletedAttempts
expr_stmt|;
name|task
operator|.
name|successfulAttempt
operator|=
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
expr_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task succeeded with attempt "
operator|+
name|task
operator|.
name|successfulAttempt
argument_list|)
expr_stmt|;
comment|// issue kill to all other attempts
if|if
condition|(
name|task
operator|.
name|historyTaskStartGenerated
condition|)
block|{
name|TaskFinishedEvent
name|tfe
init|=
name|createTaskFinishedEvent
argument_list|(
name|task
argument_list|,
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|task
operator|.
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getID
argument_list|()
operator|!=
name|task
operator|.
name|successfulAttempt
operator|&&
comment|// This is okay because it can only talk us out of sending a
comment|//  TA_KILL message to an attempt that doesn't need one for
comment|//  other reasons.
operator|!
name|attempt
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Issuing kill to other attempt "
operator|+
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|task
operator|.
name|finished
argument_list|(
name|TaskStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AttemptKilledTransition
specifier|private
specifier|static
class|class
name|AttemptKilledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|task
operator|.
name|finishedAttempts
operator|++
expr_stmt|;
operator|--
name|task
operator|.
name|numberUncompletedAttempts
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|successfulAttempt
operator|==
literal|null
condition|)
block|{
name|task
operator|.
name|addAndScheduleAttempt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|KillWaitAttemptKilledTransition
specifier|private
specifier|static
class|class
name|KillWaitAttemptKilledTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|,
name|TaskStateInternal
argument_list|>
block|{
DECL|field|finalState
specifier|protected
name|TaskStateInternal
name|finalState
init|=
name|TaskStateInternal
operator|.
name|KILLED
decl_stmt|;
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|TaskStateInternal
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|task
operator|.
name|finishedAttempts
operator|++
expr_stmt|;
comment|// check whether all attempts are finished
if|if
condition|(
name|task
operator|.
name|finishedAttempts
operator|==
name|task
operator|.
name|attempts
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|historyTaskStartGenerated
condition|)
block|{
name|TaskFailedEvent
name|taskFailedEvent
init|=
name|createTaskFailedEvent
argument_list|(
name|task
argument_list|,
literal|null
argument_list|,
name|finalState
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO JH verify failedAttempt null
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|taskFailedEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not"
operator|+
literal|" generated for task: "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|,
name|getExternalState
argument_list|(
name|finalState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|finalState
return|;
block|}
return|return
name|task
operator|.
name|getInternalState
argument_list|()
return|;
block|}
block|}
DECL|class|AttemptFailedTransition
specifier|private
specifier|static
class|class
name|AttemptFailedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|,
name|TaskStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|TaskStateInternal
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|failedAttempts
operator|++
expr_stmt|;
name|TaskTAttemptEvent
name|castEvent
init|=
operator|(
name|TaskTAttemptEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|castEvent
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|equals
argument_list|(
name|task
operator|.
name|commitAttempt
argument_list|)
condition|)
block|{
name|task
operator|.
name|commitAttempt
operator|=
literal|null
expr_stmt|;
block|}
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|attempts
operator|.
name|get
argument_list|(
name|castEvent
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//container was assigned
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerFailedEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|finishedAttempts
operator|++
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|failedAttempts
operator|<
name|task
operator|.
name|maxAttempts
condition|)
block|{
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// we don't need a new event if we already have a spare
if|if
condition|(
operator|--
name|task
operator|.
name|numberUncompletedAttempts
operator|==
literal|0
operator|&&
name|task
operator|.
name|successfulAttempt
operator|==
literal|null
condition|)
block|{
name|task
operator|.
name|addAndScheduleAttempt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
operator|(
operator|(
name|TaskTAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|TIPFAILED
argument_list|)
expr_stmt|;
name|TaskTAttemptEvent
name|ev
init|=
operator|(
name|TaskTAttemptEvent
operator|)
name|event
decl_stmt|;
name|TaskAttemptId
name|taId
init|=
name|ev
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|historyTaskStartGenerated
condition|)
block|{
name|TaskFailedEvent
name|taskFailedEvent
init|=
name|createTaskFailedEvent
argument_list|(
name|task
argument_list|,
name|attempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|TaskStateInternal
operator|.
name|FAILED
argument_list|,
name|taId
argument_list|)
decl_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|taskFailedEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not"
operator|+
literal|" generated for task: "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|,
name|TaskState
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|task
operator|.
name|finished
argument_list|(
name|TaskStateInternal
operator|.
name|FAILED
argument_list|)
return|;
block|}
return|return
name|getDefaultState
argument_list|(
name|task
argument_list|)
return|;
block|}
DECL|method|getDefaultState (TaskImpl task)
specifier|protected
name|TaskStateInternal
name|getDefaultState
parameter_list|(
name|TaskImpl
name|task
parameter_list|)
block|{
return|return
name|task
operator|.
name|getInternalState
argument_list|()
return|;
block|}
block|}
DECL|class|RetroactiveFailureTransition
specifier|private
specifier|static
class|class
name|RetroactiveFailureTransition
extends|extends
name|AttemptFailedTransition
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|TaskStateInternal
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|TaskTAttemptEvent
condition|)
block|{
name|TaskTAttemptEvent
name|castEvent
init|=
operator|(
name|TaskTAttemptEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|SUCCEEDED
operator|&&
operator|!
name|castEvent
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|equals
argument_list|(
name|task
operator|.
name|successfulAttempt
argument_list|)
condition|)
block|{
comment|// don't allow a different task attempt to override a previous
comment|// succeeded state
return|return
name|TaskStateInternal
operator|.
name|SUCCEEDED
return|;
block|}
block|}
comment|// a successful REDUCE task should not be overridden
comment|//TODO: consider moving it to MapTaskImpl
if|if
condition|(
operator|!
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected event for REDUCE task "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|internalError
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// tell the job about the rescheduling
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobMapTaskRescheduledEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
comment|// super.transition is mostly coded for the case where an
comment|//  UNcompleted task failed.  When a COMPLETED task retroactively
comment|//  fails, we have to let AttemptFailedTransition.transition
comment|//  believe that there's no redundancy.
name|unSucceed
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// fake increase in Uncomplete attempts for super.transition
operator|++
name|task
operator|.
name|numberUncompletedAttempts
expr_stmt|;
return|return
name|super
operator|.
name|transition
argument_list|(
name|task
argument_list|,
name|event
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultState (TaskImpl task)
specifier|protected
name|TaskStateInternal
name|getDefaultState
parameter_list|(
name|TaskImpl
name|task
parameter_list|)
block|{
return|return
name|TaskStateInternal
operator|.
name|SCHEDULED
return|;
block|}
block|}
DECL|class|RetroactiveKilledTransition
specifier|private
specifier|static
class|class
name|RetroactiveKilledTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|,
name|TaskStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|TaskStateInternal
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|TaskAttemptId
name|attemptId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TaskTAttemptEvent
condition|)
block|{
name|TaskTAttemptEvent
name|castEvent
init|=
operator|(
name|TaskTAttemptEvent
operator|)
name|event
decl_stmt|;
name|attemptId
operator|=
name|castEvent
operator|.
name|getTaskAttemptID
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getInternalState
argument_list|()
operator|==
name|TaskStateInternal
operator|.
name|SUCCEEDED
operator|&&
operator|!
name|attemptId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|successfulAttempt
argument_list|)
condition|)
block|{
comment|// don't allow a different task attempt to override a previous
comment|// succeeded state
return|return
name|TaskStateInternal
operator|.
name|SUCCEEDED
return|;
block|}
block|}
comment|// a successful REDUCE task should not be overridden
comment|// TODO: consider moving it to MapTaskImpl
if|if
condition|(
operator|!
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected event for REDUCE task "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|internalError
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// successful attempt is now killed. reschedule
comment|// tell the job about the rescheduling
name|unSucceed
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|task
operator|.
name|handleTaskAttemptCompletion
argument_list|(
name|attemptId
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobMapTaskRescheduledEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
comment|// typically we are here because this map task was run on a bad node and
comment|// we want to reschedule it on a different node.
comment|// Depending on whether there are previous failed attempts or not this
comment|// can SCHEDULE or RESCHEDULE the container allocate request. If this
comment|// SCHEDULE's then the dataLocal hosts of this taskAttempt will be used
comment|// from the map splitInfo. So the bad node might be sent as a location
comment|// to the RM. But the RM would ignore that just like it would ignore
comment|// currently pending container requests affinitized to bad nodes.
name|task
operator|.
name|addAndScheduleAttempt
argument_list|()
expr_stmt|;
return|return
name|TaskStateInternal
operator|.
name|SCHEDULED
return|;
block|}
block|}
DECL|class|KillNewTransition
specifier|private
specifier|static
class|class
name|KillNewTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|historyTaskStartGenerated
condition|)
block|{
name|TaskFailedEvent
name|taskFailedEvent
init|=
name|createTaskFailedEvent
argument_list|(
name|task
argument_list|,
literal|null
argument_list|,
name|TaskStateInternal
operator|.
name|KILLED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO Verify failedAttemptId is null
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|task
operator|.
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|,
name|taskFailedEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not"
operator|+
literal|" generated for task: "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskEvent
argument_list|(
name|task
operator|.
name|taskId
argument_list|,
name|getExternalState
argument_list|(
name|TaskStateInternal
operator|.
name|KILLED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|metrics
operator|.
name|endWaitingTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|killUnfinishedAttempt (TaskAttempt attempt, String logMsg)
specifier|private
name|void
name|killUnfinishedAttempt
parameter_list|(
name|TaskAttempt
name|attempt
parameter_list|,
name|String
name|logMsg
parameter_list|)
block|{
if|if
condition|(
name|attempt
operator|!=
literal|null
operator|&&
operator|!
name|attempt
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillTransition
specifier|private
specifier|static
class|class
name|KillTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
comment|// issue kill to all non finished attempts
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|task
operator|.
name|attempts
operator|.
name|values
argument_list|()
control|)
block|{
name|task
operator|.
name|killUnfinishedAttempt
argument_list|(
name|attempt
argument_list|,
literal|"Task KILL is received. Killing attempt!"
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|numberUncompletedAttempts
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|class|LaunchTransition
specifier|static
class|class
name|LaunchTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskImpl
argument_list|,
name|TaskEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskImpl task, TaskEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskImpl
name|task
parameter_list|,
name|TaskEvent
name|event
parameter_list|)
block|{
name|task
operator|.
name|metrics
operator|.
name|launchedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|task
operator|.
name|metrics
operator|.
name|runningTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

