begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|NormalizedResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|MRAppMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobUpdatedNodesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|preemption
operator|.
name|AMPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMTokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidLabelResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Allocates the container from the ResourceManager scheduler.  */
end_comment

begin_class
DECL|class|RMContainerAllocator
specifier|public
class|class
name|RMContainerAllocator
extends|extends
name|RMContainerRequestor
implements|implements
name|ContainerAllocator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
DECL|field|DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART
name|float
name|DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART
init|=
literal|0.05f
decl_stmt|;
DECL|field|PRIORITY_FAST_FAIL_MAP
specifier|static
specifier|final
name|Priority
name|PRIORITY_FAST_FAIL_MAP
decl_stmt|;
DECL|field|PRIORITY_REDUCE
specifier|static
specifier|final
name|Priority
name|PRIORITY_REDUCE
decl_stmt|;
DECL|field|PRIORITY_MAP
specifier|static
specifier|final
name|Priority
name|PRIORITY_MAP
decl_stmt|;
DECL|field|PRIORITY_OPPORTUNISTIC_MAP
specifier|static
specifier|final
name|Priority
name|PRIORITY_OPPORTUNISTIC_MAP
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|RAMPDOWN_DIAGNOSTIC
specifier|public
specifier|static
specifier|final
name|String
name|RAMPDOWN_DIAGNOSTIC
init|=
literal|"Reducer preempted "
operator|+
literal|"to make room for pending map attempts"
decl_stmt|;
DECL|field|eventHandlingThread
specifier|private
name|Thread
name|eventHandlingThread
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|final
name|AtomicBoolean
name|stopped
decl_stmt|;
static|static
block|{
name|PRIORITY_FAST_FAIL_MAP
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIORITY_FAST_FAIL_MAP
operator|.
name|setPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|PRIORITY_REDUCE
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIORITY_REDUCE
operator|.
name|setPriority
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|PRIORITY_MAP
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIORITY_MAP
operator|.
name|setPriority
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|PRIORITY_OPPORTUNISTIC_MAP
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|setPriority
argument_list|(
literal|19
argument_list|)
expr_stmt|;
block|}
comment|/*   Vocabulary Used:    pending -> requests which are NOT yet sent to RM   scheduled -> requests which are sent to RM but not yet assigned   assigned -> requests which are assigned to a container   completed -> request corresponding to which container has completed      Lifecycle of map   scheduled->assigned->completed      Lifecycle of reduce   pending->scheduled->assigned->completed      Maps are scheduled as soon as their requests are received. Reduces are    added to the pending and are ramped up (added to scheduled) based    on completed maps and current availability in the cluster.   */
comment|//reduces which are not yet scheduled
DECL|field|pendingReduces
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|ContainerRequest
argument_list|>
name|pendingReduces
init|=
operator|new
name|LinkedList
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|//holds information about the assigned containers to task attempts
DECL|field|assignedRequests
specifier|private
specifier|final
name|AssignedRequests
name|assignedRequests
decl_stmt|;
comment|//holds scheduled requests to be fulfilled by RM
DECL|field|scheduledRequests
specifier|private
specifier|final
name|ScheduledRequests
name|scheduledRequests
init|=
operator|new
name|ScheduledRequests
argument_list|()
decl_stmt|;
DECL|field|containersAllocated
specifier|private
name|int
name|containersAllocated
init|=
literal|0
decl_stmt|;
DECL|field|containersReleased
specifier|private
name|int
name|containersReleased
init|=
literal|0
decl_stmt|;
DECL|field|hostLocalAssigned
specifier|private
name|int
name|hostLocalAssigned
init|=
literal|0
decl_stmt|;
DECL|field|rackLocalAssigned
specifier|private
name|int
name|rackLocalAssigned
init|=
literal|0
decl_stmt|;
DECL|field|lastCompletedTasks
specifier|private
name|int
name|lastCompletedTasks
init|=
literal|0
decl_stmt|;
DECL|field|recalculateReduceSchedule
specifier|private
name|boolean
name|recalculateReduceSchedule
init|=
literal|false
decl_stmt|;
DECL|field|mapResourceRequest
specifier|private
name|Resource
name|mapResourceRequest
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|reduceResourceRequest
specifier|private
name|Resource
name|reduceResourceRequest
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|reduceStarted
specifier|private
name|boolean
name|reduceStarted
init|=
literal|false
decl_stmt|;
DECL|field|maxReduceRampupLimit
specifier|private
name|float
name|maxReduceRampupLimit
init|=
literal|0
decl_stmt|;
DECL|field|maxReducePreemptionLimit
specifier|private
name|float
name|maxReducePreemptionLimit
init|=
literal|0
decl_stmt|;
comment|// Mapper allocation timeout, after which a reducer is forcibly preempted
DECL|field|reducerUnconditionalPreemptionDelayMs
specifier|private
name|long
name|reducerUnconditionalPreemptionDelayMs
decl_stmt|;
comment|// Duration to wait before preempting a reducer when there is NO room
DECL|field|reducerNoHeadroomPreemptionDelayMs
specifier|private
name|long
name|reducerNoHeadroomPreemptionDelayMs
init|=
literal|0
decl_stmt|;
DECL|field|reduceSlowStart
specifier|private
name|float
name|reduceSlowStart
init|=
literal|0
decl_stmt|;
DECL|field|maxRunningMaps
specifier|private
name|int
name|maxRunningMaps
init|=
literal|0
decl_stmt|;
DECL|field|maxRunningReduces
specifier|private
name|int
name|maxRunningReduces
init|=
literal|0
decl_stmt|;
DECL|field|retryInterval
specifier|private
name|long
name|retryInterval
decl_stmt|;
DECL|field|retrystartTime
specifier|private
name|long
name|retrystartTime
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|preemptionPolicy
specifier|private
specifier|final
name|AMPreemptionPolicy
name|preemptionPolicy
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|eventQueue
specifier|protected
name|BlockingQueue
argument_list|<
name|ContainerAllocatorEvent
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|ContainerAllocatorEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|scheduleStats
specifier|private
name|ScheduleStats
name|scheduleStats
init|=
operator|new
name|ScheduleStats
argument_list|()
decl_stmt|;
DECL|field|mapNodeLabelExpression
specifier|private
name|String
name|mapNodeLabelExpression
decl_stmt|;
DECL|field|reduceNodeLabelExpression
specifier|private
name|String
name|reduceNodeLabelExpression
decl_stmt|;
DECL|method|RMContainerAllocator (ClientService clientService, AppContext context, AMPreemptionPolicy preemptionPolicy)
specifier|public
name|RMContainerAllocator
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|,
name|AMPreemptionPolicy
name|preemptionPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|preemptionPolicy
operator|=
name|preemptionPolicy
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|context
operator|.
name|getClock
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignedRequests
operator|=
name|createAssignedRequests
argument_list|()
expr_stmt|;
block|}
DECL|method|createAssignedRequests ()
specifier|protected
name|AssignedRequests
name|createAssignedRequests
parameter_list|()
block|{
return|return
operator|new
name|AssignedRequests
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|reduceSlowStart
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
name|DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART
argument_list|)
expr_stmt|;
name|maxReduceRampupLimit
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_REDUCE_RAMPUP_UP_LIMIT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_JOB_REDUCE_RAMP_UP_LIMIT
argument_list|)
expr_stmt|;
name|maxReducePreemptionLimit
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_REDUCE_PREEMPTION_LIMIT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_JOB_REDUCE_PREEMPTION_LIMIT
argument_list|)
expr_stmt|;
name|reducerUnconditionalPreemptionDelayMs
operator|=
literal|1000
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC
argument_list|)
expr_stmt|;
name|reducerNoHeadroomPreemptionDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_REDUCER_PREEMPT_DELAY_SEC
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_JOB_REDUCER_PREEMPT_DELAY_SEC
argument_list|)
operator|*
literal|1000
expr_stmt|;
comment|//sec -> ms
name|maxRunningMaps
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_MAP_LIMIT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_RUNNING_MAP_LIMIT
argument_list|)
expr_stmt|;
name|maxRunningReduces
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_RUNNING_REDUCE_LIMIT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_JOB_RUNNING_REDUCE_LIMIT
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|retryInterval
operator|=
name|getConfig
argument_list|()
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TO_RM_WAIT_INTERVAL_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_TO_RM_WAIT_INTERVAL_MS
argument_list|)
expr_stmt|;
name|mapNodeLabelExpression
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_NODE_LABEL_EXP
argument_list|)
expr_stmt|;
name|reduceNodeLabelExpression
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_NODE_LABEL_EXP
argument_list|)
expr_stmt|;
comment|// Init startTime to current time. If all goes well, it will be reset after
comment|// first attempt to contact RM.
name|retrystartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduledRequests
operator|.
name|setNumOpportunisticMapsPercent
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_NUM_OPPORTUNISTIC_MAPS_PERCENT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_NUM_OPPORTUNISTIC_MAPS_PERCENT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|scheduledRequests
operator|.
name|getNumOpportunisticMapsPercent
argument_list|()
operator|+
literal|"% of the mappers will be scheduled using OPPORTUNISTIC containers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|eventHandlingThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerAllocatorEvent
name|event
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|event
operator|=
name|RMContainerAllocator
operator|.
name|this
operator|.
name|eventQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Returning, interrupted : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" to the ContainreAllocator"
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Kill the AM
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
expr_stmt|;
name|this
operator|.
name|eventHandlingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|heartbeat ()
specifier|protected
specifier|synchronized
name|void
name|heartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduleStats
operator|.
name|updateAndLogIfChanged
argument_list|(
literal|"Before Scheduling: "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocatedContainers
operator|!=
literal|null
operator|&&
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scheduledRequests
operator|.
name|assign
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
block|}
name|int
name|completedMaps
init|=
name|getJob
argument_list|()
operator|.
name|getCompletedMaps
argument_list|()
decl_stmt|;
name|int
name|completedTasks
init|=
name|completedMaps
operator|+
name|getJob
argument_list|()
operator|.
name|getCompletedReduces
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|lastCompletedTasks
operator|!=
name|completedTasks
operator|)
operator|||
operator|(
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|lastCompletedTasks
operator|=
name|completedTasks
expr_stmt|;
name|recalculateReduceSchedule
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|recalculateReduceSchedule
condition|)
block|{
name|boolean
name|reducerPreempted
init|=
name|preemptReducesIfNeeded
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reducerPreempted
condition|)
block|{
comment|// Only schedule new reducers if no reducer preemption happens for
comment|// this heartbeat
name|scheduleReduces
argument_list|(
name|getJob
argument_list|()
operator|.
name|getTotalMaps
argument_list|()
argument_list|,
name|completedMaps
argument_list|,
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|,
name|scheduledRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|,
name|mapResourceRequest
argument_list|,
name|reduceResourceRequest
argument_list|,
name|pendingReduces
operator|.
name|size
argument_list|()
argument_list|,
name|maxReduceRampupLimit
argument_list|,
name|reduceSlowStart
argument_list|)
expr_stmt|;
block|}
name|recalculateReduceSchedule
operator|=
literal|false
expr_stmt|;
block|}
name|scheduleStats
operator|.
name|updateAndLogIfChanged
argument_list|(
literal|"After Scheduling: "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stopped
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
comment|// return if already stopped
return|return;
block|}
if|if
condition|(
name|eventHandlingThread
operator|!=
literal|null
condition|)
block|{
name|eventHandlingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
name|scheduleStats
operator|.
name|log
argument_list|(
literal|"Final Stats: "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getAssignedRequests ()
name|AssignedRequests
name|getAssignedRequests
parameter_list|()
block|{
return|return
name|assignedRequests
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getScheduledRequests ()
name|ScheduledRequests
name|getScheduledRequests
parameter_list|()
block|{
return|return
name|scheduledRequests
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getNumOfPendingReduces ()
name|int
name|getNumOfPendingReduces
parameter_list|()
block|{
return|return
name|pendingReduces
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getIsReduceStarted ()
specifier|public
name|boolean
name|getIsReduceStarted
parameter_list|()
block|{
return|return
name|reduceStarted
return|;
block|}
DECL|method|setIsReduceStarted (boolean reduceStarted)
specifier|public
name|void
name|setIsReduceStarted
parameter_list|(
name|boolean
name|reduceStarted
parameter_list|)
block|{
name|this
operator|.
name|reduceStarted
operator|=
name|reduceStarted
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerAllocatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
name|int
name|qSize
init|=
name|eventQueue
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|qSize
operator|!=
literal|0
operator|&&
name|qSize
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Size of event-queue in RMContainerAllocator is "
operator|+
name|qSize
argument_list|)
expr_stmt|;
block|}
name|int
name|remCapacity
init|=
name|eventQueue
operator|.
name|remainingCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|remCapacity
operator|<
literal|1000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Very low remaining capacity in the event-queue "
operator|+
literal|"of RMContainerAllocator: "
operator|+
name|remCapacity
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|eventQueue
operator|.
name|put
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|handleEvent (ContainerAllocatorEvent event)
specifier|protected
specifier|synchronized
name|void
name|handleEvent
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
name|recalculateReduceSchedule
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_REQ
condition|)
block|{
name|ContainerRequestEvent
name|reqEvent
init|=
operator|(
name|ContainerRequestEvent
operator|)
name|event
decl_stmt|;
name|boolean
name|isMap
init|=
name|reqEvent
operator|.
name|getAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|handleMapContainerRequest
argument_list|(
name|reqEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleReduceContainerRequest
argument_list|(
name|reqEvent
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_DEALLOCATE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing the event "
operator|+
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|aId
init|=
name|event
operator|.
name|getAttemptID
argument_list|()
decl_stmt|;
name|boolean
name|removed
init|=
name|scheduledRequests
operator|.
name|remove
argument_list|(
name|aId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|ContainerId
name|containerId
init|=
name|assignedRequests
operator|.
name|get
argument_list|(
name|aId
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|removed
operator|=
literal|true
expr_stmt|;
name|assignedRequests
operator|.
name|remove
argument_list|(
name|aId
argument_list|)
expr_stmt|;
name|containersReleased
operator|++
expr_stmt|;
name|pendingRelease
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|release
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not deallocate container for task attemptId "
operator|+
name|aId
argument_list|)
expr_stmt|;
block|}
name|preemptionPolicy
operator|.
name|handleCompletedContainer
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_FAILED
condition|)
block|{
name|ContainerFailedEvent
name|fEv
init|=
operator|(
name|ContainerFailedEvent
operator|)
name|event
decl_stmt|;
name|String
name|host
init|=
name|getHost
argument_list|(
name|fEv
operator|.
name|getContMgrAddress
argument_list|()
argument_list|)
decl_stmt|;
name|containerFailedOnHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
comment|// propagate failures to preemption policy to discard checkpoints for
comment|// failed tasks
name|preemptionPolicy
operator|.
name|handleFailedContainer
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|handleReduceContainerRequest (ContainerRequestEvent reqEvent)
specifier|private
name|void
name|handleReduceContainerRequest
parameter_list|(
name|ContainerRequestEvent
name|reqEvent
parameter_list|)
block|{
assert|assert
operator|(
name|reqEvent
operator|.
name|getAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|)
assert|;
name|Resource
name|supportedMaxContainerCapability
init|=
name|getMaxContainerCapability
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
name|reduceResourceRequest
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|reduceResourceRequest
operator|=
name|reqEvent
operator|.
name|getCapability
argument_list|()
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
operator|new
name|NormalizedResourceEvent
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|reduceResourceRequest
operator|.
name|getMemorySize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"reduceResourceRequest:"
operator|+
name|reduceResourceRequest
argument_list|)
expr_stmt|;
block|}
name|boolean
name|reduceContainerRequestAccepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|reduceResourceRequest
operator|.
name|getMemorySize
argument_list|()
operator|>
name|supportedMaxContainerCapability
operator|.
name|getMemorySize
argument_list|()
operator|||
name|reduceResourceRequest
operator|.
name|getVirtualCores
argument_list|()
operator|>
name|supportedMaxContainerCapability
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
name|reduceContainerRequestAccepted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reduceContainerRequestAccepted
condition|)
block|{
comment|// set the resources
name|reqEvent
operator|.
name|getCapability
argument_list|()
operator|.
name|setVirtualCores
argument_list|(
name|reduceResourceRequest
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|reqEvent
operator|.
name|getCapability
argument_list|()
operator|.
name|setMemorySize
argument_list|(
name|reduceResourceRequest
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqEvent
operator|.
name|getEarlierAttemptFailed
argument_list|()
condition|)
block|{
comment|//previously failed reducers are added to the front for fail fast
name|pendingReduces
operator|.
name|addFirst
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|reqEvent
argument_list|,
name|PRIORITY_REDUCE
argument_list|,
name|reduceNodeLabelExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//reduces are added to pending queue and are slowly ramped up
name|pendingReduces
operator|.
name|add
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|reqEvent
argument_list|,
name|PRIORITY_REDUCE
argument_list|,
name|reduceNodeLabelExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|diagMsg
init|=
literal|"REDUCE capability required is more than the "
operator|+
literal|"supported max container capability in the cluster. Killing"
operator|+
literal|" the Job. reduceResourceRequest: "
operator|+
name|reduceResourceRequest
operator|+
literal|" maxContainerCapability:"
operator|+
name|supportedMaxContainerCapability
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|diagMsg
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|jobId
argument_list|,
name|diagMsg
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|handleMapContainerRequest (ContainerRequestEvent reqEvent)
specifier|private
name|void
name|handleMapContainerRequest
parameter_list|(
name|ContainerRequestEvent
name|reqEvent
parameter_list|)
block|{
assert|assert
operator|(
name|reqEvent
operator|.
name|getAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|)
assert|;
name|Resource
name|supportedMaxContainerCapability
init|=
name|getMaxContainerCapability
argument_list|()
decl_stmt|;
name|JobId
name|jobId
init|=
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapResourceRequest
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|mapResourceRequest
operator|=
name|reqEvent
operator|.
name|getCapability
argument_list|()
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
operator|new
name|NormalizedResourceEvent
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
operator|.
name|MAP
argument_list|,
name|mapResourceRequest
operator|.
name|getMemorySize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mapResourceRequest:"
operator|+
name|mapResourceRequest
argument_list|)
expr_stmt|;
block|}
name|boolean
name|mapContainerRequestAccepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|mapResourceRequest
operator|.
name|getMemorySize
argument_list|()
operator|>
name|supportedMaxContainerCapability
operator|.
name|getMemorySize
argument_list|()
operator|||
name|mapResourceRequest
operator|.
name|getVirtualCores
argument_list|()
operator|>
name|supportedMaxContainerCapability
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
name|mapContainerRequestAccepted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|mapContainerRequestAccepted
condition|)
block|{
comment|// set the resources
name|reqEvent
operator|.
name|getCapability
argument_list|()
operator|.
name|setMemorySize
argument_list|(
name|mapResourceRequest
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|reqEvent
operator|.
name|getCapability
argument_list|()
operator|.
name|setVirtualCores
argument_list|(
name|mapResourceRequest
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|scheduledRequests
operator|.
name|addMap
argument_list|(
name|reqEvent
argument_list|)
expr_stmt|;
comment|//maps are immediately scheduled
block|}
else|else
block|{
name|String
name|diagMsg
init|=
literal|"The required MAP capability is more than the "
operator|+
literal|"supported max container capability in the cluster. Killing"
operator|+
literal|" the Job. mapResourceRequest: "
operator|+
name|mapResourceRequest
operator|+
literal|" maxContainerCapability:"
operator|+
name|supportedMaxContainerCapability
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|diagMsg
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|jobId
argument_list|,
name|diagMsg
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHost (String contMgrAddress)
specifier|private
specifier|static
name|String
name|getHost
parameter_list|(
name|String
name|contMgrAddress
parameter_list|)
block|{
name|String
name|host
init|=
name|contMgrAddress
decl_stmt|;
name|String
index|[]
name|hostport
init|=
name|host
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostport
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|host
operator|=
name|hostport
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|host
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setReduceResourceRequest (Resource res)
specifier|synchronized
name|void
name|setReduceResourceRequest
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|this
operator|.
name|reduceResourceRequest
operator|=
name|res
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setMapResourceRequest (Resource res)
specifier|synchronized
name|void
name|setMapResourceRequest
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|this
operator|.
name|mapResourceRequest
operator|=
name|res
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|preemptReducesIfNeeded ()
name|boolean
name|preemptReducesIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|reduceResourceRequest
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// no reduces
block|}
if|if
condition|(
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// there are assigned mappers
return|return
literal|false
return|;
block|}
if|if
condition|(
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// there are no pending requests for mappers
return|return
literal|false
return|;
block|}
comment|// At this point:
comment|// we have pending mappers and all assigned resources are taken by reducers
if|if
condition|(
name|reducerUnconditionalPreemptionDelayMs
operator|>=
literal|0
condition|)
block|{
comment|// Unconditional preemption is enabled.
comment|// If mappers are pending for longer than the configured threshold,
comment|// preempt reducers irrespective of what the headroom is.
if|if
condition|(
name|preemptReducersForHangingMapRequests
argument_list|(
name|reducerUnconditionalPreemptionDelayMs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// The pending mappers haven't been waiting for too long. Let us see if
comment|// there are enough resources for a mapper to run. This is calculated by
comment|// excluding scheduled reducers from headroom and comparing it against
comment|// resources required to run one mapper.
name|Resource
name|scheduledReducesResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|reduceResourceRequest
argument_list|,
name|scheduledRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|availableResourceForMap
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|getAvailableResources
argument_list|()
argument_list|,
name|scheduledReducesResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|availableResourceForMap
argument_list|,
name|mapResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Enough room to run a mapper
return|return
literal|false
return|;
block|}
comment|// Available resources are not enough to run mapper. See if we should hold
comment|// off before preempting reducers and preempt if okay.
return|return
name|preemptReducersForHangingMapRequests
argument_list|(
name|reducerNoHeadroomPreemptionDelayMs
argument_list|)
return|;
block|}
DECL|method|preemptReducersForHangingMapRequests (long pendingThreshold)
specifier|private
name|boolean
name|preemptReducersForHangingMapRequests
parameter_list|(
name|long
name|pendingThreshold
parameter_list|)
block|{
name|int
name|hangingMapRequests
init|=
name|getNumHangingRequests
argument_list|(
name|pendingThreshold
argument_list|,
name|scheduledRequests
operator|.
name|maps
argument_list|)
decl_stmt|;
if|if
condition|(
name|hangingMapRequests
operator|>
literal|0
condition|)
block|{
name|preemptReducer
argument_list|(
name|hangingMapRequests
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|clearAllPendingReduceRequests ()
specifier|private
name|void
name|clearAllPendingReduceRequests
parameter_list|()
block|{
name|rampDownReduces
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|preemptReducer (int hangingMapRequests)
specifier|private
name|void
name|preemptReducer
parameter_list|(
name|int
name|hangingMapRequests
parameter_list|)
block|{
name|clearAllPendingReduceRequests
argument_list|()
expr_stmt|;
comment|// preempt for making space for at least one map
name|int
name|preemptionReduceNumForOneMap
init|=
name|ResourceCalculatorUtils
operator|.
name|divideAndCeilContainers
argument_list|(
name|mapResourceRequest
argument_list|,
name|reduceResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|preemptionReduceNumForPreemptionLimit
init|=
name|ResourceCalculatorUtils
operator|.
name|divideAndCeilContainers
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|getResourceLimit
argument_list|()
argument_list|,
name|maxReducePreemptionLimit
argument_list|)
argument_list|,
name|reduceResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|preemptionReduceNumForAllMaps
init|=
name|ResourceCalculatorUtils
operator|.
name|divideAndCeilContainers
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|mapResourceRequest
argument_list|,
name|hangingMapRequests
argument_list|)
argument_list|,
name|reduceResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|toPreempt
init|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|preemptionReduceNumForOneMap
argument_list|,
name|preemptionReduceNumForPreemptionLimit
argument_list|)
argument_list|,
name|preemptionReduceNumForAllMaps
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to preempt "
operator|+
name|toPreempt
operator|+
literal|" due to lack of space for maps"
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|preemptReduce
argument_list|(
name|toPreempt
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumHangingRequests (long allocationDelayThresholdMs, Map<TaskAttemptId, ContainerRequest> requestMap)
specifier|private
name|int
name|getNumHangingRequests
parameter_list|(
name|long
name|allocationDelayThresholdMs
parameter_list|,
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
name|requestMap
parameter_list|)
block|{
if|if
condition|(
name|allocationDelayThresholdMs
operator|<=
literal|0
condition|)
return|return
name|requestMap
operator|.
name|size
argument_list|()
return|;
name|int
name|hangingRequests
init|=
literal|0
decl_stmt|;
name|long
name|currTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerRequest
name|request
range|:
name|requestMap
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|delay
init|=
name|currTime
operator|-
name|request
operator|.
name|requestTimeMs
decl_stmt|;
if|if
condition|(
name|delay
operator|>
name|allocationDelayThresholdMs
condition|)
name|hangingRequests
operator|++
expr_stmt|;
block|}
return|return
name|hangingRequests
return|;
block|}
annotation|@
name|Private
DECL|method|scheduleReduces ( int totalMaps, int completedMaps, int scheduledMaps, int scheduledReduces, int assignedMaps, int assignedReduces, Resource mapResourceReqt, Resource reduceResourceReqt, int numPendingReduces, float maxReduceRampupLimit, float reduceSlowStart)
specifier|public
name|void
name|scheduleReduces
parameter_list|(
name|int
name|totalMaps
parameter_list|,
name|int
name|completedMaps
parameter_list|,
name|int
name|scheduledMaps
parameter_list|,
name|int
name|scheduledReduces
parameter_list|,
name|int
name|assignedMaps
parameter_list|,
name|int
name|assignedReduces
parameter_list|,
name|Resource
name|mapResourceReqt
parameter_list|,
name|Resource
name|reduceResourceReqt
parameter_list|,
name|int
name|numPendingReduces
parameter_list|,
name|float
name|maxReduceRampupLimit
parameter_list|,
name|float
name|reduceSlowStart
parameter_list|)
block|{
if|if
condition|(
name|numPendingReduces
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// get available resources for this job
name|Resource
name|headRoom
init|=
name|getAvailableResources
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recalculating schedule, headroom="
operator|+
name|headRoom
argument_list|)
expr_stmt|;
comment|//check for slow start
if|if
condition|(
operator|!
name|getIsReduceStarted
argument_list|()
condition|)
block|{
comment|//not set yet
name|int
name|completedMapsForReduceSlowstart
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|reduceSlowStart
operator|*
name|totalMaps
argument_list|)
decl_stmt|;
if|if
condition|(
name|completedMaps
operator|<
name|completedMapsForReduceSlowstart
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reduce slow start threshold not met. "
operator|+
literal|"completedMapsForReduceSlowstart "
operator|+
name|completedMapsForReduceSlowstart
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reduce slow start threshold reached. Scheduling reduces."
argument_list|)
expr_stmt|;
name|setIsReduceStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if all maps are assigned, then ramp up all reduces irrespective of the
comment|//headroom
if|if
condition|(
name|scheduledMaps
operator|==
literal|0
operator|&&
name|numPendingReduces
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All maps assigned. "
operator|+
literal|"Ramping up all remaining reduces:"
operator|+
name|numPendingReduces
argument_list|)
expr_stmt|;
name|scheduleAllReduces
argument_list|()
expr_stmt|;
return|return;
block|}
name|float
name|completedMapPercent
init|=
literal|0f
decl_stmt|;
if|if
condition|(
name|totalMaps
operator|!=
literal|0
condition|)
block|{
comment|//support for 0 maps
name|completedMapPercent
operator|=
operator|(
name|float
operator|)
name|completedMaps
operator|/
name|totalMaps
expr_stmt|;
block|}
else|else
block|{
name|completedMapPercent
operator|=
literal|1
expr_stmt|;
block|}
name|Resource
name|netScheduledMapResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|mapResourceReqt
argument_list|,
operator|(
name|scheduledMaps
operator|+
name|assignedMaps
operator|)
argument_list|)
decl_stmt|;
name|Resource
name|netScheduledReduceResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|reduceResourceReqt
argument_list|,
operator|(
name|scheduledReduces
operator|+
name|assignedReduces
operator|)
argument_list|)
decl_stmt|;
name|Resource
name|finalMapResourceLimit
decl_stmt|;
name|Resource
name|finalReduceResourceLimit
decl_stmt|;
comment|// ramp up the reduces based on completed map percentage
name|Resource
name|totalResourceLimit
init|=
name|getResourceLimit
argument_list|()
decl_stmt|;
name|Resource
name|idealReduceResourceLimit
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|totalResourceLimit
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|completedMapPercent
argument_list|,
name|maxReduceRampupLimit
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|ideaMapResourceLimit
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|totalResourceLimit
argument_list|,
name|idealReduceResourceLimit
argument_list|)
decl_stmt|;
comment|// check if there aren't enough maps scheduled, give the free map capacity
comment|// to reduce.
comment|// Even when container number equals, there may be unused resources in one
comment|// dimension
if|if
condition|(
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|ideaMapResourceLimit
argument_list|,
name|mapResourceReqt
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
operator|>=
operator|(
name|scheduledMaps
operator|+
name|assignedMaps
operator|)
condition|)
block|{
comment|// enough resource given to maps, given the remaining to reduces
name|Resource
name|unusedMapResourceLimit
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|ideaMapResourceLimit
argument_list|,
name|netScheduledMapResource
argument_list|)
decl_stmt|;
name|finalReduceResourceLimit
operator|=
name|Resources
operator|.
name|add
argument_list|(
name|idealReduceResourceLimit
argument_list|,
name|unusedMapResourceLimit
argument_list|)
expr_stmt|;
name|finalMapResourceLimit
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|totalResourceLimit
argument_list|,
name|finalReduceResourceLimit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finalMapResourceLimit
operator|=
name|ideaMapResourceLimit
expr_stmt|;
name|finalReduceResourceLimit
operator|=
name|idealReduceResourceLimit
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"completedMapPercent "
operator|+
name|completedMapPercent
operator|+
literal|" totalResourceLimit:"
operator|+
name|totalResourceLimit
operator|+
literal|" finalMapResourceLimit:"
operator|+
name|finalMapResourceLimit
operator|+
literal|" finalReduceResourceLimit:"
operator|+
name|finalReduceResourceLimit
operator|+
literal|" netScheduledMapResource:"
operator|+
name|netScheduledMapResource
operator|+
literal|" netScheduledReduceResource:"
operator|+
name|netScheduledReduceResource
argument_list|)
expr_stmt|;
name|int
name|rampUp
init|=
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|finalReduceResourceLimit
argument_list|,
name|netScheduledReduceResource
argument_list|)
argument_list|,
name|reduceResourceReqt
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rampUp
operator|>
literal|0
condition|)
block|{
name|rampUp
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rampUp
argument_list|,
name|numPendingReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ramping up "
operator|+
name|rampUp
argument_list|)
expr_stmt|;
name|rampUpReduces
argument_list|(
name|rampUp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rampUp
operator|<
literal|0
condition|)
block|{
name|int
name|rampDown
init|=
operator|-
literal|1
operator|*
name|rampUp
decl_stmt|;
name|rampDown
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rampDown
argument_list|,
name|scheduledReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ramping down "
operator|+
name|rampDown
argument_list|)
expr_stmt|;
name|rampDownReduces
argument_list|(
name|rampDown
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|scheduleAllReduces ()
specifier|public
name|void
name|scheduleAllReduces
parameter_list|()
block|{
for|for
control|(
name|ContainerRequest
name|req
range|:
name|pendingReduces
control|)
block|{
name|scheduledRequests
operator|.
name|addReduce
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|pendingReduces
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|rampUpReduces (int rampUp)
specifier|public
name|void
name|rampUpReduces
parameter_list|(
name|int
name|rampUp
parameter_list|)
block|{
comment|//more reduce to be scheduled
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rampUp
condition|;
name|i
operator|++
control|)
block|{
name|ContainerRequest
name|request
init|=
name|pendingReduces
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|scheduledRequests
operator|.
name|addReduce
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|rampDownReduces (int rampDown)
specifier|public
name|void
name|rampDownReduces
parameter_list|(
name|int
name|rampDown
parameter_list|)
block|{
comment|//remove from the scheduled and move back to pending
while|while
condition|(
name|rampDown
operator|>
literal|0
condition|)
block|{
name|ContainerRequest
name|request
init|=
name|scheduledRequests
operator|.
name|removeReduce
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|pendingReduces
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|rampDown
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getResources ()
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|getResources
parameter_list|()
throws|throws
name|Exception
block|{
name|applyConcurrentTaskLimits
argument_list|()
expr_stmt|;
comment|// will be null the first time
name|Resource
name|headRoom
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|getAvailableResources
argument_list|()
argument_list|)
decl_stmt|;
name|AllocateResponse
name|response
decl_stmt|;
comment|/*      * If contact with RM is lost, the AM will wait MR_AM_TO_RM_WAIT_INTERVAL_MS      * milliseconds before aborting. During this interval, AM will still try      * to contact the RM.      */
try|try
block|{
name|response
operator|=
name|makeRemoteRequest
argument_list|()
expr_stmt|;
comment|// Reset retry count if no exception occurred.
name|retrystartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationAttemptNotFoundException
name|e
parameter_list|)
block|{
comment|// This can happen if the RM has been restarted. If it is in that state,
comment|// this application must clean itself up.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMContainerAllocationException
argument_list|(
literal|"Resource Manager doesn't recognize AttemptId: "
operator|+
name|this
operator|.
name|getContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ApplicationMaster is out of sync with ResourceManager,"
operator|+
literal|" hence resync and send outstanding requests."
argument_list|)
expr_stmt|;
comment|// RM may have restarted, re-register with RM.
name|lastResponseID
operator|=
literal|0
expr_stmt|;
name|register
argument_list|()
expr_stmt|;
name|addOutstandingRequestOnResync
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvalidLabelResourceRequestException
name|e
parameter_list|)
block|{
comment|// If Invalid label exception is received means the requested label doesnt
comment|// have access so killing job in this case.
name|String
name|diagMsg
init|=
literal|"Requested node-label-expression is invalid: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|diagMsg
argument_list|)
expr_stmt|;
name|JobId
name|jobId
init|=
name|this
operator|.
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|jobId
argument_list|,
name|diagMsg
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This can happen when the connection to the RM has gone down. Keep
comment|// re-trying until the retryInterval has expired.
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|retrystartTime
operator|>=
name|retryInterval
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not contact RM after "
operator|+
name|retryInterval
operator|+
literal|" milliseconds."
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMContainerAllocationException
argument_list|(
literal|"Could not contact RM after "
operator|+
name|retryInterval
operator|+
literal|" milliseconds."
argument_list|)
throw|;
block|}
comment|// Throw this up to the caller, which may decide to ignore it and
comment|// continue to attempt to contact the RM.
throw|throw
name|e
throw|;
block|}
name|Resource
name|newHeadRoom
init|=
name|getAvailableResources
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newContainers
init|=
name|response
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
comment|// Setting NMTokens
if|if
condition|(
name|response
operator|.
name|getNMTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NMToken
name|nmToken
range|:
name|response
operator|.
name|getNMTokens
argument_list|()
control|)
block|{
name|NMTokenCache
operator|.
name|setNMToken
argument_list|(
name|nmToken
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nmToken
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Setting AMRMToken
if|if
condition|(
name|response
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateAMRMToken
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|finishedContainers
init|=
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
decl_stmt|;
comment|// propagate preemption requests
specifier|final
name|PreemptionMessage
name|preemptReq
init|=
name|response
operator|.
name|getPreemptionMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|preemptReq
operator|!=
literal|null
condition|)
block|{
name|preemptionPolicy
operator|.
name|preempt
argument_list|(
operator|new
name|PreemptionContext
argument_list|(
name|assignedRequests
argument_list|)
argument_list|,
name|preemptReq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newContainers
operator|.
name|size
argument_list|()
operator|+
name|finishedContainers
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
operator|!
name|headRoom
operator|.
name|equals
argument_list|(
name|newHeadRoom
argument_list|)
condition|)
block|{
comment|//something changed
name|recalculateReduceSchedule
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|headRoom
operator|.
name|equals
argument_list|(
name|newHeadRoom
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"headroom="
operator|+
name|newHeadRoom
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Container
name|cont
range|:
name|newContainers
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received new Container :"
operator|+
name|cont
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Called on each allocation. Will know about newly blacklisted/added hosts.
name|computeIgnoreBlacklisting
argument_list|()
expr_stmt|;
name|handleUpdatedNodes
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|handleJobPriorityChange
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Handle receiving the timeline collector address and token for this app.
name|MRAppMaster
operator|.
name|RunningAppContext
name|appContext
init|=
operator|(
name|MRAppMaster
operator|.
name|RunningAppContext
operator|)
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|appContext
operator|.
name|getTimelineV2Client
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appContext
operator|.
name|getTimelineV2Client
argument_list|()
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|response
operator|.
name|getCollectorInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ContainerStatus
name|cont
range|:
name|finishedContainers
control|)
block|{
name|processFinishedContainer
argument_list|(
name|cont
argument_list|)
expr_stmt|;
block|}
return|return
name|newContainers
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|VisibleForTesting
DECL|method|processFinishedContainer (ContainerStatus container)
name|void
name|processFinishedContainer
parameter_list|(
name|ContainerStatus
name|container
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received completed container "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptID
init|=
name|assignedRequests
operator|.
name|get
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptID
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container complete event for unknown container "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pendingRelease
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|remove
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
comment|// Send the diagnostics
name|String
name|diagnostic
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|container
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptDiagnosticsUpdateEvent
argument_list|(
name|attemptID
argument_list|,
name|diagnostic
argument_list|)
argument_list|)
expr_stmt|;
comment|// send the container completed event to Task attempt
name|eventHandler
operator|.
name|handle
argument_list|(
name|createContainerFinishedEvent
argument_list|(
name|container
argument_list|,
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
name|preemptionPolicy
operator|.
name|handleCompletedContainer
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyConcurrentTaskLimits ()
specifier|private
name|void
name|applyConcurrentTaskLimits
parameter_list|()
block|{
name|int
name|numScheduledMaps
init|=
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRunningMaps
operator|>
literal|0
operator|&&
name|numScheduledMaps
operator|>
literal|0
operator|&&
name|getJob
argument_list|()
operator|.
name|getTotalMaps
argument_list|()
operator|>
name|maxRunningMaps
condition|)
block|{
name|int
name|maxRequestedMaps
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxRunningMaps
operator|-
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numScheduledFailMaps
init|=
name|scheduledRequests
operator|.
name|earlierFailedMaps
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|failedMapRequestLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxRequestedMaps
argument_list|,
name|numScheduledFailMaps
argument_list|)
decl_stmt|;
name|int
name|normalMapRequestLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxRequestedMaps
operator|-
name|failedMapRequestLimit
argument_list|,
name|numScheduledMaps
operator|-
name|numScheduledFailMaps
argument_list|)
decl_stmt|;
name|setRequestLimit
argument_list|(
name|PRIORITY_FAST_FAIL_MAP
argument_list|,
name|mapResourceRequest
argument_list|,
name|failedMapRequestLimit
argument_list|)
expr_stmt|;
name|setRequestLimit
argument_list|(
name|PRIORITY_MAP
argument_list|,
name|mapResourceRequest
argument_list|,
name|normalMapRequestLimit
argument_list|)
expr_stmt|;
name|setRequestLimit
argument_list|(
name|PRIORITY_OPPORTUNISTIC_MAP
argument_list|,
name|mapResourceRequest
argument_list|,
name|normalMapRequestLimit
argument_list|)
expr_stmt|;
block|}
name|int
name|numScheduledReduces
init|=
name|scheduledRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRunningReduces
operator|>
literal|0
operator|&&
name|numScheduledReduces
operator|>
literal|0
operator|&&
name|getJob
argument_list|()
operator|.
name|getTotalReduces
argument_list|()
operator|>
name|maxRunningReduces
condition|)
block|{
name|int
name|maxRequestedReduces
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxRunningReduces
operator|-
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|reduceRequestLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxRequestedReduces
argument_list|,
name|numScheduledReduces
argument_list|)
decl_stmt|;
name|setRequestLimit
argument_list|(
name|PRIORITY_REDUCE
argument_list|,
name|reduceResourceRequest
argument_list|,
name|reduceRequestLimit
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canAssignMaps ()
specifier|private
name|boolean
name|canAssignMaps
parameter_list|()
block|{
return|return
operator|(
name|maxRunningMaps
operator|<=
literal|0
operator|||
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|<
name|maxRunningMaps
operator|)
return|;
block|}
DECL|method|canAssignReduces ()
specifier|private
name|boolean
name|canAssignReduces
parameter_list|()
block|{
return|return
operator|(
name|maxRunningReduces
operator|<=
literal|0
operator|||
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
operator|<
name|maxRunningReduces
operator|)
return|;
block|}
DECL|method|updateAMRMToken (Token token)
specifier|private
name|void
name|updateAMRMToken
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUGI
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|currentUGI
operator|.
name|addToken
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
name|amrmToken
operator|.
name|setService
argument_list|(
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createContainerFinishedEvent (ContainerStatus cont, TaskAttemptId attemptID)
specifier|public
name|TaskAttemptEvent
name|createContainerFinishedEvent
parameter_list|(
name|ContainerStatus
name|cont
parameter_list|,
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
if|if
condition|(
name|cont
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|ABORTED
operator|||
name|cont
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|PREEMPTED
condition|)
block|{
comment|// killed by framework
return|return
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskAttemptEvent
argument_list|(
name|attemptID
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleUpdatedNodes (AllocateResponse response)
specifier|private
name|void
name|handleUpdatedNodes
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
comment|// send event to the job about on updated nodes
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodes
init|=
name|response
operator|.
name|getUpdatedNodes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updatedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// send event to the job to act upon completed tasks
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobUpdatedNodesEvent
argument_list|(
name|getJob
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|,
name|updatedNodes
argument_list|)
argument_list|)
expr_stmt|;
comment|// act upon running tasks
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|unusableNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeReport
name|nr
range|:
name|updatedNodes
control|)
block|{
name|NodeState
name|nodeState
init|=
name|nr
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeState
operator|.
name|isUnusable
argument_list|()
condition|)
block|{
name|unusableNodes
operator|.
name|add
argument_list|(
name|nr
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
name|taskSet
init|=
name|i
operator|==
literal|0
condition|?
name|assignedRequests
operator|.
name|maps
else|:
name|assignedRequests
operator|.
name|reduces
decl_stmt|;
comment|// kill running containers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
name|entry
range|:
name|taskSet
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TaskAttemptId
name|tid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeId
name|taskAttemptNodeId
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|unusableNodes
operator|.
name|contains
argument_list|(
name|taskAttemptNodeId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing taskAttempt:"
operator|+
name|tid
operator|+
literal|" because it is running on unusable node:"
operator|+
name|taskAttemptNodeId
argument_list|)
expr_stmt|;
comment|// If map, reschedule next task attempt.
name|boolean
name|rescheduleNextAttempt
init|=
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptKillEvent
argument_list|(
name|tid
argument_list|,
literal|"TaskAttempt killed because it ran on unusable node"
operator|+
name|taskAttemptNodeId
argument_list|,
name|rescheduleNextAttempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|handleJobPriorityChange (AllocateResponse response)
specifier|private
name|void
name|handleJobPriorityChange
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
name|Priority
name|priorityFromResponse
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|response
operator|.
name|getApplicationPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update the job priority to Job directly.
name|getJob
argument_list|()
operator|.
name|setJobPriority
argument_list|(
name|priorityFromResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|getResourceLimit ()
specifier|public
name|Resource
name|getResourceLimit
parameter_list|()
block|{
name|Resource
name|headRoom
init|=
name|getAvailableResources
argument_list|()
decl_stmt|;
name|Resource
name|assignedMapResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|mapResourceRequest
argument_list|,
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|assignedReduceResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|reduceResourceRequest
argument_list|,
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|add
argument_list|(
name|headRoom
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|assignedMapResource
argument_list|,
name|assignedReduceResource
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|class|ScheduledRequests
class|class
name|ScheduledRequests
block|{
DECL|field|earlierFailedMaps
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|earlierFailedMaps
init|=
operator|new
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Maps from a host to a list of Map tasks with data on the host */
DECL|field|mapsHostMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
name|mapsHostMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mapsRackMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
name|mapsRackMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|maps
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
name|maps
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mapsMod100
name|int
name|mapsMod100
init|=
literal|0
decl_stmt|;
DECL|field|numOpportunisticMapsPercent
name|int
name|numOpportunisticMapsPercent
init|=
literal|0
decl_stmt|;
DECL|method|setNumOpportunisticMapsPercent (int numMaps)
name|void
name|setNumOpportunisticMapsPercent
parameter_list|(
name|int
name|numMaps
parameter_list|)
block|{
name|this
operator|.
name|numOpportunisticMapsPercent
operator|=
name|numMaps
expr_stmt|;
block|}
DECL|method|getNumOpportunisticMapsPercent ()
name|int
name|getNumOpportunisticMapsPercent
parameter_list|()
block|{
return|return
name|this
operator|.
name|numOpportunisticMapsPercent
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|field|reduces
specifier|final
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
name|reduces
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|remove (TaskAttemptId tId)
name|boolean
name|remove
parameter_list|(
name|TaskAttemptId
name|tId
parameter_list|)
block|{
name|ContainerRequest
name|req
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|req
operator|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|req
operator|=
name|reduces
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|decContainerReq
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|removeReduce ()
name|ContainerRequest
name|removeReduce
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
argument_list|>
name|it
init|=
name|reduces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|ContainerRequest
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|decContainerReq
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|addMap (ContainerRequestEvent event)
name|void
name|addMap
parameter_list|(
name|ContainerRequestEvent
name|event
parameter_list|)
block|{
name|ContainerRequest
name|request
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getEarlierAttemptFailed
argument_list|()
condition|)
block|{
name|earlierFailedMaps
operator|.
name|add
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|ContainerRequest
argument_list|(
name|event
argument_list|,
name|PRIORITY_FAST_FAIL_MAP
argument_list|,
name|mapNodeLabelExpression
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|event
operator|.
name|getAttemptID
argument_list|()
operator|+
literal|" to list of failed maps"
argument_list|)
expr_stmt|;
comment|// If its an earlier Failed attempt, do not retry as OPPORTUNISTIC
name|maps
operator|.
name|put
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|addContainerReq
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mapsMod100
operator|<
name|numOpportunisticMapsPercent
condition|)
block|{
name|request
operator|=
operator|new
name|ContainerRequest
argument_list|(
name|event
argument_list|,
name|PRIORITY_OPPORTUNISTIC_MAP
argument_list|,
name|mapNodeLabelExpression
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|addOpportunisticResourceRequest
argument_list|(
name|request
operator|.
name|priority
argument_list|,
name|request
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|=
operator|new
name|ContainerRequest
argument_list|(
name|event
argument_list|,
name|PRIORITY_MAP
argument_list|,
name|mapNodeLabelExpression
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|event
operator|.
name|getHosts
argument_list|()
control|)
block|{
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|list
init|=
name|mapsHostMapping
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
expr_stmt|;
name|mapsHostMapping
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added attempt req to host "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|rack
range|:
name|event
operator|.
name|getRacks
argument_list|()
control|)
block|{
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|list
init|=
name|mapsRackMapping
operator|.
name|get
argument_list|(
name|rack
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
expr_stmt|;
name|mapsRackMapping
operator|.
name|put
argument_list|(
name|rack
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added attempt req to rack "
operator|+
name|rack
argument_list|)
expr_stmt|;
block|}
block|}
name|maps
operator|.
name|put
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|addContainerReq
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|mapsMod100
operator|++
expr_stmt|;
name|mapsMod100
operator|%=
literal|100
expr_stmt|;
block|}
block|}
DECL|method|addReduce (ContainerRequest req)
name|void
name|addReduce
parameter_list|(
name|ContainerRequest
name|req
parameter_list|)
block|{
name|reduces
operator|.
name|put
argument_list|(
name|req
operator|.
name|attemptID
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|addContainerReq
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
comment|// this method will change the list of allocatedContainers.
DECL|method|assign (List<Container> allocatedContainers)
specifier|private
name|void
name|assign
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Container
argument_list|>
name|it
init|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got allocated containers "
operator|+
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containersAllocated
operator|+=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|reducePending
init|=
name|reduces
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning container "
operator|+
name|allocated
operator|.
name|getId
argument_list|()
operator|+
literal|" with priority "
operator|+
name|allocated
operator|.
name|getPriority
argument_list|()
operator|+
literal|" to NM "
operator|+
name|allocated
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check if allocated container meets memory requirements
comment|// and whether we have any scheduled tasks that need
comment|// a container to be assigned
name|boolean
name|isAssignable
init|=
literal|true
decl_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|Resource
name|allocatedResource
init|=
name|allocated
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|PRIORITY_FAST_FAIL_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
if|if
condition|(
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|allocatedResource
argument_list|,
name|mapResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
operator|<=
literal|0
operator|||
name|maps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot assign container "
operator|+
name|allocated
operator|+
literal|" for a map as either "
operator|+
literal|" container memory less than required "
operator|+
name|mapResourceRequest
operator|+
literal|" or no pending map tasks - maps.isEmpty="
operator|+
name|maps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|isAssignable
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|PRIORITY_REDUCE
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
if|if
condition|(
name|ResourceCalculatorUtils
operator|.
name|computeAvailableContainers
argument_list|(
name|allocatedResource
argument_list|,
name|reduceResourceRequest
argument_list|,
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
operator|<=
literal|0
operator|||
operator|(
name|reducePending
operator|<=
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot assign container "
operator|+
name|allocated
operator|+
literal|" for a reduce as either "
operator|+
literal|" container memory less than required "
operator|+
name|reduceResourceRequest
operator|+
literal|" or no pending reduce tasks."
argument_list|)
expr_stmt|;
name|isAssignable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|reducePending
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container allocated at unwanted priority: "
operator|+
name|priority
operator|+
literal|". Returning to RM..."
argument_list|)
expr_stmt|;
name|isAssignable
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAssignable
condition|)
block|{
comment|// release container if we could not assign it
name|containerNotAssigned
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// do not assign if allocated container is on a
comment|// blacklisted host
name|String
name|allocatedHost
init|=
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNodeBlacklisted
argument_list|(
name|allocatedHost
argument_list|)
condition|)
block|{
comment|// we need to request for a new container
comment|// and release the current one
name|LOG
operator|.
name|info
argument_list|(
literal|"Got allocated container on a blacklisted "
operator|+
literal|" host "
operator|+
name|allocatedHost
operator|+
literal|". Releasing container "
operator|+
name|allocated
argument_list|)
expr_stmt|;
comment|// find the request matching this allocated container
comment|// and replace it with a new one
name|ContainerRequest
name|toBeReplacedReq
init|=
name|getContainerReqToReplace
argument_list|(
name|allocated
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBeReplacedReq
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Placing a new container request for task attempt "
operator|+
name|toBeReplacedReq
operator|.
name|attemptID
argument_list|)
expr_stmt|;
name|ContainerRequest
name|newReq
init|=
name|getFilteredContainerRequest
argument_list|(
name|toBeReplacedReq
argument_list|)
decl_stmt|;
name|decContainerReq
argument_list|(
name|toBeReplacedReq
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBeReplacedReq
operator|.
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|maps
operator|.
name|put
argument_list|(
name|newReq
operator|.
name|attemptID
argument_list|,
name|newReq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|.
name|put
argument_list|(
name|newReq
operator|.
name|attemptID
argument_list|,
name|newReq
argument_list|)
expr_stmt|;
block|}
name|addContainerReq
argument_list|(
name|newReq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not map allocated container to a valid request."
operator|+
literal|" Releasing allocated container "
operator|+
name|allocated
argument_list|)
expr_stmt|;
block|}
comment|// release container if we could not assign it
name|containerNotAssigned
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|assignContainers
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
comment|// release container if we could not assign it
name|it
operator|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Releasing unassigned container "
operator|+
name|allocated
argument_list|)
expr_stmt|;
name|containerNotAssigned
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|containerAssigned (Container allocated, ContainerRequest assigned)
specifier|private
name|void
name|containerAssigned
parameter_list|(
name|Container
name|allocated
parameter_list|,
name|ContainerRequest
name|assigned
parameter_list|)
block|{
comment|// Update resource requests
name|decContainerReq
argument_list|(
name|assigned
argument_list|)
expr_stmt|;
comment|// send the container-assigned event to task attempt
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptContainerAssignedEvent
argument_list|(
name|assigned
operator|.
name|attemptID
argument_list|,
name|allocated
argument_list|,
name|applicationACLs
argument_list|)
argument_list|)
expr_stmt|;
name|assignedRequests
operator|.
name|add
argument_list|(
name|allocated
argument_list|,
name|assigned
operator|.
name|attemptID
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned container ("
operator|+
name|allocated
operator|+
literal|") "
operator|+
literal|" to task "
operator|+
name|assigned
operator|.
name|attemptID
operator|+
literal|" on node "
operator|+
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|containerNotAssigned (Container allocated)
specifier|private
name|void
name|containerNotAssigned
parameter_list|(
name|Container
name|allocated
parameter_list|)
block|{
name|containersReleased
operator|++
expr_stmt|;
name|pendingRelease
operator|.
name|add
argument_list|(
name|allocated
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|release
argument_list|(
name|allocated
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assignWithoutLocality (Container allocated)
specifier|private
name|ContainerRequest
name|assignWithoutLocality
parameter_list|(
name|Container
name|allocated
parameter_list|)
block|{
name|ContainerRequest
name|assigned
init|=
literal|null
decl_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|PRIORITY_FAST_FAIL_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Assigning container "
operator|+
name|allocated
operator|+
literal|" to fast fail map"
argument_list|)
expr_stmt|;
name|assigned
operator|=
name|assignToFailedMap
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PRIORITY_REDUCE
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning container "
operator|+
name|allocated
operator|+
literal|" to reduce"
argument_list|)
expr_stmt|;
block|}
name|assigned
operator|=
name|assignToReduce
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
block|}
return|return
name|assigned
return|;
block|}
DECL|method|assignContainers (List<Container> allocatedContainers)
specifier|private
name|void
name|assignContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Container
argument_list|>
name|it
init|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerRequest
name|assigned
init|=
name|assignWithoutLocality
argument_list|(
name|allocated
argument_list|)
decl_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
condition|)
block|{
name|containerAssigned
argument_list|(
name|allocated
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assignMapsWithLocality
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerReqToReplace (Container allocated)
specifier|private
name|ContainerRequest
name|getContainerReqToReplace
parameter_list|(
name|Container
name|allocated
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finding containerReq for allocated container: "
operator|+
name|allocated
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ContainerRequest
name|toBeReplaced
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|PRIORITY_FAST_FAIL_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replacing FAST_FAIL_MAP container "
operator|+
name|allocated
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttemptId
argument_list|>
name|iter
init|=
name|earlierFailedMaps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|toBeReplaced
operator|==
literal|null
operator|&&
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|toBeReplaced
operator|=
name|maps
operator|.
name|get
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found replacement: "
operator|+
name|toBeReplaced
argument_list|)
expr_stmt|;
return|return
name|toBeReplaced
return|;
block|}
elseif|else
if|if
condition|(
name|PRIORITY_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replacing MAP container "
operator|+
name|allocated
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// allocated container was for a map
name|String
name|host
init|=
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|list
init|=
name|mapsHostMapping
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TaskAttemptId
name|tId
init|=
name|list
operator|.
name|removeLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|containsKey
argument_list|(
name|tId
argument_list|)
condition|)
block|{
name|toBeReplaced
operator|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TaskAttemptId
name|tId
init|=
name|maps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|toBeReplaced
operator|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|PRIORITY_REDUCE
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
name|TaskAttemptId
name|tId
init|=
name|reduces
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|toBeReplaced
operator|=
name|reduces
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found replacement: "
operator|+
name|toBeReplaced
argument_list|)
expr_stmt|;
return|return
name|toBeReplaced
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|assignToFailedMap (Container allocated)
specifier|private
name|ContainerRequest
name|assignToFailedMap
parameter_list|(
name|Container
name|allocated
parameter_list|)
block|{
comment|//try to assign to earlierFailedMaps if present
name|ContainerRequest
name|assigned
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|assigned
operator|==
literal|null
operator|&&
name|earlierFailedMaps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|canAssignMaps
argument_list|()
condition|)
block|{
name|TaskAttemptId
name|tId
init|=
name|earlierFailedMaps
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|containsKey
argument_list|(
name|tId
argument_list|)
condition|)
block|{
name|assigned
operator|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|assigned
operator|.
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Assigned from earlierFailedMaps"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|assigned
return|;
block|}
DECL|method|assignToReduce (Container allocated)
specifier|private
name|ContainerRequest
name|assignToReduce
parameter_list|(
name|Container
name|allocated
parameter_list|)
block|{
name|ContainerRequest
name|assigned
init|=
literal|null
decl_stmt|;
comment|//try to assign to reduces if present
if|if
condition|(
name|assigned
operator|==
literal|null
operator|&&
name|reduces
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|canAssignReduces
argument_list|()
condition|)
block|{
name|TaskAttemptId
name|tId
init|=
name|reduces
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assigned
operator|=
name|reduces
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Assigned to reduce"
argument_list|)
expr_stmt|;
block|}
return|return
name|assigned
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|assignMapsWithLocality (List<Container> allocatedContainers)
specifier|private
name|void
name|assignMapsWithLocality
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
comment|// try to assign to all nodes first to match node local
name|Iterator
argument_list|<
name|Container
argument_list|>
name|it
init|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|canAssignMaps
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|PRIORITY_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|)
assert|;
if|if
condition|(
operator|!
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
comment|// "if (maps.containsKey(tId))" below should be almost always true.
comment|// hence this while loop would almost always have O(1) complexity
name|String
name|host
init|=
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|list
init|=
name|mapsHostMapping
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Host matched to the request list "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptId
name|tId
init|=
name|list
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|containsKey
argument_list|(
name|tId
argument_list|)
condition|)
block|{
name|ContainerRequest
name|assigned
init|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
decl_stmt|;
name|containerAssigned
argument_list|(
name|allocated
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|assigned
operator|.
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|DATA_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|hostLocalAssigned
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned based on host match "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
comment|// try to match all rack local
name|it
operator|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|canAssignMaps
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|PRIORITY_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|)
assert|;
if|if
condition|(
operator|!
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
condition|)
block|{
comment|// "if (maps.containsKey(tId))" below should be almost always true.
comment|// hence this while loop would almost always have O(1) complexity
name|String
name|host
init|=
name|allocated
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|rack
init|=
name|RackResolver
operator|.
name|resolve
argument_list|(
name|host
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|TaskAttemptId
argument_list|>
name|list
init|=
name|mapsRackMapping
operator|.
name|get
argument_list|(
name|rack
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TaskAttemptId
name|tId
init|=
name|list
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|containsKey
argument_list|(
name|tId
argument_list|)
condition|)
block|{
name|ContainerRequest
name|assigned
init|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
decl_stmt|;
name|containerAssigned
argument_list|(
name|allocated
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|assigned
operator|.
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|RACK_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|rackLocalAssigned
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned based on rack match "
operator|+
name|rack
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
comment|// assign remaining
name|it
operator|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|canAssignMaps
argument_list|()
condition|)
block|{
name|Container
name|allocated
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Priority
name|priority
init|=
name|allocated
operator|.
name|getPriority
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|PRIORITY_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|||
name|PRIORITY_OPPORTUNISTIC_MAP
operator|.
name|equals
argument_list|(
name|priority
argument_list|)
operator|)
assert|;
name|TaskAttemptId
name|tId
init|=
name|maps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerRequest
name|assigned
init|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
decl_stmt|;
name|containerAssigned
argument_list|(
name|allocated
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|assigned
operator|.
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|OTHER_LOCAL_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigned based on * match"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|class|AssignedRequests
class|class
name|AssignedRequests
block|{
DECL|field|containerToAttemptMap
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|TaskAttemptId
argument_list|>
name|containerToAttemptMap
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|TaskAttemptId
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|maps
specifier|final
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
name|maps
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|reduces
specifier|final
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
name|reduces
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Container
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|preemptionWaitingReduces
specifier|final
name|Set
argument_list|<
name|TaskAttemptId
argument_list|>
name|preemptionWaitingReduces
init|=
operator|new
name|HashSet
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|add (Container container, TaskAttemptId tId)
name|void
name|add
parameter_list|(
name|Container
name|container
parameter_list|,
name|TaskAttemptId
name|tId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Assigned container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|tId
argument_list|)
expr_stmt|;
name|containerToAttemptMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|tId
argument_list|)
expr_stmt|;
if|if
condition|(
name|tId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|maps
operator|.
name|put
argument_list|(
name|tId
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|.
name|put
argument_list|(
name|tId
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|preemptReduce (int toPreempt)
name|void
name|preemptReduce
parameter_list|(
name|int
name|toPreempt
parameter_list|)
block|{
name|List
argument_list|<
name|TaskAttemptId
argument_list|>
name|reduceList
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|(
name|reduces
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|//sort reduces on progress
name|Collections
operator|.
name|sort
argument_list|(
name|reduceList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TaskAttemptId
name|o1
parameter_list|,
name|TaskAttemptId
name|o2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|getJob
argument_list|()
operator|.
name|getTask
argument_list|(
name|o1
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|o1
argument_list|)
operator|.
name|getProgress
argument_list|()
argument_list|,
name|getJob
argument_list|()
operator|.
name|getTask
argument_list|(
name|o2
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|o2
argument_list|)
operator|.
name|getProgress
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|toPreempt
operator|&&
name|reduceList
operator|.
name|size
operator|(
operator|)
argument_list|>
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptId
name|id
init|=
name|reduceList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//remove the one on top
name|LOG
operator|.
name|info
argument_list|(
literal|"Preempting "
operator|+
name|id
argument_list|)
expr_stmt|;
name|preemptionWaitingReduces
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptKillEvent
argument_list|(
name|id
argument_list|,
name|RAMPDOWN_DIAGNOSTIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|remove (TaskAttemptId tId)
name|boolean
name|remove
parameter_list|(
name|TaskAttemptId
name|tId
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|containerId
operator|=
name|maps
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|containerId
operator|=
name|reduces
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|boolean
name|preempted
init|=
name|preemptionWaitingReduces
operator|.
name|remove
argument_list|(
name|tId
argument_list|)
decl_stmt|;
if|if
condition|(
name|preempted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reduce preemption successful "
operator|+
name|tId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|containerToAttemptMap
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|get (ContainerId cId)
name|TaskAttemptId
name|get
parameter_list|(
name|ContainerId
name|cId
parameter_list|)
block|{
return|return
name|containerToAttemptMap
operator|.
name|get
argument_list|(
name|cId
argument_list|)
return|;
block|}
DECL|method|get (TaskAttemptId tId)
name|ContainerId
name|get
parameter_list|(
name|TaskAttemptId
name|tId
parameter_list|)
block|{
name|Container
name|taskContainer
decl_stmt|;
if|if
condition|(
name|tId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|taskContainer
operator|=
name|maps
operator|.
name|get
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskContainer
operator|=
name|reduces
operator|.
name|get
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskContainer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|taskContainer
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|ScheduleStats
specifier|private
class|class
name|ScheduleStats
block|{
DECL|field|numPendingReduces
name|int
name|numPendingReduces
decl_stmt|;
DECL|field|numScheduledMaps
name|int
name|numScheduledMaps
decl_stmt|;
DECL|field|numScheduledReduces
name|int
name|numScheduledReduces
decl_stmt|;
DECL|field|numAssignedMaps
name|int
name|numAssignedMaps
decl_stmt|;
DECL|field|numAssignedReduces
name|int
name|numAssignedReduces
decl_stmt|;
DECL|field|numCompletedMaps
name|int
name|numCompletedMaps
decl_stmt|;
DECL|field|numCompletedReduces
name|int
name|numCompletedReduces
decl_stmt|;
DECL|field|numContainersAllocated
name|int
name|numContainersAllocated
decl_stmt|;
DECL|field|numContainersReleased
name|int
name|numContainersReleased
decl_stmt|;
DECL|method|updateAndLogIfChanged (String msgPrefix)
specifier|public
name|void
name|updateAndLogIfChanged
parameter_list|(
name|String
name|msgPrefix
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
comment|// synchronized to fix findbug warnings
synchronized|synchronized
init|(
name|RMContainerAllocator
operator|.
name|this
init|)
block|{
name|changed
operator||=
operator|(
name|numPendingReduces
operator|!=
name|pendingReduces
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|numPendingReduces
operator|=
name|pendingReduces
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numScheduledMaps
operator|!=
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|numScheduledMaps
operator|=
name|scheduledRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numScheduledReduces
operator|!=
name|scheduledRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|numScheduledReduces
operator|=
name|scheduledRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numAssignedMaps
operator|!=
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|numAssignedMaps
operator|=
name|assignedRequests
operator|.
name|maps
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numAssignedReduces
operator|!=
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|numAssignedReduces
operator|=
name|assignedRequests
operator|.
name|reduces
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numCompletedMaps
operator|!=
name|getJob
argument_list|()
operator|.
name|getCompletedMaps
argument_list|()
operator|)
expr_stmt|;
name|numCompletedMaps
operator|=
name|getJob
argument_list|()
operator|.
name|getCompletedMaps
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numCompletedReduces
operator|!=
name|getJob
argument_list|()
operator|.
name|getCompletedReduces
argument_list|()
operator|)
expr_stmt|;
name|numCompletedReduces
operator|=
name|getJob
argument_list|()
operator|.
name|getCompletedReduces
argument_list|()
expr_stmt|;
name|changed
operator||=
operator|(
name|numContainersAllocated
operator|!=
name|containersAllocated
operator|)
expr_stmt|;
name|numContainersAllocated
operator|=
name|containersAllocated
expr_stmt|;
name|changed
operator||=
operator|(
name|numContainersReleased
operator|!=
name|containersReleased
operator|)
expr_stmt|;
name|numContainersReleased
operator|=
name|containersReleased
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|log
argument_list|(
name|msgPrefix
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|log (String msgPrefix)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|msgPrefix
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msgPrefix
operator|+
literal|"PendingReds:"
operator|+
name|numPendingReduces
operator|+
literal|" ScheduledMaps:"
operator|+
name|numScheduledMaps
operator|+
literal|" ScheduledReds:"
operator|+
name|numScheduledReduces
operator|+
literal|" AssignedMaps:"
operator|+
name|numAssignedMaps
operator|+
literal|" AssignedReds:"
operator|+
name|numAssignedReduces
operator|+
literal|" CompletedMaps:"
operator|+
name|numCompletedMaps
operator|+
literal|" CompletedReds:"
operator|+
name|numCompletedReduces
operator|+
literal|" ContAlloc:"
operator|+
name|numContainersAllocated
operator|+
literal|" ContRel:"
operator|+
name|numContainersReleased
operator|+
literal|" HostLocal:"
operator|+
name|hostLocalAssigned
operator|+
literal|" RackLocal:"
operator|+
name|rackLocalAssigned
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PreemptionContext
specifier|static
class|class
name|PreemptionContext
extends|extends
name|AMPreemptionPolicy
operator|.
name|Context
block|{
DECL|field|reqs
specifier|final
name|AssignedRequests
name|reqs
decl_stmt|;
DECL|method|PreemptionContext (AssignedRequests reqs)
name|PreemptionContext
parameter_list|(
name|AssignedRequests
name|reqs
parameter_list|)
block|{
name|this
operator|.
name|reqs
operator|=
name|reqs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttempt (ContainerId container)
specifier|public
name|TaskAttemptId
name|getTaskAttempt
parameter_list|(
name|ContainerId
name|container
parameter_list|)
block|{
return|return
name|reqs
operator|.
name|get
argument_list|(
name|container
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers (TaskType t)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getContainers
parameter_list|(
name|TaskType
name|t
parameter_list|)
block|{
if|if
condition|(
name|TaskType
operator|.
name|REDUCE
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|reqs
operator|.
name|reduces
operator|.
name|values
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|reqs
operator|.
name|maps
operator|.
name|values
argument_list|()
argument_list|)
return|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

