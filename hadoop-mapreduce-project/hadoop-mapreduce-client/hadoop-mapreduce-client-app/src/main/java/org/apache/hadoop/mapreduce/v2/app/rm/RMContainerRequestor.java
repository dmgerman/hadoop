begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.rm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_comment
comment|/**  * Keeps the data structures to send container requests to RM.  */
end_comment

begin_class
DECL|class|RMContainerRequestor
specifier|public
specifier|abstract
class|class
name|RMContainerRequestor
extends|extends
name|RMCommunicator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMContainerRequestor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lastResponseID
specifier|private
name|int
name|lastResponseID
decl_stmt|;
DECL|field|availableResources
specifier|private
name|Resource
name|availableResources
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|//Key -> Priority
comment|//Value -> Map
comment|//Key->ResourceName (e.g., hostname, rackname, *)
comment|//Value->Map
comment|//Key->Resource Capability
comment|//Value->ResourceRequest
specifier|private
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
argument_list|>
DECL|field|remoteRequestsTable
name|remoteRequestsTable
init|=
operator|new
name|TreeMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// use custom comparator to make sure ResourceRequest objects differing only in
comment|// numContainers dont end up as duplicates
DECL|field|ask
specifier|private
specifier|final
name|Set
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|TreeSet
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
operator|.
name|ResourceRequestComparator
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|release
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodeBlacklistingEnabled
specifier|private
name|boolean
name|nodeBlacklistingEnabled
decl_stmt|;
DECL|field|blacklistDisablePercent
specifier|private
name|int
name|blacklistDisablePercent
decl_stmt|;
DECL|field|ignoreBlacklisting
specifier|private
name|AtomicBoolean
name|ignoreBlacklisting
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|blacklistedNodeCount
specifier|private
name|int
name|blacklistedNodeCount
init|=
literal|0
decl_stmt|;
DECL|field|lastClusterNmCount
specifier|private
name|int
name|lastClusterNmCount
init|=
literal|0
decl_stmt|;
DECL|field|clusterNmCount
specifier|private
name|int
name|clusterNmCount
init|=
literal|0
decl_stmt|;
DECL|field|maxTaskFailuresPerNode
specifier|private
name|int
name|maxTaskFailuresPerNode
decl_stmt|;
DECL|field|nodeFailures
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nodeFailures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blacklistedNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistedNodes
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|RMContainerRequestor (ClientService clientService, AppContext context)
specifier|public
name|RMContainerRequestor
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerRequest
specifier|static
class|class
name|ContainerRequest
block|{
DECL|field|attemptID
specifier|final
name|TaskAttemptId
name|attemptID
decl_stmt|;
DECL|field|capability
specifier|final
name|Resource
name|capability
decl_stmt|;
DECL|field|hosts
specifier|final
name|String
index|[]
name|hosts
decl_stmt|;
DECL|field|racks
specifier|final
name|String
index|[]
name|racks
decl_stmt|;
comment|//final boolean earlierAttemptFailed;
DECL|field|priority
specifier|final
name|Priority
name|priority
decl_stmt|;
DECL|method|ContainerRequest (ContainerRequestEvent event, Priority priority)
specifier|public
name|ContainerRequest
parameter_list|(
name|ContainerRequestEvent
name|event
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|this
argument_list|(
name|event
operator|.
name|getAttemptID
argument_list|()
argument_list|,
name|event
operator|.
name|getCapability
argument_list|()
argument_list|,
name|event
operator|.
name|getHosts
argument_list|()
argument_list|,
name|event
operator|.
name|getRacks
argument_list|()
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
DECL|method|ContainerRequest (TaskAttemptId attemptID, Resource capability, String[] hosts, String[] racks, Priority priority)
specifier|public
name|ContainerRequest
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|attemptID
operator|=
name|attemptID
expr_stmt|;
name|this
operator|.
name|capability
operator|=
name|capability
expr_stmt|;
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
name|this
operator|.
name|racks
operator|=
name|racks
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"AttemptId["
argument_list|)
operator|.
name|append
argument_list|(
name|attemptID
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Capability["
argument_list|)
operator|.
name|append
argument_list|(
name|capability
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Priority["
argument_list|)
operator|.
name|append
argument_list|(
name|priority
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeBlacklistingEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_NODE_BLACKLISTING_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nodeBlacklistingEnabled:"
operator|+
name|nodeBlacklistingEnabled
argument_list|)
expr_stmt|;
name|maxTaskFailuresPerNode
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|blacklistDisablePercent
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERCENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"maxTaskFailuresPerNode is "
operator|+
name|maxTaskFailuresPerNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|blacklistDisablePercent
argument_list|<
operator|-
literal|1
operator|||
name|blacklistDisablePercent
argument_list|>
literal|100
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid blacklistDisablePercent: "
operator|+
name|blacklistDisablePercent
operator|+
literal|". Should be an integer between 0 and 100 or -1 to disabled"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"blacklistDisablePercent is "
operator|+
name|blacklistDisablePercent
argument_list|)
expr_stmt|;
block|}
DECL|method|makeRemoteRequest ()
specifier|protected
name|AllocateResponse
name|makeRemoteRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|AllocateRequest
name|allocateRequest
init|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
name|applicationAttemptId
argument_list|,
name|lastResponseID
argument_list|,
name|super
operator|.
name|getApplicationProgress
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
name|ask
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|release
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocateResponse
name|allocateResponse
decl_stmt|;
try|try
block|{
name|allocateResponse
operator|=
name|scheduler
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|lastResponseID
operator|=
name|allocateResponse
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|availableResources
operator|=
name|allocateResponse
operator|.
name|getAvailableResources
argument_list|()
expr_stmt|;
name|lastClusterNmCount
operator|=
name|clusterNmCount
expr_stmt|;
name|clusterNmCount
operator|=
name|allocateResponse
operator|.
name|getNumClusterNodes
argument_list|()
expr_stmt|;
if|if
condition|(
name|ask
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|release
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getResources() for "
operator|+
name|applicationId
operator|+
literal|":"
operator|+
literal|" ask="
operator|+
name|ask
operator|.
name|size
argument_list|()
operator|+
literal|" release= "
operator|+
name|release
operator|.
name|size
argument_list|()
operator|+
literal|" newContainers="
operator|+
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" finishedContainers="
operator|+
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" resourcelimit="
operator|+
name|availableResources
operator|+
literal|" knownNMs="
operator|+
name|clusterNmCount
argument_list|)
expr_stmt|;
block|}
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|release
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
comment|// May be incorrect if there's multiple NodeManagers running on a single host.
comment|// knownNodeCount is based on node managers, not hosts. blacklisting is
comment|// currently based on hosts.
DECL|method|computeIgnoreBlacklisting ()
specifier|protected
name|void
name|computeIgnoreBlacklisting
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nodeBlacklistingEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|blacklistDisablePercent
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|blacklistedNodeCount
operator|!=
name|blacklistedNodes
operator|.
name|size
argument_list|()
operator|||
name|clusterNmCount
operator|!=
name|lastClusterNmCount
operator|)
condition|)
block|{
name|blacklistedNodeCount
operator|=
name|blacklistedNodes
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterNmCount
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"KnownNode Count at 0. Not computing ignoreBlacklisting"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|val
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|float
operator|)
name|blacklistedNodes
operator|.
name|size
argument_list|()
operator|/
name|clusterNmCount
operator|*
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
name|blacklistDisablePercent
condition|)
block|{
if|if
condition|(
name|ignoreBlacklisting
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignore blacklisting set to true. Known: "
operator|+
name|clusterNmCount
operator|+
literal|", Blacklisted: "
operator|+
name|blacklistedNodeCount
operator|+
literal|", "
operator|+
name|val
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ignoreBlacklisting
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignore blacklisting set to false. Known: "
operator|+
name|clusterNmCount
operator|+
literal|", Blacklisted: "
operator|+
name|blacklistedNodeCount
operator|+
literal|", "
operator|+
name|val
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|containerFailedOnHost (String hostName)
specifier|protected
name|void
name|containerFailedOnHost
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nodeBlacklistingEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|blacklistedNodes
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Host "
operator|+
name|hostName
operator|+
literal|" is already blacklisted."
argument_list|)
expr_stmt|;
block|}
return|return;
comment|//already blacklisted
block|}
name|Integer
name|failures
init|=
name|nodeFailures
operator|.
name|remove
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|failures
operator|=
name|failures
operator|==
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|failures
expr_stmt|;
name|failures
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|failures
operator|+
literal|" failures on node "
operator|+
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|failures
operator|>=
name|maxTaskFailuresPerNode
condition|)
block|{
name|blacklistedNodes
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
comment|//Even if blacklisting is ignored, continue to remove the host from
comment|// the request table. The RM may have additional nodes it can allocate on.
name|LOG
operator|.
name|info
argument_list|(
literal|"Blacklisted host "
operator|+
name|hostName
argument_list|)
expr_stmt|;
comment|//remove all the requests corresponding to this hostname
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|remoteRequests
range|:
name|remoteRequestsTable
operator|.
name|values
argument_list|()
control|)
block|{
comment|//remove from host if no pending allocations
name|boolean
name|foundAll
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ResourceRequest
name|req
range|:
name|reqMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ask
operator|.
name|remove
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|foundAll
operator|=
literal|false
expr_stmt|;
comment|// if ask already sent to RM, we can try and overwrite it if possible.
comment|// send a new ask to RM with numContainers
comment|// specified for the blacklisted host to be 0.
name|ResourceRequest
name|zeroedRequest
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|)
decl_stmt|;
name|zeroedRequest
operator|.
name|setNumContainers
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// to be sent to RM on next heartbeat
name|addResourceRequestToAsk
argument_list|(
name|zeroedRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if all requests were still in ask queue
comment|// we can remove this request
if|if
condition|(
name|foundAll
condition|)
block|{
name|remoteRequests
operator|.
name|remove
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO handling of rack blacklisting
comment|// Removing from rack should be dependent on no. of failures within the rack
comment|// Blacklisting a rack on the basis of a single node's blacklisting
comment|// may be overly aggressive.
comment|// Node failures could be co-related with other failures on the same rack
comment|// but we probably need a better approach at trying to decide how and when
comment|// to blacklist a rack
block|}
block|}
else|else
block|{
name|nodeFailures
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAvailableResources ()
specifier|protected
name|Resource
name|getAvailableResources
parameter_list|()
block|{
return|return
name|availableResources
return|;
block|}
DECL|method|addContainerReq (ContainerRequest req)
specifier|protected
name|void
name|addContainerReq
parameter_list|(
name|ContainerRequest
name|req
parameter_list|)
block|{
comment|// Create resource requests
for|for
control|(
name|String
name|host
range|:
name|req
operator|.
name|hosts
control|)
block|{
comment|// Data-local
if|if
condition|(
operator|!
name|isNodeBlacklisted
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|addResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|host
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Nothing Rack-local for now
for|for
control|(
name|String
name|rack
range|:
name|req
operator|.
name|racks
control|)
block|{
name|addResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|rack
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
comment|// Off-switch
name|addResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
DECL|method|decContainerReq (ContainerRequest req)
specifier|protected
name|void
name|decContainerReq
parameter_list|(
name|ContainerRequest
name|req
parameter_list|)
block|{
comment|// Update resource requests
for|for
control|(
name|String
name|hostName
range|:
name|req
operator|.
name|hosts
control|)
block|{
name|decResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|hostName
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|rack
range|:
name|req
operator|.
name|racks
control|)
block|{
name|decResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|rack
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
name|decResourceRequest
argument_list|(
name|req
operator|.
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|req
operator|.
name|capability
argument_list|)
expr_stmt|;
block|}
DECL|method|addResourceRequest (Priority priority, String resourceName, Resource capability)
specifier|private
name|void
name|addResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequests
operator|==
literal|null
condition|)
block|{
name|remoteRequests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteRequestsTable
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|remoteRequests
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added priority="
operator|+
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
name|reqMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|()
expr_stmt|;
name|remoteRequests
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|reqMap
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|remoteRequest
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequest
operator|==
literal|null
condition|)
block|{
name|remoteRequest
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|setResourceName
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reqMap
operator|.
name|put
argument_list|(
name|capability
argument_list|,
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Note this down for next interaction with ResourceManager
name|addResourceRequestToAsk
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addResourceRequest:"
operator|+
literal|" applicationId="
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decResourceRequest (Priority priority, String resourceName, Resource capability)
specifier|private
name|void
name|decResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
comment|// as we modify the resource requests by filtering out blacklisted hosts
comment|// when they are added, this value may be null when being
comment|// decremented
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not decrementing resource as "
operator|+
name|resourceName
operator|+
literal|" is not present in request table"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|ResourceRequest
name|remoteRequest
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BEFORE decResourceRequest:"
operator|+
literal|" applicationId="
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// based on blacklisting comments above we can end up decrementing more
comment|// than requested. so guard for that.
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|reqMap
operator|.
name|remove
argument_list|(
name|capability
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|remoteRequests
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteRequests
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|remoteRequestsTable
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
comment|// send the updated resource request to RM
comment|// send 0 container count requests also to cancel previous requests
name|addResourceRequestToAsk
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AFTER decResourceRequest:"
operator|+
literal|" applicationId="
operator|+
name|applicationId
operator|.
name|getId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addResourceRequestToAsk (ResourceRequest remoteRequest)
specifier|private
name|void
name|addResourceRequestToAsk
parameter_list|(
name|ResourceRequest
name|remoteRequest
parameter_list|)
block|{
comment|// because objects inside the resource map can be deleted ask can end up
comment|// containing an object that matches new resource object but with different
comment|// numContainers. So exisintg values must be replaced explicitly
if|if
condition|(
name|ask
operator|.
name|contains
argument_list|(
name|remoteRequest
argument_list|)
condition|)
block|{
name|ask
operator|.
name|remove
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
name|ask
operator|.
name|add
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|release (ContainerId containerId)
specifier|protected
name|void
name|release
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|release
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|isNodeBlacklisted (String hostname)
specifier|protected
name|boolean
name|isNodeBlacklisted
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nodeBlacklistingEnabled
operator|||
name|ignoreBlacklisting
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|blacklistedNodes
operator|.
name|contains
argument_list|(
name|hostname
argument_list|)
return|;
block|}
DECL|method|getFilteredContainerRequest (ContainerRequest orig)
specifier|protected
name|ContainerRequest
name|getFilteredContainerRequest
parameter_list|(
name|ContainerRequest
name|orig
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newHosts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|orig
operator|.
name|hosts
control|)
block|{
if|if
condition|(
operator|!
name|isNodeBlacklisted
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|newHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|hosts
init|=
name|newHosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|ContainerRequest
name|newReq
init|=
operator|new
name|ContainerRequest
argument_list|(
name|orig
operator|.
name|attemptID
argument_list|,
name|orig
operator|.
name|capability
argument_list|,
name|hosts
argument_list|,
name|orig
operator|.
name|racks
argument_list|,
name|orig
operator|.
name|priority
argument_list|)
decl_stmt|;
return|return
name|newReq
return|;
block|}
block|}
end_class

end_unit

