begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_class
DECL|class|ContainerRemoteLaunchEvent
specifier|public
class|class
name|ContainerRemoteLaunchEvent
extends|extends
name|ContainerLauncherEvent
block|{
DECL|field|container
specifier|private
specifier|final
name|ContainerLaunchContext
name|container
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|Task
name|task
decl_stmt|;
DECL|method|ContainerRemoteLaunchEvent (TaskAttemptId taskAttemptID, ContainerId containerID, String containerMgrAddress, ContainerToken containerToken, ContainerLaunchContext containerLaunchContext, Task remoteTask)
specifier|public
name|ContainerRemoteLaunchEvent
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|,
name|ContainerId
name|containerID
parameter_list|,
name|String
name|containerMgrAddress
parameter_list|,
name|ContainerToken
name|containerToken
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|,
name|Task
name|remoteTask
parameter_list|)
block|{
name|super
argument_list|(
name|taskAttemptID
argument_list|,
name|containerID
argument_list|,
name|containerMgrAddress
argument_list|,
name|containerToken
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_LAUNCH
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|containerLaunchContext
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|remoteTask
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|ContainerLaunchContext
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
DECL|method|getRemoteTask ()
specifier|public
name|Task
name|getRemoteTask
parameter_list|()
block|{
return|return
name|this
operator|.
name|task
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
end_class

end_unit

