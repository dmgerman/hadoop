begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_comment
comment|/**  * Reads in history events from the JobHistoryFile and sends them out again  * to be recorded.  */
end_comment

begin_class
DECL|class|JobHistoryCopyService
specifier|public
class|class
name|JobHistoryCopyService
extends|extends
name|CompositeService
implements|implements
name|HistoryEventHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobHistoryCopyService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|handler
decl_stmt|;
DECL|field|jobId
specifier|private
specifier|final
name|JobId
name|jobId
decl_stmt|;
DECL|method|JobHistoryCopyService (ApplicationAttemptId applicationAttemptId, EventHandler<Event> handler)
specifier|public
name|JobHistoryCopyService
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|handler
parameter_list|)
block|{
name|super
argument_list|(
literal|"JobHistoryCopyService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationAttemptId
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleEvent (HistoryEvent event)
specifier|public
name|void
name|handleEvent
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Skip over the AM Events this is handled elsewhere
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|AMStartedEvent
operator|)
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|//TODO should we parse on a background thread???
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|parse ()
specifier|private
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|getPreviousJobHistoryFileStream
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error trying to open previous history file. No history data "
operator|+
literal|"will be copied over."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
if|if
condition|(
name|parseException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got an error parsing job-history file"
operator|+
literal|", ignoring incomplete events."
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreviousJobHistoryFileStream ( Configuration conf, ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|static
name|FSDataInputStream
name|getPreviousJobHistoryFileStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|Path
name|historyFile
init|=
literal|null
decl_stmt|;
name|String
name|jobId
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|jobhistoryDir
init|=
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryStagingDirPrefix
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|Path
name|histDirPath
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|jobhistoryDir
argument_list|)
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|histDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// read the previous history file
name|historyFile
operator|=
name|fc
operator|.
name|makeQualified
argument_list|(
name|JobHistoryUtils
operator|.
name|getStagingJobHistoryFile
argument_list|(
name|histDirPath
argument_list|,
name|jobId
argument_list|,
operator|(
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"History file is at "
operator|+
name|historyFile
argument_list|)
expr_stmt|;
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
block|}
end_class

end_unit

