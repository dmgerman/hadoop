begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.speculate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|forecast
operator|.
name|SimpleExponentialSmoothing
import|;
end_import

begin_comment
comment|/**  * A task Runtime Estimator based on exponential smoothing.  */
end_comment

begin_class
DECL|class|SimpleExponentialTaskRuntimeEstimator
specifier|public
class|class
name|SimpleExponentialTaskRuntimeEstimator
extends|extends
name|StartEndTimesBase
block|{
DECL|field|DEFAULT_ESTIMATE_RUNTIME
specifier|private
specifier|final
specifier|static
name|long
name|DEFAULT_ESTIMATE_RUNTIME
init|=
operator|-
literal|1L
decl_stmt|;
comment|/**    * Constant time used to calculate the smoothing exponential factor.    */
DECL|field|constTime
specifier|private
name|long
name|constTime
decl_stmt|;
comment|/**    * Number of readings before we consider the estimate stable.    * Otherwise, the estimate will be skewed due to the initial estimate    */
DECL|field|skipCount
specifier|private
name|int
name|skipCount
decl_stmt|;
comment|/**    * Time window to automatically update the count of the skipCount. This is    * needed when a task stalls without any progress, causing the estimator to    * return -1 as an estimatedRuntime.    */
DECL|field|stagnatedWindow
specifier|private
name|long
name|stagnatedWindow
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|AtomicReference
argument_list|<
name|SimpleExponentialSmoothing
argument_list|>
argument_list|>
DECL|field|estimates
name|estimates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getForecastEntry (TaskAttemptId attemptID)
specifier|private
name|SimpleExponentialSmoothing
name|getForecastEntry
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|AtomicReference
argument_list|<
name|SimpleExponentialSmoothing
argument_list|>
name|entryRef
init|=
name|estimates
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryRef
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entryRef
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incorporateReading (TaskAttemptId attemptID, float newRawData, long newTimeStamp)
specifier|private
name|void
name|incorporateReading
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|float
name|newRawData
parameter_list|,
name|long
name|newTimeStamp
parameter_list|)
block|{
name|SimpleExponentialSmoothing
name|foreCastEntry
init|=
name|getForecastEntry
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|foreCastEntry
operator|==
literal|null
condition|)
block|{
name|Long
name|tStartTime
init|=
name|startTimes
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
comment|// skip if the startTime is not set yet
if|if
condition|(
name|tStartTime
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|estimates
operator|.
name|putIfAbsent
argument_list|(
name|attemptID
argument_list|,
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|SimpleExponentialSmoothing
operator|.
name|createForecast
argument_list|(
name|constTime
argument_list|,
name|skipCount
argument_list|,
name|stagnatedWindow
argument_list|,
name|tStartTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|incorporateReading
argument_list|(
name|attemptID
argument_list|,
name|newRawData
argument_list|,
name|newTimeStamp
argument_list|)
expr_stmt|;
return|return;
block|}
name|foreCastEntry
operator|.
name|incorporateReading
argument_list|(
name|newTimeStamp
argument_list|,
name|newRawData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contextualize (Configuration conf, AppContext context)
specifier|public
name|void
name|contextualize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|contextualize
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|constTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_LAMBDA_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_LAMBDA_MS
argument_list|)
expr_stmt|;
name|stagnatedWindow
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|2
operator|*
name|constTime
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_STAGNATED_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_STAGNATED_MS
argument_list|)
argument_list|)
expr_stmt|;
name|skipCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_SKIP_INITIALS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_TASK_ESTIMATOR_SIMPLE_SMOOTH_INITIALS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatedRuntime (TaskAttemptId id)
specifier|public
name|long
name|estimatedRuntime
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|)
block|{
name|SimpleExponentialSmoothing
name|foreCastEntry
init|=
name|getForecastEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|foreCastEntry
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_ESTIMATE_RUNTIME
return|;
block|}
comment|// TODO: What should we do when estimate is zero
name|double
name|remainingWork
init|=
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
literal|1.0
operator|-
name|foreCastEntry
operator|.
name|getRawData
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|forecast
init|=
name|foreCastEntry
operator|.
name|getForecast
argument_list|()
decl_stmt|;
if|if
condition|(
name|forecast
operator|<=
literal|0.0
condition|)
block|{
return|return
name|DEFAULT_ESTIMATE_RUNTIME
return|;
block|}
name|long
name|remainingTime
init|=
call|(
name|long
call|)
argument_list|(
name|remainingWork
operator|/
name|forecast
argument_list|)
decl_stmt|;
name|long
name|estimatedRuntime
init|=
name|remainingTime
operator|+
name|foreCastEntry
operator|.
name|getTimeStamp
argument_list|()
operator|-
name|foreCastEntry
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|estimatedRuntime
return|;
block|}
annotation|@
name|Override
DECL|method|estimatedNewAttemptRuntime (TaskId id)
specifier|public
name|long
name|estimatedNewAttemptRuntime
parameter_list|(
name|TaskId
name|id
parameter_list|)
block|{
name|DataStatistics
name|statistics
init|=
name|dataStatisticsForTask
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|statistics
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1L
return|;
block|}
name|double
name|statsMeanCI
init|=
name|statistics
operator|.
name|meanCI
argument_list|()
decl_stmt|;
name|double
name|expectedVal
init|=
name|statsMeanCI
operator|+
name|Math
operator|.
name|min
argument_list|(
name|statsMeanCI
operator|*
literal|0.25
argument_list|,
name|statistics
operator|.
name|std
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
return|return
call|(
name|long
call|)
argument_list|(
name|expectedVal
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasStagnatedProgress (TaskAttemptId id, long timeStamp)
specifier|public
name|boolean
name|hasStagnatedProgress
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
name|SimpleExponentialSmoothing
name|foreCastEntry
init|=
name|getForecastEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|foreCastEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|foreCastEntry
operator|.
name|isDataStagnated
argument_list|(
name|timeStamp
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|runtimeEstimateVariance (TaskAttemptId id)
specifier|public
name|long
name|runtimeEstimateVariance
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|)
block|{
name|SimpleExponentialSmoothing
name|forecastEntry
init|=
name|getForecastEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|forecastEntry
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_ESTIMATE_RUNTIME
return|;
block|}
name|double
name|forecast
init|=
name|forecastEntry
operator|.
name|getForecast
argument_list|()
decl_stmt|;
if|if
condition|(
name|forecastEntry
operator|.
name|isDefaultForecast
argument_list|(
name|forecast
argument_list|)
condition|)
block|{
return|return
name|DEFAULT_ESTIMATE_RUNTIME
return|;
block|}
comment|//TODO: What is the best way to measure variance in runtime
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
DECL|method|updateAttempt (TaskAttemptStatus status, long timestamp)
specifier|public
name|void
name|updateAttempt
parameter_list|(
name|TaskAttemptStatus
name|status
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
operator|.
name|updateAttempt
argument_list|(
name|status
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptID
init|=
name|status
operator|.
name|id
decl_stmt|;
name|float
name|progress
init|=
name|status
operator|.
name|progress
decl_stmt|;
name|incorporateReading
argument_list|(
name|attemptID
argument_list|,
name|progress
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

