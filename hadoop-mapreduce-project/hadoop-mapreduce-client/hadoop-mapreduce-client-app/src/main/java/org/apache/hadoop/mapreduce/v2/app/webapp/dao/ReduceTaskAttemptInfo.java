begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"taskAttempt"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ReduceTaskAttemptInfo
specifier|public
class|class
name|ReduceTaskAttemptInfo
extends|extends
name|TaskAttemptInfo
block|{
DECL|field|shuffleFinishTime
specifier|protected
name|long
name|shuffleFinishTime
decl_stmt|;
DECL|field|mergeFinishTime
specifier|protected
name|long
name|mergeFinishTime
decl_stmt|;
DECL|field|elapsedShuffleTime
specifier|protected
name|long
name|elapsedShuffleTime
decl_stmt|;
DECL|field|elapsedMergeTime
specifier|protected
name|long
name|elapsedMergeTime
decl_stmt|;
DECL|field|elapsedReduceTime
specifier|protected
name|long
name|elapsedReduceTime
decl_stmt|;
DECL|method|ReduceTaskAttemptInfo ()
specifier|public
name|ReduceTaskAttemptInfo
parameter_list|()
block|{   }
DECL|method|ReduceTaskAttemptInfo (TaskAttempt ta, TaskType type)
specifier|public
name|ReduceTaskAttemptInfo
parameter_list|(
name|TaskAttempt
name|ta
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|ta
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|shuffleFinishTime
operator|=
name|ta
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeFinishTime
operator|=
name|ta
operator|.
name|getSortFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|elapsedShuffleTime
operator|=
name|Times
operator|.
name|elapsed
argument_list|(
name|this
operator|.
name|startTime
argument_list|,
name|this
operator|.
name|shuffleFinishTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|elapsedShuffleTime
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|elapsedShuffleTime
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|elapsedMergeTime
operator|=
name|Times
operator|.
name|elapsed
argument_list|(
name|this
operator|.
name|shuffleFinishTime
argument_list|,
name|this
operator|.
name|mergeFinishTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|elapsedMergeTime
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|elapsedMergeTime
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|elapsedReduceTime
operator|=
name|Times
operator|.
name|elapsed
argument_list|(
name|this
operator|.
name|mergeFinishTime
argument_list|,
name|this
operator|.
name|finishTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|elapsedReduceTime
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|elapsedReduceTime
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|shuffleFinishTime
return|;
block|}
DECL|method|getMergeFinishTime ()
specifier|public
name|long
name|getMergeFinishTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergeFinishTime
return|;
block|}
DECL|method|getElapsedShuffleTime ()
specifier|public
name|long
name|getElapsedShuffleTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|elapsedShuffleTime
return|;
block|}
DECL|method|getElapsedMergeTime ()
specifier|public
name|long
name|getElapsedMergeTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|elapsedMergeTime
return|;
block|}
DECL|method|getElapsedReduceTime ()
specifier|public
name|long
name|getElapsedReduceTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|elapsedReduceTime
return|;
block|}
block|}
end_class

end_unit

