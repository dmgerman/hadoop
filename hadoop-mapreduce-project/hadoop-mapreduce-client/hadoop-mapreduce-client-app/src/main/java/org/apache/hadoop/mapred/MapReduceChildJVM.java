begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
operator|.
name|LogName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|MapReduceChildJVM
specifier|public
class|class
name|MapReduceChildJVM
block|{
DECL|field|SYSTEM_PATH_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_PATH_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapReduceChildJVM
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getTaskLogFile (String logDir, LogName filter)
specifier|private
specifier|static
name|File
name|getTaskLogFile
parameter_list|(
name|String
name|logDir
parameter_list|,
name|LogName
name|filter
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getChildEnv (JobConf jobConf, boolean isMap)
specifier|private
specifier|static
name|String
name|getChildEnv
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|boolean
name|isMap
parameter_list|)
block|{
if|if
condition|(
name|isMap
condition|)
block|{
return|return
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ENV
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_ENV
argument_list|)
argument_list|)
return|;
block|}
return|return
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_ENV
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|jobConf
operator|.
name|MAPRED_TASK_ENV
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setVMEnv (Map<String, String> env, List<String> classPaths, String pwd, String containerLogDir, String nmLdLibraryPath, Task task, CharSequence applicationTokensFile)
specifier|public
specifier|static
name|void
name|setVMEnv
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|classPaths
parameter_list|,
name|String
name|pwd
parameter_list|,
name|String
name|containerLogDir
parameter_list|,
name|String
name|nmLdLibraryPath
parameter_list|,
name|Task
name|task
parameter_list|,
name|CharSequence
name|applicationTokensFile
parameter_list|)
block|{
name|JobConf
name|conf
init|=
name|task
operator|.
name|conf
decl_stmt|;
comment|// Add classpath.
name|CharSequence
name|cp
init|=
name|env
operator|.
name|get
argument_list|(
literal|"CLASSPATH"
argument_list|)
decl_stmt|;
name|String
name|classpath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|SYSTEM_PATH_SEPARATOR
argument_list|,
name|classPaths
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cp
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
literal|"CLASSPATH"
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|put
argument_list|(
literal|"CLASSPATH"
argument_list|,
name|classpath
operator|+
name|SYSTEM_PATH_SEPARATOR
operator|+
name|cp
argument_list|)
expr_stmt|;
block|}
comment|/////// Environmental variable LD_LIBRARY_PATH
name|StringBuilder
name|ldLibraryPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ldLibraryPath
operator|.
name|append
argument_list|(
name|nmLdLibraryPath
argument_list|)
expr_stmt|;
name|ldLibraryPath
operator|.
name|append
argument_list|(
name|SYSTEM_PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|ldLibraryPath
operator|.
name|append
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"LD_LIBRARY_PATH"
argument_list|,
name|ldLibraryPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/////// Environmental variable LD_LIBRARY_PATH
comment|// for the child of task jvm, set hadoop.root.logger
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_ROOT_LOGGER"
argument_list|,
literal|"DEBUG,CLA"
argument_list|)
expr_stmt|;
comment|// TODO: Debug
comment|// TODO: The following is useful for instance in streaming tasks. Should be
comment|// set in ApplicationMaster's env by the RM.
name|String
name|hadoopClientOpts
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_CLIENT_OPTS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopClientOpts
operator|==
literal|null
condition|)
block|{
name|hadoopClientOpts
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|hadoopClientOpts
operator|=
name|hadoopClientOpts
operator|+
literal|" "
expr_stmt|;
block|}
comment|// FIXME: don't think this is also needed given we already set java
comment|// properties.
name|long
name|logSize
init|=
name|TaskLog
operator|.
name|getTaskLogLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|logProps
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|setupLog4jProperties
argument_list|(
name|logProps
argument_list|,
name|logSize
argument_list|,
name|containerLogDir
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|logProps
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hadoopClientOpts
operator|=
name|hadoopClientOpts
operator|+
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_CLIENT_OPTS"
argument_list|,
name|hadoopClientOpts
argument_list|)
expr_stmt|;
comment|// add the env variables passed by the user
name|String
name|mapredChildEnv
init|=
name|getChildEnv
argument_list|(
name|conf
argument_list|,
name|task
operator|.
name|isMapTask
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapredChildEnv
operator|!=
literal|null
operator|&&
name|mapredChildEnv
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|childEnvs
index|[]
init|=
name|mapredChildEnv
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cEnv
range|:
name|childEnvs
control|)
block|{
name|String
index|[]
name|parts
init|=
name|cEnv
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// split on '='
name|String
name|value
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// replace $env with the child's env constructed by tt's
comment|// example LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp
name|value
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|"$"
operator|+
name|parts
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this key is not configured by the tt for the child .. get it
comment|// from the tt's env
comment|// example PATH=$PATH:/tmp
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Get from NM?
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// the env key is present in the tt's env
name|value
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|"$"
operator|+
name|parts
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the env key is note present anywhere .. simply set it
comment|// example X=$X:/tmp or X=/tmp
name|value
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|replace
argument_list|(
literal|"$"
operator|+
name|parts
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|env
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should not be set here (If an OS check is requied. moved to ContainerLuanch)
comment|// env.put("JVM_PID", "`echo $$`");
name|env
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|STDOUT_LOGFILE_ENV
argument_list|,
name|getTaskLogFile
argument_list|(
name|containerLogDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|STDERR_LOGFILE_ENV
argument_list|,
name|getTaskLogFile
argument_list|(
name|containerLogDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildJavaOpts (JobConf jobConf, boolean isMapTask)
specifier|private
specifier|static
name|String
name|getChildJavaOpts
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|boolean
name|isMapTask
parameter_list|)
block|{
if|if
condition|(
name|isMapTask
condition|)
block|{
return|return
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
name|JobConf
operator|.
name|DEFAULT_MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
return|;
block|}
return|return
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_JAVA_OPTS
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
name|JobConf
operator|.
name|DEFAULT_MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setupLog4jProperties (Vector<String> vargs, long logSize, String containerLogDir)
specifier|private
specifier|static
name|void
name|setupLog4jProperties
parameter_list|(
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|,
name|long
name|logSize
parameter_list|,
name|String
name|containerLogDir
parameter_list|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration=container-log4j.properties"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.yarn.mr.containerLogDir="
operator|+
name|containerLogDir
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"-Dhadoop.yarn.mr.totalLogFileSize="
operator|+
name|logSize
argument_list|)
expr_stmt|;
block|}
DECL|method|getVMCommand ( InetSocketAddress taskAttemptListenerAddr, Task task, String javaHome, String workDir, String logDir, String childTmpDir, ID jvmID)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getVMCommand
parameter_list|(
name|InetSocketAddress
name|taskAttemptListenerAddr
parameter_list|,
name|Task
name|task
parameter_list|,
name|String
name|javaHome
parameter_list|,
name|String
name|workDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|childTmpDir
parameter_list|,
name|ID
name|jvmID
parameter_list|)
block|{
name|TaskAttemptID
name|attemptID
init|=
name|task
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
name|task
operator|.
name|conf
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"exec"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|javaHome
operator|+
literal|"/bin/java"
argument_list|)
expr_stmt|;
comment|// Add child (task) java-vm options.
comment|//
comment|// The following symbols if present in mapred.{map|reduce}.child.java.opts
comment|// value are replaced:
comment|// + @taskid@ is interpolated with value of TaskID.
comment|// Other occurrences of @ will not be altered.
comment|//
comment|// Example with multiple arguments and substitutions, showing
comment|// jvm GC logging, and start of a passwordless JVM JMX agent so can
comment|// connect with jconsole and the likes to watch child memory, threads
comment|// and get thread dumps.
comment|//
comment|//<property>
comment|//<name>mapred.map.child.java.opts</name>
comment|//<value>-Xmx 512M -verbose:gc -Xloggc:/tmp/@taskid@.gc \
comment|//           -Dcom.sun.management.jmxremote.authenticate=false \
comment|//           -Dcom.sun.management.jmxremote.ssl=false \
comment|//</value>
comment|//</property>
comment|//
comment|//<property>
comment|//<name>mapred.reduce.child.java.opts</name>
comment|//<value>-Xmx 1024M -verbose:gc -Xloggc:/tmp/@taskid@.gc \
comment|//           -Dcom.sun.management.jmxremote.authenticate=false \
comment|//           -Dcom.sun.management.jmxremote.ssl=false \
comment|//</value>
comment|//</property>
comment|//
name|String
name|javaOpts
init|=
name|getChildJavaOpts
argument_list|(
name|conf
argument_list|,
name|task
operator|.
name|isMapTask
argument_list|()
argument_list|)
decl_stmt|;
name|javaOpts
operator|=
name|javaOpts
operator|.
name|replace
argument_list|(
literal|"@taskid@"
argument_list|,
name|attemptID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|javaOptsSplit
init|=
name|javaOpts
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Add java.library.path; necessary for loading native libraries.
comment|//
comment|// 1. We add the 'cwd' of the task to it's java.library.path to help
comment|//    users distribute native libraries via the DistributedCache.
comment|// 2. The user can also specify extra paths to be added to the
comment|//    java.library.path via mapred.{map|reduce}.child.java.opts.
comment|//
name|String
name|libraryPath
init|=
name|workDir
decl_stmt|;
name|boolean
name|hasUserLDPath
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|javaOptsSplit
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|javaOptsSplit
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-Djava.library.path="
argument_list|)
condition|)
block|{
comment|// TODO: Does the above take care of escaped space chars
name|javaOptsSplit
index|[
name|i
index|]
operator|+=
name|SYSTEM_PATH_SEPARATOR
operator|+
name|libraryPath
expr_stmt|;
name|hasUserLDPath
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasUserLDPath
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"-Djava.library.path="
operator|+
name|libraryPath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|javaOptsSplit
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vargs
operator|.
name|add
argument_list|(
name|javaOptsSplit
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childTmpDir
operator|!=
literal|null
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"-Djava.io.tmpdir="
operator|+
name|childTmpDir
argument_list|)
expr_stmt|;
block|}
comment|// Setup the log4j prop
name|long
name|logSize
init|=
name|TaskLog
operator|.
name|getTaskLogLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupLog4jProperties
argument_list|(
name|vargs
argument_list|,
name|logSize
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getProfileEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getProfileTaskRange
argument_list|(
name|task
operator|.
name|isMapTask
argument_list|()
argument_list|)
operator|.
name|isIncluded
argument_list|(
name|task
operator|.
name|getPartition
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|prof
init|=
name|getTaskLogFile
argument_list|(
name|logDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|PROFILE
argument_list|)
decl_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|conf
operator|.
name|getProfileParams
argument_list|()
argument_list|,
name|prof
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add main class and its arguments
name|vargs
operator|.
name|add
argument_list|(
name|YarnChild
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// main of Child
comment|// pass TaskAttemptListener's address
name|vargs
operator|.
name|add
argument_list|(
name|taskAttemptListenerAddr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|taskAttemptListenerAddr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|attemptID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// pass task identifier
comment|// Finally add the jvmID
name|vargs
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|jvmID
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|getTaskLogFile
argument_list|(
name|logDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|getTaskLogFile
argument_list|(
name|logDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Final commmand
name|StringBuilder
name|mergedCommand
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CharSequence
name|str
range|:
name|vargs
control|)
block|{
name|mergedCommand
operator|.
name|append
argument_list|(
name|str
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|String
argument_list|>
name|vargsFinal
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|vargsFinal
operator|.
name|add
argument_list|(
name|mergedCommand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|vargsFinal
return|;
block|}
block|}
end_class

end_unit

