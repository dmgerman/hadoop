begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AMAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AMAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|BlacklistedNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ConfInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobTaskAttemptCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobTaskCounterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|JobsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|dao
operator|.
name|TasksInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/mapreduce"
argument_list|)
DECL|class|AMWebServices
specifier|public
class|class
name|AMWebServices
block|{
DECL|field|appCtx
specifier|private
specifier|final
name|AppContext
name|appCtx
decl_stmt|;
DECL|field|app
specifier|private
specifier|final
name|App
name|app
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
annotation|@
name|Inject
DECL|method|AMWebServices (final App app, final AppContext context)
specifier|public
name|AMWebServices
parameter_list|(
specifier|final
name|App
name|app
parameter_list|,
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|appCtx
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|app
operator|=
name|app
expr_stmt|;
block|}
DECL|method|hasAccess (Job job, HttpServletRequest request)
name|Boolean
name|hasAccess
parameter_list|(
name|Job
name|job
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
name|job
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|//clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * convert a job id string to an actual job and handle all the error checking.    */
DECL|method|getJobFromJobIdString (String jid, AppContext appCtx)
specifier|public
specifier|static
name|Job
name|getJobFromJobIdString
parameter_list|(
name|String
name|jid
parameter_list|,
name|AppContext
name|appCtx
parameter_list|)
throws|throws
name|NotFoundException
block|{
name|JobId
name|jobId
decl_stmt|;
name|Job
name|job
decl_stmt|;
try|try
block|{
name|jobId
operator|=
name|MRApps
operator|.
name|toJobID
argument_list|(
name|jid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// TODO: after MAPREDUCE-2793 YarnRuntimeException is probably not expected here
comment|// anymore but keeping it for now just in case other stuff starts failing.
comment|// Also, the webservice should ideally return BadRequest (HTTP:400) when
comment|// the id is malformed instead of NotFound (HTTP:404). The webserver on
comment|// top of which AMWebServices is built seems to automatically do that for
comment|// unhandled exceptions
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|jobId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"job, "
operator|+
name|jid
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
name|job
operator|=
name|appCtx
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"job, "
operator|+
name|jid
operator|+
literal|", is not found"
argument_list|)
throw|;
block|}
return|return
name|job
return|;
block|}
comment|/**    * convert a task id string to an actual task and handle all the error    * checking.    */
DECL|method|getTaskFromTaskIdString (String tid, Job job)
specifier|public
specifier|static
name|Task
name|getTaskFromTaskIdString
parameter_list|(
name|String
name|tid
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|NotFoundException
block|{
name|TaskId
name|taskID
decl_stmt|;
name|Task
name|task
decl_stmt|;
try|try
block|{
name|taskID
operator|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// TODO: after MAPREDUCE-2793 YarnRuntimeException is probably not expected here
comment|// anymore but keeping it for now just in case other stuff starts failing.
comment|// Also, the webservice should ideally return BadRequest (HTTP:400) when
comment|// the id is malformed instead of NotFound (HTTP:404). The webserver on
comment|// top of which AMWebServices is built seems to automatically do that for
comment|// unhandled exceptions
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|taskID
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"taskid "
operator|+
name|tid
operator|+
literal|" not found or invalid"
argument_list|)
throw|;
block|}
name|task
operator|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"task not found with id "
operator|+
name|tid
argument_list|)
throw|;
block|}
return|return
name|task
return|;
block|}
comment|/**    * convert a task attempt id string to an actual task attempt and handle all    * the error checking.    */
DECL|method|getTaskAttemptFromTaskAttemptString (String attId, Task task)
specifier|public
specifier|static
name|TaskAttempt
name|getTaskAttemptFromTaskAttemptString
parameter_list|(
name|String
name|attId
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|NotFoundException
block|{
name|TaskAttemptId
name|attemptId
decl_stmt|;
name|TaskAttempt
name|ta
decl_stmt|;
try|try
block|{
name|attemptId
operator|=
name|MRApps
operator|.
name|toTaskAttemptID
argument_list|(
name|attId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// TODO: after MAPREDUCE-2793 YarnRuntimeException is probably not expected here
comment|// anymore but keeping it for now just in case other stuff starts failing.
comment|// Also, the webservice should ideally return BadRequest (HTTP:400) when
comment|// the id is malformed instead of NotFound (HTTP:404). The webserver on
comment|// top of which AMWebServices is built seems to automatically do that for
comment|// unhandled exceptions
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|attemptId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"task attempt id "
operator|+
name|attId
operator|+
literal|" not found or invalid"
argument_list|)
throw|;
block|}
name|ta
operator|=
name|task
operator|.
name|getAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|ta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Error getting info on task attempt id "
operator|+
name|attId
argument_list|)
throw|;
block|}
return|return
name|ta
return|;
block|}
comment|/**    * check for job access.    *    * @param job    *          the job that is being accessed    */
DECL|method|checkAccess (Job job, HttpServletRequest request)
name|void
name|checkAccess
parameter_list|(
name|Job
name|job
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasAccess
argument_list|(
name|job
argument_list|,
name|request
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|AppInfo
name|get
parameter_list|()
block|{
return|return
name|getAppInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getAppInfo ()
specifier|public
name|AppInfo
name|getAppInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|AppInfo
argument_list|(
name|this
operator|.
name|app
argument_list|,
name|this
operator|.
name|app
operator|.
name|context
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/blacklistednodes"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getBlacklistedNodes ()
specifier|public
name|BlacklistedNodesInfo
name|getBlacklistedNodes
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|BlacklistedNodesInfo
argument_list|(
name|this
operator|.
name|app
operator|.
name|context
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobs (@ontext HttpServletRequest hsr)
specifier|public
name|JobsInfo
name|getJobs
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|JobsInfo
name|allJobs
init|=
operator|new
name|JobsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Job
name|job
range|:
name|appCtx
operator|.
name|getAllJobs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// getAllJobs only gives you a partial we want a full
name|Job
name|fullJob
init|=
name|appCtx
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullJob
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|allJobs
operator|.
name|add
argument_list|(
operator|new
name|JobInfo
argument_list|(
name|fullJob
argument_list|,
name|hasAccess
argument_list|(
name|fullJob
argument_list|,
name|hsr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|allJobs
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJob (@ontext HttpServletRequest hsr, @PathParam(R) String jid)
specifier|public
name|JobInfo
name|getJob
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobInfo
argument_list|(
name|job
argument_list|,
name|hasAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/jobattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobAttempts (@athParamR) String jid)
specifier|public
name|AMAttemptsInfo
name|getJobAttempts
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|AMAttemptsInfo
name|amAttempts
init|=
operator|new
name|AMAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|AMInfo
name|amInfo
range|:
name|job
operator|.
name|getAMInfos
argument_list|()
control|)
block|{
name|AMAttemptInfo
name|attempt
init|=
operator|new
name|AMAttemptInfo
argument_list|(
name|amInfo
argument_list|,
name|MRApps
operator|.
name|toString
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|job
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|amAttempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
return|return
name|amAttempts
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobCounters (@ontext HttpServletRequest hsr, @PathParam(R) String jid)
specifier|public
name|JobCounterInfo
name|getJobCounters
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
return|return
operator|new
name|JobCounterInfo
argument_list|(
name|this
operator|.
name|appCtx
argument_list|,
name|job
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/conf"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobConf (@ontext HttpServletRequest hsr, @PathParam(R) String jid)
specifier|public
name|ConfInfo
name|getJobConf
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|ConfInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
operator|new
name|ConfInfo
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"unable to load configuration for job: "
operator|+
name|jid
argument_list|)
throw|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTasks (@ontext HttpServletRequest hsr, @PathParam(R) String jid, @QueryParam(R) String type)
specifier|public
name|TasksInfo
name|getJobTasks
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"type"
argument_list|)
name|String
name|type
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|TasksInfo
name|allTasks
init|=
operator|new
name|TasksInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskType
name|ttype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ttype
operator|=
name|MRApps
operator|.
name|taskType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"tasktype must be either m or r"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|ttype
operator|!=
literal|null
operator|&&
name|task
operator|.
name|getType
argument_list|()
operator|!=
name|ttype
condition|)
block|{
continue|continue;
block|}
name|allTasks
operator|.
name|add
argument_list|(
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|allTasks
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks/{taskid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTask (@ontext HttpServletRequest hsr, @PathParam(R) String jid, @PathParam(R) String tid)
specifier|public
name|TaskInfo
name|getJobTask
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
return|return
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks/{taskid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getSingleTaskCounters ( @ontext HttpServletRequest hsr, @PathParam(R) String jid, @PathParam(R) String tid)
specifier|public
name|JobTaskCounterInfo
name|getSingleTaskCounters
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobTaskCounterInfo
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks/{taskid}/attempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttempts (@ontext HttpServletRequest hsr, @PathParam(R) String jid, @PathParam(R) String tid)
specifier|public
name|TaskAttemptsInfo
name|getJobTaskAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|TaskAttemptsInfo
name|attempts
init|=
operator|new
name|TaskAttemptsInfo
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskAttempt
name|ta
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|new
name|TaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|attempts
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttemptId (@ontext HttpServletRequest hsr, @PathParam(R) String jid, @PathParam(R) String tid, @PathParam(R) String attId)
specifier|public
name|TaskAttemptInfo
name|getJobTaskAttemptId
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"attemptid"
argument_list|)
name|String
name|attId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|TaskAttempt
name|ta
init|=
name|getTaskAttemptFromTaskAttemptString
argument_list|(
name|attId
argument_list|,
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
return|return
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskAttemptInfo
argument_list|(
name|ta
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/jobs/{jobid}/tasks/{taskid}/attempts/{attemptid}/counters"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getJobTaskAttemptIdCounters ( @ontext HttpServletRequest hsr, @PathParam(R) String jid, @PathParam(R) String tid, @PathParam(R) String attId)
specifier|public
name|JobTaskAttemptCounterInfo
name|getJobTaskAttemptIdCounters
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"jobid"
argument_list|)
name|String
name|jid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"taskid"
argument_list|)
name|String
name|tid
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"attemptid"
argument_list|)
name|String
name|attId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|getJobFromJobIdString
argument_list|(
name|jid
argument_list|,
name|appCtx
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|job
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|getTaskFromTaskIdString
argument_list|(
name|tid
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|TaskAttempt
name|ta
init|=
name|getTaskAttemptFromTaskAttemptString
argument_list|(
name|attId
argument_list|,
name|task
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobTaskAttemptCounterInfo
argument_list|(
name|ta
argument_list|)
return|;
block|}
block|}
end_class

end_unit

