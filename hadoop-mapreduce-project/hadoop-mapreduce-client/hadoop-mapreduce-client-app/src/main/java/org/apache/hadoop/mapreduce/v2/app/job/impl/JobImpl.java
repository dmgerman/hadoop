begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInfoChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobQueueChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|ChainMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|ChainReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|SplitMetaInfoReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterJobAbortEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterJobCommitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterJobSetupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobAbortCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCommitFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobSetupFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobStartEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobUpdatedNodesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptTooManyFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskRecoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/** Implementation of Job interface. Maintains the state machines of Job.  * The read and write calls use ReadWriteLock for concurrency.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|JobImpl
specifier|public
class|class
name|JobImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
implements|,
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|TaskAttemptCompletionEvent
index|[]
DECL|field|EMPTY_TASK_ATTEMPT_COMPLETION_EVENTS
name|EMPTY_TASK_ATTEMPT_COMPLETION_EVENTS
init|=
operator|new
name|TaskAttemptCompletionEvent
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TaskCompletionEvent
index|[]
DECL|field|EMPTY_TASK_COMPLETION_EVENTS
name|EMPTY_TASK_COMPLETION_EVENTS
init|=
operator|new
name|TaskCompletionEvent
index|[
literal|0
index|]
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//The maximum fraction of fetch failures allowed for a map
DECL|field|maxAllowedFetchFailuresFraction
specifier|private
name|float
name|maxAllowedFetchFailuresFraction
decl_stmt|;
comment|//Maximum no. of fetch-failure notifications after which map task is failed
DECL|field|maxFetchFailuresNotifications
specifier|private
name|int
name|maxFetchFailuresNotifications
decl_stmt|;
DECL|field|JOB_KILLED_DIAG
specifier|public
specifier|static
specifier|final
name|String
name|JOB_KILLED_DIAG
init|=
literal|"Job received Kill while in RUNNING state."
decl_stmt|;
comment|//final fields
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|final
name|JobACLsManager
name|aclsManager
decl_stmt|;
DECL|field|reporterUserName
specifier|private
specifier|final
name|String
name|reporterUserName
decl_stmt|;
DECL|field|jobACLs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
decl_stmt|;
DECL|field|setupWeight
specifier|private
name|float
name|setupWeight
init|=
literal|0.05f
decl_stmt|;
DECL|field|cleanupWeight
specifier|private
name|float
name|cleanupWeight
init|=
literal|0.05f
decl_stmt|;
DECL|field|mapWeight
specifier|private
name|float
name|mapWeight
init|=
literal|0.0f
decl_stmt|;
DECL|field|reduceWeight
specifier|private
name|float
name|reduceWeight
init|=
literal|0.0f
decl_stmt|;
DECL|field|completedTasksFromPreviousRun
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
name|completedTasksFromPreviousRun
decl_stmt|;
DECL|field|amInfos
specifier|private
specifier|final
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|jobId
specifier|private
specifier|final
name|JobId
name|jobId
decl_stmt|;
DECL|field|jobName
specifier|private
specifier|final
name|String
name|jobName
decl_stmt|;
DECL|field|committer
specifier|private
specifier|final
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|newApiCommitter
specifier|private
specifier|final
name|boolean
name|newApiCommitter
decl_stmt|;
DECL|field|oldJobId
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|oldJobId
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
specifier|final
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|tasksSyncHandle
specifier|private
specifier|final
name|Object
name|tasksSyncHandle
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|mapTasks
specifier|private
specifier|final
name|Set
argument_list|<
name|TaskId
argument_list|>
name|mapTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTasks
specifier|private
specifier|final
name|Set
argument_list|<
name|TaskId
argument_list|>
name|reduceTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskId
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * maps nodes to tasks that have run on those nodes    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
DECL|field|nodesToSucceededTaskAttempts
name|nodesToSucceededTaskAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|eventHandler
specifier|private
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|MRAppMetrics
name|metrics
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
DECL|field|appSubmitTime
specifier|private
specifier|final
name|long
name|appSubmitTime
decl_stmt|;
DECL|field|appContext
specifier|private
specifier|final
name|AppContext
name|appContext
decl_stmt|;
DECL|field|lazyTasksCopyNeeded
specifier|private
name|boolean
name|lazyTasksCopyNeeded
init|=
literal|false
decl_stmt|;
DECL|field|tasks
specifier|volatile
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobCounters
specifier|private
name|Counters
name|jobCounters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|field|fullCountersLock
specifier|private
name|Object
name|fullCountersLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|fullCounters
specifier|private
name|Counters
name|fullCounters
init|=
literal|null
decl_stmt|;
DECL|field|finalMapCounters
specifier|private
name|Counters
name|finalMapCounters
init|=
literal|null
decl_stmt|;
DECL|field|finalReduceCounters
specifier|private
name|Counters
name|finalReduceCounters
init|=
literal|null
decl_stmt|;
comment|// FIXME:
comment|//
comment|// Can then replace task-level uber counters (MR-2424) with job-level ones
comment|// sent from LocalContainerLauncher, and eventually including a count of
comment|// of uber-AM attempts (probably sent from MRAppMaster).
DECL|field|conf
specifier|public
name|JobConf
name|conf
decl_stmt|;
comment|//fields initialized in init
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|remoteJobSubmitDir
specifier|private
name|Path
name|remoteJobSubmitDir
decl_stmt|;
DECL|field|remoteJobConfFile
specifier|public
name|Path
name|remoteJobConfFile
decl_stmt|;
DECL|field|jobContext
specifier|private
name|JobContext
name|jobContext
decl_stmt|;
DECL|field|allowedMapFailuresPercent
specifier|private
name|int
name|allowedMapFailuresPercent
init|=
literal|0
decl_stmt|;
DECL|field|allowedReduceFailuresPercent
specifier|private
name|int
name|allowedReduceFailuresPercent
init|=
literal|0
decl_stmt|;
DECL|field|taskAttemptCompletionEvents
specifier|private
name|List
argument_list|<
name|TaskAttemptCompletionEvent
argument_list|>
name|taskAttemptCompletionEvents
decl_stmt|;
DECL|field|mapAttemptCompletionEvents
specifier|private
name|List
argument_list|<
name|TaskCompletionEvent
argument_list|>
name|mapAttemptCompletionEvents
decl_stmt|;
DECL|field|taskCompletionIdxToMapCompletionIdx
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|taskCompletionIdxToMapCompletionIdx
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//task/attempt related datastructures
DECL|field|successAttemptCompletionEventNoMap
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Integer
argument_list|>
name|successAttemptCompletionEventNoMap
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fetchFailuresMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|Integer
argument_list|>
name|fetchFailuresMapping
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DiagnosticsUpdateTransition
DECL|field|DIAGNOSTIC_UPDATE_TRANSITION
name|DIAGNOSTIC_UPDATE_TRANSITION
init|=
operator|new
name|DiagnosticsUpdateTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InternalErrorTransition
DECL|field|INTERNAL_ERROR_TRANSITION
name|INTERNAL_ERROR_TRANSITION
init|=
operator|new
name|InternalErrorTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InternalRebootTransition
DECL|field|INTERNAL_REBOOT_TRANSITION
name|INTERNAL_REBOOT_TRANSITION
init|=
operator|new
name|InternalRebootTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TaskAttemptCompletedEventTransition
DECL|field|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
init|=
operator|new
name|TaskAttemptCompletedEventTransition
argument_list|()
decl_stmt|;
DECL|field|COUNTER_UPDATE_TRANSITION
specifier|private
specifier|static
specifier|final
name|CounterUpdateTransition
name|COUNTER_UPDATE_TRANSITION
init|=
operator|new
name|CounterUpdateTransition
argument_list|()
decl_stmt|;
DECL|field|UPDATED_NODES_TRANSITION
specifier|private
specifier|static
specifier|final
name|UpdatedNodesTransition
name|UPDATED_NODES_TRANSITION
init|=
operator|new
name|UpdatedNodesTransition
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|NEW
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
operator|new
name|InitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT_FAILED
argument_list|,
operator|new
name|InitFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillNewJobTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|INTERNAL_REBOOT_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobStateInternal
operator|.
name|NEW
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|)
comment|// Transitions from INITED state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobEventType
operator|.
name|JOB_START
argument_list|,
operator|new
name|StartTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillInitedJobTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|INTERNAL_REBOOT_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobStateInternal
operator|.
name|INITED
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|)
comment|// Transitions from SETUP state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
operator|new
name|SetupCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
operator|new
name|SetupFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KilledDuringSetupTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|INTERNAL_REBOOT_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobStateInternal
operator|.
name|SETUP
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
operator|new
name|TaskCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_COMPLETED
argument_list|,
operator|new
name|JobNoTasksCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillTasksTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|UPDATED_NODES_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
operator|new
name|MapTaskRescheduledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
operator|new
name|TaskAttemptFetchFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|RUNNING
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|INTERNAL_REBOOT_TRANSITION
argument_list|)
comment|// Transitions from KILL_WAIT state.
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
operator|new
name|KillWaitTaskCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
comment|// Transitions from COMMITTING state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
operator|new
name|CommitSucceededTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
operator|new
name|CommitFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KilledDuringCommitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|INTERNAL_REBOOT_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|JobStateInternal
operator|.
name|COMMITTING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
comment|// Transitions from SUCCEEDED state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|)
argument_list|)
comment|// Transitions from FAIL_WAIT state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
operator|new
name|JobFailWaitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_FAIL_WAIT_TIMEDOUT
argument_list|,
operator|new
name|JobFailWaitTimedOutTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KilledDuringAbortTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
comment|//Transitions from FAIL_ABORT state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
operator|new
name|JobAbortCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KilledDuringAbortTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|FAIL_ABORT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_FAIL_WAIT_TIMEDOUT
argument_list|)
argument_list|)
comment|// Transitions from KILL_ABORT state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
operator|new
name|JobAbortCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KilledDuringAbortTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|JobStateInternal
operator|.
name|KILL_ABORT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|JobStateInternal
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_START
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
comment|// No transitions from INTERNAL_ERROR state. Ignore all.
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
comment|// No transitions from AM_REBOOT state. Ignore all.
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|JobEventType
operator|.
name|JOB_UPDATED_NODES
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_SETUP_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_COMMIT_FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_ABORT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|JobEventType
operator|.
name|JOB_AM_REBOOT
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|field|stateMachine
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|stateMachine
decl_stmt|;
comment|//changing fields while the job is running
DECL|field|numMapTasks
specifier|private
name|int
name|numMapTasks
decl_stmt|;
DECL|field|numReduceTasks
specifier|private
name|int
name|numReduceTasks
decl_stmt|;
DECL|field|completedTaskCount
specifier|private
name|int
name|completedTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|succeededMapTaskCount
specifier|private
name|int
name|succeededMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|succeededReduceTaskCount
specifier|private
name|int
name|succeededReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|failedMapTaskCount
specifier|private
name|int
name|failedMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|failedReduceTaskCount
specifier|private
name|int
name|failedReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|killedMapTaskCount
specifier|private
name|int
name|killedMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|killedReduceTaskCount
specifier|private
name|int
name|killedReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|setupProgress
specifier|private
name|float
name|setupProgress
decl_stmt|;
DECL|field|mapProgress
specifier|private
name|float
name|mapProgress
decl_stmt|;
DECL|field|reduceProgress
specifier|private
name|float
name|reduceProgress
decl_stmt|;
DECL|field|cleanupProgress
specifier|private
name|float
name|cleanupProgress
decl_stmt|;
DECL|field|isUber
specifier|private
name|boolean
name|isUber
init|=
literal|false
decl_stmt|;
DECL|field|jobCredentials
specifier|private
name|Credentials
name|jobCredentials
decl_stmt|;
DECL|field|jobToken
specifier|private
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
DECL|field|jobTokenSecretManager
specifier|private
name|JobTokenSecretManager
name|jobTokenSecretManager
decl_stmt|;
DECL|field|forcedState
specifier|private
name|JobStateInternal
name|forcedState
init|=
literal|null
decl_stmt|;
comment|//Executor used for running future tasks.
DECL|field|executor
specifier|private
name|ScheduledThreadPoolExecutor
name|executor
decl_stmt|;
DECL|field|failWaitTriggerScheduledFuture
specifier|private
name|ScheduledFuture
name|failWaitTriggerScheduledFuture
decl_stmt|;
DECL|field|lastNonFinalState
specifier|private
name|JobState
name|lastNonFinalState
init|=
name|JobState
operator|.
name|NEW
decl_stmt|;
DECL|method|JobImpl (JobId jobId, ApplicationAttemptId applicationAttemptId, Configuration conf, EventHandler eventHandler, TaskAttemptListener taskAttemptListener, JobTokenSecretManager jobTokenSecretManager, Credentials jobCredentials, Clock clock, Map<TaskId, TaskInfo> completedTasksFromPreviousRun, MRAppMetrics metrics, OutputCommitter committer, boolean newApiCommitter, String userName, long appSubmitTime, List<AMInfo> amInfos, AppContext appContext, JobStateInternal forcedState, String forcedDiagnostic)
specifier|public
name|JobImpl
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|JobTokenSecretManager
name|jobTokenSecretManager
parameter_list|,
name|Credentials
name|jobCredentials
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|Map
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
name|completedTasksFromPreviousRun
parameter_list|,
name|MRAppMetrics
name|metrics
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|boolean
name|newApiCommitter
parameter_list|,
name|String
name|userName
parameter_list|,
name|long
name|appSubmitTime
parameter_list|,
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
parameter_list|,
name|AppContext
name|appContext
parameter_list|,
name|JobStateInternal
name|forcedState
parameter_list|,
name|String
name|forcedDiagnostic
parameter_list|)
block|{
name|this
operator|.
name|applicationAttemptId
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|JOB_NAME
argument_list|,
literal|"<missing job name>"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|completedTasksFromPreviousRun
operator|=
name|completedTasksFromPreviousRun
expr_stmt|;
name|this
operator|.
name|amInfos
operator|=
name|amInfos
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|this
operator|.
name|appSubmitTime
operator|=
name|appSubmitTime
expr_stmt|;
name|this
operator|.
name|oldJobId
operator|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|this
operator|.
name|committer
operator|=
name|committer
expr_stmt|;
name|this
operator|.
name|newApiCommitter
operator|=
name|newApiCommitter
expr_stmt|;
name|this
operator|.
name|taskAttemptListener
operator|=
name|taskAttemptListener
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobCredentials
operator|=
name|jobCredentials
expr_stmt|;
name|this
operator|.
name|jobTokenSecretManager
operator|=
name|jobTokenSecretManager
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|reporterUserName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"Job Fail Wait Timeout Monitor #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|executor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|forcedState
operator|=
name|forcedState
expr_stmt|;
if|if
condition|(
name|forcedDiagnostic
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|diagnostics
operator|.
name|add
argument_list|(
name|forcedDiagnostic
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxAllowedFetchFailuresFraction
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MRJobConfig
operator|.
name|MAX_ALLOWED_FETCH_FAILURES_FRACTION
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAX_ALLOWED_FETCH_FAILURES_FRACTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFetchFailuresNotifications
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAX_FETCH_FAILURES_NOTIFICATIONS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAX_FETCH_FAILURES_NOTIFICATIONS
argument_list|)
expr_stmt|;
block|}
DECL|method|getStateMachine ()
specifier|protected
name|StateMachine
argument_list|<
name|JobStateInternal
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|getStateMachine
parameter_list|()
block|{
return|return
name|stateMachine
return|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|JobId
name|getID
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
DECL|method|getEventHandler ()
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|eventHandler
return|;
block|}
DECL|method|getJobContext ()
name|JobContext
name|getJobContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobContext
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, JobACL jobOperation)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
block|{
name|AccessControlList
name|jobACL
init|=
name|jobACLs
operator|.
name|get
argument_list|(
name|jobOperation
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobACL
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|jobOperation
argument_list|,
name|userName
argument_list|,
name|jobACL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTask (TaskId taskID)
specifier|public
name|Task
name|getTask
parameter_list|(
name|TaskId
name|taskID
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|tasks
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCompletedMaps ()
specifier|public
name|int
name|getCompletedMaps
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|succeededMapTaskCount
operator|+
name|failedMapTaskCount
operator|+
name|killedMapTaskCount
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCompletedReduces ()
specifier|public
name|int
name|getCompletedReduces
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|succeededReduceTaskCount
operator|+
name|failedReduceTaskCount
operator|+
name|killedReduceTaskCount
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isUber ()
specifier|public
name|boolean
name|isUber
parameter_list|()
block|{
return|return
name|isUber
return|;
block|}
annotation|@
name|Override
DECL|method|getAllCounters ()
specifier|public
name|Counters
name|getAllCounters
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|JobStateInternal
name|state
init|=
name|getInternalState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|JobStateInternal
operator|.
name|ERROR
operator|||
name|state
operator|==
name|JobStateInternal
operator|.
name|FAILED
operator|||
name|state
operator|==
name|JobStateInternal
operator|.
name|KILLED
operator|||
name|state
operator|==
name|JobStateInternal
operator|.
name|SUCCEEDED
condition|)
block|{
name|this
operator|.
name|mayBeConstructFinalFullCounters
argument_list|()
expr_stmt|;
return|return
name|fullCounters
return|;
block|}
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|jobCounters
argument_list|)
expr_stmt|;
return|return
name|incrTaskCounters
argument_list|(
name|counters
argument_list|,
name|tasks
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrTaskCounters ( Counters counters, Collection<Task> tasks)
specifier|public
specifier|static
name|Counters
name|incrTaskCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|Collection
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
block|{
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptCompletionEvents ( int fromEventId, int maxEvents)
specifier|public
name|TaskAttemptCompletionEvent
index|[]
name|getTaskAttemptCompletionEvents
parameter_list|(
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
name|EMPTY_TASK_ATTEMPT_COMPLETION_EVENTS
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|>
name|fromEventId
condition|)
block|{
name|int
name|actualMax
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxEvents
argument_list|,
operator|(
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|-
name|fromEventId
operator|)
argument_list|)
decl_stmt|;
name|events
operator|=
name|taskAttemptCompletionEvents
operator|.
name|subList
argument_list|(
name|fromEventId
argument_list|,
name|actualMax
operator|+
name|fromEventId
argument_list|)
operator|.
name|toArray
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMapAttemptCompletionEvents ( int startIndex, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|getMapAttemptCompletionEvents
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
name|TaskCompletionEvent
index|[]
name|events
init|=
name|EMPTY_TASK_COMPLETION_EVENTS
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|mapAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|>
name|startIndex
condition|)
block|{
name|int
name|actualMax
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxEvents
argument_list|,
operator|(
name|mapAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|-
name|startIndex
operator|)
argument_list|)
decl_stmt|;
name|events
operator|=
name|mapAttemptCompletionEvents
operator|.
name|subList
argument_list|(
name|startIndex
argument_list|,
name|actualMax
operator|+
name|startIndex
argument_list|)
operator|.
name|toArray
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|diagnostics
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|JobReport
name|getReport
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|JobState
name|state
init|=
name|getState
argument_list|()
decl_stmt|;
comment|// jobFile can be null if the job is not yet inited.
name|String
name|jobFile
init|=
name|remoteJobConfFile
operator|==
literal|null
condition|?
literal|""
else|:
name|remoteJobConfFile
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|diagsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|getDiagnostics
argument_list|()
control|)
block|{
name|diagsb
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getInternalState
argument_list|()
operator|==
name|JobStateInternal
operator|.
name|NEW
condition|)
block|{
return|return
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
name|jobName
argument_list|,
name|reporterUserName
argument_list|,
name|state
argument_list|,
name|appSubmitTime
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
name|setupProgress
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|cleanupProgress
argument_list|,
name|jobFile
argument_list|,
name|amInfos
argument_list|,
name|isUber
argument_list|,
name|diagsb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|computeProgress
argument_list|()
expr_stmt|;
name|JobReport
name|report
init|=
name|MRBuilderUtils
operator|.
name|newJobReport
argument_list|(
name|jobId
argument_list|,
name|jobName
argument_list|,
name|reporterUserName
argument_list|,
name|state
argument_list|,
name|appSubmitTime
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
name|setupProgress
argument_list|,
name|this
operator|.
name|mapProgress
argument_list|,
name|this
operator|.
name|reduceProgress
argument_list|,
name|cleanupProgress
argument_list|,
name|jobFile
argument_list|,
name|amInfos
argument_list|,
name|isUber
argument_list|,
name|diagsb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|computeProgress
argument_list|()
expr_stmt|;
return|return
operator|(
name|this
operator|.
name|setupProgress
operator|*
name|this
operator|.
name|setupWeight
operator|+
name|this
operator|.
name|cleanupProgress
operator|*
name|this
operator|.
name|cleanupWeight
operator|+
name|this
operator|.
name|mapProgress
operator|*
name|this
operator|.
name|mapWeight
operator|+
name|this
operator|.
name|reduceProgress
operator|*
name|this
operator|.
name|reduceWeight
operator|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|computeProgress ()
specifier|private
name|void
name|computeProgress
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|float
name|mapProgress
init|=
literal|0f
decl_stmt|;
name|float
name|reduceProgress
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|this
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mapProgress
operator|+=
operator|(
name|task
operator|.
name|isFinished
argument_list|()
condition|?
literal|1f
else|:
name|task
operator|.
name|getProgress
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|reduceProgress
operator|+=
operator|(
name|task
operator|.
name|isFinished
argument_list|()
condition|?
literal|1f
else|:
name|task
operator|.
name|getProgress
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|numMapTasks
operator|!=
literal|0
condition|)
block|{
name|mapProgress
operator|=
name|mapProgress
operator|/
name|this
operator|.
name|numMapTasks
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|numReduceTasks
operator|!=
literal|0
condition|)
block|{
name|reduceProgress
operator|=
name|reduceProgress
operator|/
name|this
operator|.
name|numReduceTasks
expr_stmt|;
block|}
name|this
operator|.
name|mapProgress
operator|=
name|mapProgress
expr_stmt|;
name|this
operator|.
name|reduceProgress
operator|=
name|reduceProgress
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTasks ()
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|()
block|{
synchronized|synchronized
init|(
name|tasksSyncHandle
init|)
block|{
name|lazyTasksCopyNeeded
operator|=
literal|true
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tasks
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTasks (TaskType taskType)
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|localTasksCopy
init|=
name|tasks
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskId
argument_list|>
name|tasksOfGivenType
init|=
literal|null
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|==
name|taskType
condition|)
block|{
name|tasksOfGivenType
operator|=
name|mapTasks
expr_stmt|;
block|}
else|else
block|{
name|tasksOfGivenType
operator|=
name|reduceTasks
expr_stmt|;
block|}
for|for
control|(
name|TaskId
name|taskID
range|:
name|tasksOfGivenType
control|)
name|result
operator|.
name|put
argument_list|(
name|taskID
argument_list|,
name|localTasksCopy
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|JobState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|JobState
name|state
init|=
name|getExternalState
argument_list|(
name|getInternalState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appContext
operator|.
name|hasSuccessfullyUnregistered
argument_list|()
operator|&&
operator|(
name|state
operator|==
name|JobState
operator|.
name|SUCCEEDED
operator|||
name|state
operator|==
name|JobState
operator|.
name|FAILED
operator|||
name|state
operator|==
name|JobState
operator|.
name|KILLED
operator|||
name|state
operator|==
name|JobState
operator|.
name|ERROR
operator|)
condition|)
block|{
return|return
name|lastNonFinalState
return|;
block|}
else|else
block|{
return|return
name|state
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|scheduleTasks (Set<TaskId> taskIDs, boolean recoverTaskOutput)
specifier|protected
name|void
name|scheduleTasks
parameter_list|(
name|Set
argument_list|<
name|TaskId
argument_list|>
name|taskIDs
parameter_list|,
name|boolean
name|recoverTaskOutput
parameter_list|)
block|{
for|for
control|(
name|TaskId
name|taskID
range|:
name|taskIDs
control|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|completedTasksFromPreviousRun
operator|.
name|remove
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskInfo
operator|!=
literal|null
condition|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskRecoverEvent
argument_list|(
name|taskID
argument_list|,
name|taskInfo
argument_list|,
name|committer
argument_list|,
name|recoverTaskOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|taskID
argument_list|,
name|TaskEventType
operator|.
name|T_SCHEDULE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
comment|/**    * The only entry point to change the Job.    */
DECL|method|handle (JobEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getJobId
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|JobStateInternal
name|oldState
init|=
name|getInternalState
argument_list|()
decl_stmt|;
try|try
block|{
name|getStateMachine
argument_list|()
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|addDiagnostic
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on Job "
operator|+
name|this
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|jobId
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//notify the eventhandler of state change
if|if
condition|(
name|oldState
operator|!=
name|getInternalState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|jobId
operator|+
literal|"Job Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getInternalState
argument_list|()
argument_list|)
expr_stmt|;
name|rememberLastNonFinalState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rememberLastNonFinalState (JobStateInternal stateInternal)
specifier|private
name|void
name|rememberLastNonFinalState
parameter_list|(
name|JobStateInternal
name|stateInternal
parameter_list|)
block|{
name|JobState
name|state
init|=
name|getExternalState
argument_list|(
name|stateInternal
argument_list|)
decl_stmt|;
comment|// if state is not the final state, set lastNonFinalState
if|if
condition|(
name|state
operator|!=
name|JobState
operator|.
name|SUCCEEDED
operator|&&
name|state
operator|!=
name|JobState
operator|.
name|FAILED
operator|&&
name|state
operator|!=
name|JobState
operator|.
name|KILLED
operator|&&
name|state
operator|!=
name|JobState
operator|.
name|ERROR
condition|)
block|{
name|lastNonFinalState
operator|=
name|state
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|getInternalState ()
specifier|public
name|JobStateInternal
name|getInternalState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|forcedState
operator|!=
literal|null
condition|)
block|{
return|return
name|forcedState
return|;
block|}
return|return
name|getStateMachine
argument_list|()
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getExternalState (JobStateInternal smState)
specifier|private
name|JobState
name|getExternalState
parameter_list|(
name|JobStateInternal
name|smState
parameter_list|)
block|{
switch|switch
condition|(
name|smState
condition|)
block|{
case|case
name|KILL_WAIT
case|:
case|case
name|KILL_ABORT
case|:
return|return
name|JobState
operator|.
name|KILLED
return|;
case|case
name|SETUP
case|:
case|case
name|COMMITTING
case|:
return|return
name|JobState
operator|.
name|RUNNING
return|;
case|case
name|FAIL_WAIT
case|:
case|case
name|FAIL_ABORT
case|:
return|return
name|JobState
operator|.
name|FAILED
return|;
case|case
name|REBOOT
case|:
if|if
condition|(
name|appContext
operator|.
name|isLastAMRetry
argument_list|()
condition|)
block|{
return|return
name|JobState
operator|.
name|ERROR
return|;
block|}
else|else
block|{
comment|// In case of not last retry, return the external state as RUNNING since
comment|// otherwise JobClient will exit when it polls the AM for job state
return|return
name|JobState
operator|.
name|RUNNING
return|;
block|}
default|default:
return|return
name|JobState
operator|.
name|valueOf
argument_list|(
name|smState
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|//helpful in testing
DECL|method|addTask (Task task)
specifier|protected
name|void
name|addTask
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
synchronized|synchronized
init|(
name|tasksSyncHandle
init|)
block|{
if|if
condition|(
name|lazyTasksCopyNeeded
condition|)
block|{
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|newTasks
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|newTasks
operator|.
name|putAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|newTasks
expr_stmt|;
name|lazyTasksCopyNeeded
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|tasks
operator|.
name|put
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mapTasks
operator|.
name|add
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|reduceTasks
operator|.
name|add
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|waitingTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|setFinishTime ()
name|void
name|setFinishTime
parameter_list|()
block|{
name|finishTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
DECL|method|logJobHistoryFinishedEvent ()
name|void
name|logJobHistoryFinishedEvent
parameter_list|()
block|{
name|this
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobFinishedEvent
name|jfe
init|=
name|createJobFinishedEvent
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling handler for JobFinishedEvent "
argument_list|)
expr_stmt|;
name|this
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|this
operator|.
name|jobId
argument_list|,
name|jfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the default file System for this job.    * @param conf the conf object    * @return the default filesystem for this job    * @throws IOException    */
DECL|method|getFileSystem (Configuration conf)
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|checkReadyForCommit ()
specifier|protected
name|JobStateInternal
name|checkReadyForCommit
parameter_list|()
block|{
name|JobStateInternal
name|currentState
init|=
name|getInternalState
argument_list|()
decl_stmt|;
if|if
condition|(
name|completedTaskCount
operator|==
name|tasks
operator|.
name|size
argument_list|()
operator|&&
name|currentState
operator|==
name|JobStateInternal
operator|.
name|RUNNING
condition|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobCommitEvent
argument_list|(
name|jobId
argument_list|,
name|getJobContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|COMMITTING
return|;
block|}
comment|// return the current state as job not ready to commit yet
return|return
name|getInternalState
argument_list|()
return|;
block|}
DECL|method|finished (JobStateInternal finalState)
name|JobStateInternal
name|finished
parameter_list|(
name|JobStateInternal
name|finalState
parameter_list|)
block|{
if|if
condition|(
name|getInternalState
argument_list|()
operator|==
name|JobStateInternal
operator|.
name|RUNNING
condition|)
block|{
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishTime
operator|==
literal|0
condition|)
name|setFinishTime
argument_list|()
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobFinishEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|KILLED
case|:
name|metrics
operator|.
name|killedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|REBOOT
case|:
case|case
name|ERROR
case|:
case|case
name|FAILED
case|:
name|metrics
operator|.
name|failedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUCCEEDED
case|:
name|metrics
operator|.
name|completedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal job state: "
operator|+
name|finalState
argument_list|)
throw|;
block|}
return|return
name|finalState
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|setQueueName (String queueName)
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|JobQueueChangeEvent
name|jqce
init|=
operator|new
name|JobQueueChangeEvent
argument_list|(
name|oldJobId
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
name|jqce
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    * @see org.apache.hadoop.mapreduce.v2.app.job.Job#getConfFile()    */
annotation|@
name|Override
DECL|method|getConfFile ()
specifier|public
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|remoteJobConfFile
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|mapTasks
operator|.
name|size
argument_list|()
return|;
comment|//FIXME: why indirection? return numMapTasks...
comment|// unless race?  how soon can this get called?
block|}
annotation|@
name|Override
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|reduceTasks
operator|.
name|size
argument_list|()
return|;
comment|//FIXME: why indirection? return numReduceTasks
block|}
comment|/*    * (non-Javadoc)    * @see org.apache.hadoop.mapreduce.v2.app.job.Job#getJobACLs()    */
annotation|@
name|Override
DECL|method|getJobACLs ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|jobACLs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAMInfos
parameter_list|()
block|{
return|return
name|amInfos
return|;
block|}
comment|/**    * Decide whether job can be run in uber mode based on various criteria.    * @param dataInputLength Total length for all splits    */
DECL|method|makeUberDecision (long dataInputLength)
specifier|private
name|void
name|makeUberDecision
parameter_list|(
name|long
name|dataInputLength
parameter_list|)
block|{
comment|//FIXME:  need new memory criterion for uber-decision (oops, too late here;
comment|// until AM-resizing supported,
comment|// must depend on job client to pass fat-slot needs)
comment|// these are no longer "system" settings, necessarily; user may override
name|int
name|sysMaxMaps
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXMAPS
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|int
name|sysMaxReduces
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXREDUCES
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|sysMaxBytes
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXBYTES
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|this
operator|.
name|remoteJobSubmitDir
argument_list|)
argument_list|)
decl_stmt|;
comment|// FIXME: this is wrong; get FS from
comment|// [File?]InputFormat and default block size
comment|// from that
name|long
name|sysMemSizeForUberSlot
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_VMEM_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_VMEM_MB
argument_list|)
decl_stmt|;
name|long
name|sysCPUSizeForUberSlot
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_CPU_VCORES
argument_list|)
decl_stmt|;
name|boolean
name|uberEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|smallNumMapTasks
init|=
operator|(
name|numMapTasks
operator|<=
name|sysMaxMaps
operator|)
decl_stmt|;
name|boolean
name|smallNumReduceTasks
init|=
operator|(
name|numReduceTasks
operator|<=
name|sysMaxReduces
operator|)
decl_stmt|;
name|boolean
name|smallInput
init|=
operator|(
name|dataInputLength
operator|<=
name|sysMaxBytes
operator|)
decl_stmt|;
comment|// ignoring overhead due to UberAM and statics as negligible here:
name|long
name|requiredMapMB
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|requiredReduceMB
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_MB
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|requiredMB
init|=
name|Math
operator|.
name|max
argument_list|(
name|requiredMapMB
argument_list|,
name|requiredReduceMB
argument_list|)
decl_stmt|;
name|int
name|requiredMapCores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_CPU_VCORES
argument_list|)
decl_stmt|;
name|int
name|requiredReduceCores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_REDUCE_CPU_VCORES
argument_list|)
decl_stmt|;
name|int
name|requiredCores
init|=
name|Math
operator|.
name|max
argument_list|(
name|requiredMapCores
argument_list|,
name|requiredReduceCores
argument_list|)
decl_stmt|;
if|if
condition|(
name|numReduceTasks
operator|==
literal|0
condition|)
block|{
name|requiredMB
operator|=
name|requiredMapMB
expr_stmt|;
name|requiredCores
operator|=
name|requiredMapCores
expr_stmt|;
block|}
name|boolean
name|smallMemory
init|=
operator|(
name|requiredMB
operator|<=
name|sysMemSizeForUberSlot
operator|)
operator|||
operator|(
name|sysMemSizeForUberSlot
operator|==
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
operator|)
decl_stmt|;
name|boolean
name|smallCpu
init|=
name|requiredCores
operator|<=
name|sysCPUSizeForUberSlot
decl_stmt|;
name|boolean
name|notChainJob
init|=
operator|!
name|isChainJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// User has overall veto power over uberization, or user can modify
comment|// limits (overriding system settings and potentially shooting
comment|// themselves in the head).  Note that ChainMapper/Reducer are
comment|// fundamentally incompatible with MR-1220; they employ a blocking
comment|// queue between the maps/reduces and thus require parallel execution,
comment|// while "uber-AM" (MR AM + LocalContainerLauncher) loops over tasks
comment|// and thus requires sequential execution.
name|isUber
operator|=
name|uberEnabled
operator|&&
name|smallNumMapTasks
operator|&&
name|smallNumReduceTasks
operator|&&
name|smallInput
operator|&&
name|smallMemory
operator|&&
name|smallCpu
operator|&&
name|notChainJob
expr_stmt|;
if|if
condition|(
name|isUber
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Uberizing job "
operator|+
name|jobId
operator|+
literal|": "
operator|+
name|numMapTasks
operator|+
literal|"m+"
operator|+
name|numReduceTasks
operator|+
literal|"r tasks ("
operator|+
name|dataInputLength
operator|+
literal|" input bytes) will run sequentially on single node."
argument_list|)
expr_stmt|;
comment|// make sure reduces are scheduled only after all map are completed
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
comment|// uber-subtask attempts all get launched on same node; if one fails,
comment|// probably should retry elsewhere, i.e., move entire uber-AM:  ergo,
comment|// limit attempts to 1 (or at most 2?  probably not...)
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// disable speculation
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Not uberizing "
argument_list|)
operator|.
name|append
argument_list|(
name|jobId
argument_list|)
operator|.
name|append
argument_list|(
literal|" because:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uberEnabled
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" not enabled;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallNumMapTasks
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too many maps;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallNumReduceTasks
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too many reduces;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallInput
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much input;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallCpu
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much CPU;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallMemory
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much RAM;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallCpu
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much CPU;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|notChainJob
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" chainjob;"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ChainMapper and ChainReducer must execute in parallel, so they're not    * compatible with uberization/LocalContainerLauncher (100% sequential).    */
DECL|method|isChainJob (Configuration conf)
specifier|private
name|boolean
name|isChainJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|isChainJob
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|mapClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_CLASS_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapClassName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|mapClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|mapClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChainMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mapClass
argument_list|)
condition|)
name|isChainJob
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// don't care; assume it's not derived from ChainMapper
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|ignored
parameter_list|)
block|{     }
try|try
block|{
name|String
name|reduceClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_CLASS_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceClassName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|reduceClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|reduceClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChainReducer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|reduceClass
argument_list|)
condition|)
name|isChainJob
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// don't care; assume it's not derived from ChainReducer
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|ignored
parameter_list|)
block|{     }
return|return
name|isChainJob
return|;
block|}
DECL|method|actOnUnusableNode (NodeId nodeId, NodeState nodeState)
specifier|private
name|void
name|actOnUnusableNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
comment|// rerun previously successful map tasks
comment|// do this only if the job is still in the running state and there are
comment|// running reducers
if|if
condition|(
name|getInternalState
argument_list|()
operator|==
name|JobStateInternal
operator|.
name|RUNNING
operator|&&
operator|!
name|allReducersComplete
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TaskAttemptId
argument_list|>
name|taskAttemptIdList
init|=
name|nodesToSucceededTaskAttempts
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptIdList
operator|!=
literal|null
condition|)
block|{
name|String
name|mesg
init|=
literal|"TaskAttempt killed because it ran on unusable node "
operator|+
name|nodeId
decl_stmt|;
for|for
control|(
name|TaskAttemptId
name|id
range|:
name|taskAttemptIdList
control|)
block|{
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|==
name|id
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
condition|)
block|{
comment|// reschedule only map tasks because their outputs maybe unusable
name|LOG
operator|.
name|info
argument_list|(
name|mesg
operator|+
literal|". AttemptId:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptKillEvent
argument_list|(
name|id
argument_list|,
name|mesg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// currently running task attempts on unusable nodes are handled in
comment|// RMContainerAllocator
block|}
DECL|method|allReducersComplete ()
specifier|private
name|boolean
name|allReducersComplete
parameter_list|()
block|{
return|return
name|numReduceTasks
operator|==
literal|0
operator|||
name|numReduceTasks
operator|==
name|getCompletedReduces
argument_list|()
return|;
block|}
comment|/*   private int getBlockSize() {     String inputClassName = conf.get(MRJobConfig.INPUT_FORMAT_CLASS_ATTR);     if (inputClassName != null) {       Class<?> inputClass - Class.forName(inputClassName);       if (FileInputFormat<K, V>)     }   }   */
comment|/**     * Get the workflow adjacencies from the job conf     * The string returned is of the form "key"="value" "key"="value" ...     */
DECL|method|getWorkflowAdjacencies (Configuration conf)
specifier|private
specifier|static
name|String
name|getWorkflowAdjacencies
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|prefixLen
init|=
name|MRJobConfig
operator|.
name|WORKFLOW_ADJACENCY_PREFIX_STRING
operator|.
name|length
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|adjacencies
init|=
name|conf
operator|.
name|getValByRegex
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_ADJACENCY_PREFIX_PATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjacencies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|adjacencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|keyLen
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|size
operator|+=
name|keyLen
operator|-
name|prefixLen
expr_stmt|;
name|size
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|6
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|adjacencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|keyLen
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|prefixLen
argument_list|,
name|keyLen
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"=\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|escapeString (String data)
specifier|public
specifier|static
name|String
name|escapeString
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|data
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
operator|new
name|char
index|[]
block|{
literal|'"'
block|,
literal|'='
block|,
literal|'.'
block|}
argument_list|)
return|;
block|}
DECL|class|InitTransition
specifier|public
specifier|static
class|class
name|InitTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobStateInternal
argument_list|>
block|{
comment|/**      * Note that this transition method is called directly (and synchronously)      * by MRAppMaster's init() method (i.e., no RPC, no thread-switching;      * just plain sequential call within AM context), so we can trigger      * modifications in AM state from here (at least, if AM is written that      * way; MR version is).      */
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobStateInternal
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|metrics
operator|.
name|submittedJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|preparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|newApiCommitter
condition|)
block|{
name|job
operator|.
name|jobContext
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|oldJobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|jobContext
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContextImpl
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|oldJobId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|setup
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|fs
operator|=
name|job
operator|.
name|getFileSystem
argument_list|(
name|job
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|//log to job history
name|JobSubmittedEvent
name|jse
init|=
operator|new
name|JobSubmittedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
literal|"mapred"
argument_list|)
argument_list|,
name|job
operator|.
name|appSubmitTime
argument_list|,
name|job
operator|.
name|remoteJobConfFile
operator|.
name|toString
argument_list|()
argument_list|,
name|job
operator|.
name|jobACLs
argument_list|,
name|job
operator|.
name|queueName
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_ID
argument_list|,
literal|""
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_NAME
argument_list|,
literal|""
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_NODE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|,
name|getWorkflowAdjacencies
argument_list|(
name|job
operator|.
name|conf
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|WORKFLOW_TAGS
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jse
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO JH Verify jobACLs, UserName via UGI?
name|TaskSplitMetaInfo
index|[]
name|taskSplitMetaInfo
init|=
name|createSplits
argument_list|(
name|job
argument_list|,
name|job
operator|.
name|jobId
argument_list|)
decl_stmt|;
name|job
operator|.
name|numMapTasks
operator|=
name|taskSplitMetaInfo
operator|.
name|length
expr_stmt|;
name|job
operator|.
name|numReduceTasks
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|numMapTasks
operator|==
literal|0
operator|&&
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"No of maps and reduces are 0 "
operator|+
name|job
operator|.
name|jobId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|numMapTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|reduceWeight
operator|=
literal|0.9f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|mapWeight
operator|=
literal|0.9f
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|mapWeight
operator|=
name|job
operator|.
name|reduceWeight
operator|=
literal|0.45f
expr_stmt|;
block|}
name|checkTaskLimits
argument_list|()
expr_stmt|;
name|long
name|inputLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numMapTasks
condition|;
operator|++
name|i
control|)
block|{
name|inputLength
operator|+=
name|taskSplitMetaInfo
index|[
name|i
index|]
operator|.
name|getInputDataLength
argument_list|()
expr_stmt|;
block|}
name|job
operator|.
name|makeUberDecision
argument_list|(
name|inputLength
argument_list|)
expr_stmt|;
name|job
operator|.
name|taskAttemptCompletionEvents
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptCompletionEvent
argument_list|>
argument_list|(
name|job
operator|.
name|numMapTasks
operator|+
name|job
operator|.
name|numReduceTasks
operator|+
literal|10
argument_list|)
expr_stmt|;
name|job
operator|.
name|mapAttemptCompletionEvents
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskCompletionEvent
argument_list|>
argument_list|(
name|job
operator|.
name|numMapTasks
operator|+
literal|10
argument_list|)
expr_stmt|;
name|job
operator|.
name|taskCompletionIdxToMapCompletionIdx
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|job
operator|.
name|numMapTasks
operator|+
name|job
operator|.
name|numReduceTasks
operator|+
literal|10
argument_list|)
expr_stmt|;
name|job
operator|.
name|allowedMapFailuresPercent
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_FAILURES_MAX_PERCENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|allowedReduceFailuresPercent
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// create the Tasks but don't start them yet
name|createMapTasks
argument_list|(
name|job
argument_list|,
name|inputLength
argument_list|,
name|taskSplitMetaInfo
argument_list|)
expr_stmt|;
name|createReduceTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|endPreparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|INITED
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job init failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|endPreparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job init failed : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leave job in the NEW state. The MR AM will detect that the state is
comment|// not INITED and send a JOB_INIT_FAILED event.
return|return
name|JobStateInternal
operator|.
name|NEW
return|;
block|}
block|}
DECL|method|setup (JobImpl job)
specifier|protected
name|void
name|setup
parameter_list|(
name|JobImpl
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|oldJobIDString
init|=
name|job
operator|.
name|oldJobId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"startJobs: parent="
operator|+
name|path
operator|+
literal|" child="
operator|+
name|oldJobIDString
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|remoteJobSubmitDir
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
operator|.
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|oldJobIDString
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|remoteJobConfFile
operator|=
operator|new
name|Path
argument_list|(
name|job
operator|.
name|remoteJobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
expr_stmt|;
comment|// Prepare the TaskAttemptListener server for authentication of Containers
comment|// TaskAttemptListener gets the information via jobTokenSecretManager.
name|JobTokenIdentifier
name|identifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|oldJobIDString
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|jobToken
operator|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
name|job
operator|.
name|jobTokenSecretManager
argument_list|)
expr_stmt|;
name|job
operator|.
name|jobToken
operator|.
name|setService
argument_list|(
name|identifier
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add it to the jobTokenSecretManager so that TaskAttemptListener server
comment|// can authenticate containers(tasks)
name|job
operator|.
name|jobTokenSecretManager
operator|.
name|addTokenForJob
argument_list|(
name|oldJobIDString
argument_list|,
name|job
operator|.
name|jobToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding job token for "
operator|+
name|oldJobIDString
operator|+
literal|" to jobTokenSecretManager"
argument_list|)
expr_stmt|;
comment|// If the job client did not setup the shuffle secret then reuse
comment|// the job token secret for the shuffle.
if|if
condition|(
name|TokenCache
operator|.
name|getShuffleSecretKey
argument_list|(
name|job
operator|.
name|jobCredentials
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shuffle secret key missing from job credentials."
operator|+
literal|" Using job token secret as shuffle secret."
argument_list|)
expr_stmt|;
name|TokenCache
operator|.
name|setShuffleSecretKey
argument_list|(
name|job
operator|.
name|jobToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|job
operator|.
name|jobCredentials
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createMapTasks (JobImpl job, long inputLength, TaskSplitMetaInfo[] splits)
specifier|private
name|void
name|createMapTasks
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|long
name|inputLength
parameter_list|,
name|TaskSplitMetaInfo
index|[]
name|splits
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numMapTasks
condition|;
operator|++
name|i
control|)
block|{
name|TaskImpl
name|task
init|=
operator|new
name|MapTaskImpl
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|i
argument_list|,
name|job
operator|.
name|eventHandler
argument_list|,
name|job
operator|.
name|remoteJobConfFile
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|splits
index|[
name|i
index|]
argument_list|,
name|job
operator|.
name|taskAttemptListener
argument_list|,
name|job
operator|.
name|jobToken
argument_list|,
name|job
operator|.
name|jobCredentials
argument_list|,
name|job
operator|.
name|clock
argument_list|,
name|job
operator|.
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|job
operator|.
name|metrics
argument_list|,
name|job
operator|.
name|appContext
argument_list|)
decl_stmt|;
name|job
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Input size for job "
operator|+
name|job
operator|.
name|jobId
operator|+
literal|" = "
operator|+
name|inputLength
operator|+
literal|". Number of splits = "
operator|+
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createReduceTasks (JobImpl job)
specifier|private
name|void
name|createReduceTasks
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numReduceTasks
condition|;
name|i
operator|++
control|)
block|{
name|TaskImpl
name|task
init|=
operator|new
name|ReduceTaskImpl
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|i
argument_list|,
name|job
operator|.
name|eventHandler
argument_list|,
name|job
operator|.
name|remoteJobConfFile
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|numMapTasks
argument_list|,
name|job
operator|.
name|taskAttemptListener
argument_list|,
name|job
operator|.
name|jobToken
argument_list|,
name|job
operator|.
name|jobCredentials
argument_list|,
name|job
operator|.
name|clock
argument_list|,
name|job
operator|.
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|job
operator|.
name|metrics
argument_list|,
name|job
operator|.
name|appContext
argument_list|)
decl_stmt|;
name|job
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of reduces for job "
operator|+
name|job
operator|.
name|jobId
operator|+
literal|" = "
operator|+
name|job
operator|.
name|numReduceTasks
argument_list|)
expr_stmt|;
block|}
DECL|method|createSplits (JobImpl job, JobId jobId)
specifier|protected
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|TaskSplitMetaInfo
index|[]
name|allTaskSplitMetaInfo
decl_stmt|;
try|try
block|{
name|allTaskSplitMetaInfo
operator|=
name|SplitMetaInfoReader
operator|.
name|readSplitMetaInfo
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|fs
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|remoteJobSubmitDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|allTaskSplitMetaInfo
return|;
block|}
comment|/**      * If the number of tasks are greater than the configured value      * throw an exception that will fail job initialization      */
DECL|method|checkTaskLimits ()
specifier|private
name|void
name|checkTaskLimits
parameter_list|()
block|{
comment|// no code, for now
block|}
block|}
comment|// end of InitTransition
DECL|class|InitFailedTransition
specifier|private
specifier|static
class|class
name|InitFailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SetupCompletedTransition
specifier|private
specifier|static
class|class
name|SetupCompletedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|setupProgress
operator|=
literal|1.0f
expr_stmt|;
name|job
operator|.
name|scheduleTasks
argument_list|(
name|job
operator|.
name|mapTasks
argument_list|,
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|scheduleTasks
argument_list|(
name|job
operator|.
name|reduceTasks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// If we have no tasks, just transition to job completed
if|if
condition|(
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
operator|&&
name|job
operator|.
name|numMapTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SetupFailedTransition
specifier|private
specifier|static
class|class
name|SetupFailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job setup failed : "
operator|+
operator|(
operator|(
name|JobSetupFailedEvent
operator|)
name|event
operator|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StartTransition
specifier|public
specifier|static
class|class
name|StartTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
comment|/**      * This transition executes in the event-dispatcher thread, though it's      * triggered in MRAppMaster's startJobs() method.      */
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobStartEvent
name|jse
init|=
operator|(
name|JobStartEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|jse
operator|.
name|getRecoveredJobStartTime
argument_list|()
operator|!=
operator|-
literal|1L
condition|)
block|{
name|job
operator|.
name|startTime
operator|=
name|jse
operator|.
name|getRecoveredJobStartTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|startTime
operator|=
name|job
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|JobInitedEvent
name|jie
init|=
operator|new
name|JobInitedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|startTime
argument_list|,
name|job
operator|.
name|numMapTasks
argument_list|,
name|job
operator|.
name|numReduceTasks
argument_list|,
name|job
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|job
operator|.
name|isUber
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jie
argument_list|)
argument_list|)
expr_stmt|;
name|JobInfoChangeEvent
name|jice
init|=
operator|new
name|JobInfoChangeEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|appSubmitTime
argument_list|,
name|job
operator|.
name|startTime
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jice
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|runningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobSetupEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unsuccessfulFinish (JobStateInternal finalState)
specifier|private
name|void
name|unsuccessfulFinish
parameter_list|(
name|JobStateInternal
name|finalState
parameter_list|)
block|{
if|if
condition|(
name|finishTime
operator|==
literal|0
condition|)
name|setFinishTime
argument_list|()
expr_stmt|;
name|cleanupProgress
operator|=
literal|1.0f
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|unsuccessfulJobEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|oldJobId
argument_list|,
name|finishTime
argument_list|,
name|succeededMapTaskCount
argument_list|,
name|succeededReduceTaskCount
argument_list|,
name|finalState
operator|.
name|toString
argument_list|()
argument_list|,
name|diagnostics
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
name|unsuccessfulJobEvent
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
block|}
DECL|class|JobAbortCompletedTransition
specifier|private
specifier|static
class|class
name|JobAbortCompletedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobStateInternal
name|finalState
init|=
name|JobStateInternal
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|JobAbortCompletedEvent
operator|)
name|event
operator|)
operator|.
name|getFinalState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|unsuccessfulFinish
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This transition happens when a job is to be failed. It waits for all the
comment|//tasks to finish / be killed.
DECL|class|JobFailWaitTransition
specifier|private
specifier|static
class|class
name|JobFailWaitTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobStateInternal
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|failWaitTriggerScheduledFuture
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|isFinished
argument_list|()
condition|)
block|{
return|return
name|JobStateInternal
operator|.
name|FAIL_WAIT
return|;
block|}
block|}
block|}
comment|//Finished waiting. All tasks finished / were killed
name|job
operator|.
name|failWaitTriggerScheduledFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|FAIL_ABORT
return|;
block|}
block|}
comment|//This transition happens when a job to be failed times out while waiting on
comment|//tasks that had been sent the KILL signal. It is triggered by a
comment|//ScheduledFuture task queued in the executor.
DECL|class|JobFailWaitTimedOutTransition
specifier|private
specifier|static
class|class
name|JobFailWaitTimedOutTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeout expired in FAIL_WAIT waiting for tasks to get killed."
operator|+
literal|" Going to fail job anyway"
argument_list|)
expr_stmt|;
name|job
operator|.
name|failWaitTriggerScheduledFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// JobFinishedEvent triggers the move of the history file out of the staging
comment|// area. May need to create a new event type for this if JobFinished should
comment|// not be generated for KilledJobs, etc.
DECL|method|createJobFinishedEvent (JobImpl job)
specifier|private
specifier|static
name|JobFinishedEvent
name|createJobFinishedEvent
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
name|job
operator|.
name|mayBeConstructFinalFullCounters
argument_list|()
expr_stmt|;
name|JobFinishedEvent
name|jfe
init|=
operator|new
name|JobFinishedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
name|job
operator|.
name|succeededMapTaskCount
argument_list|,
name|job
operator|.
name|succeededReduceTaskCount
argument_list|,
name|job
operator|.
name|failedMapTaskCount
argument_list|,
name|job
operator|.
name|failedReduceTaskCount
argument_list|,
name|job
operator|.
name|finalMapCounters
argument_list|,
name|job
operator|.
name|finalReduceCounters
argument_list|,
name|job
operator|.
name|fullCounters
argument_list|)
decl_stmt|;
return|return
name|jfe
return|;
block|}
DECL|method|mayBeConstructFinalFullCounters ()
specifier|private
name|void
name|mayBeConstructFinalFullCounters
parameter_list|()
block|{
comment|// Calculating full-counters. This should happen only once for the job.
synchronized|synchronized
init|(
name|this
operator|.
name|fullCountersLock
init|)
block|{
if|if
condition|(
name|this
operator|.
name|fullCounters
operator|!=
literal|null
condition|)
block|{
comment|// Already constructed. Just return.
return|return;
block|}
name|this
operator|.
name|constructFinalFullcounters
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|constructFinalFullcounters ()
specifier|public
name|void
name|constructFinalFullcounters
parameter_list|()
block|{
name|this
operator|.
name|fullCounters
operator|=
operator|new
name|Counters
argument_list|()
expr_stmt|;
name|this
operator|.
name|finalMapCounters
operator|=
operator|new
name|Counters
argument_list|()
expr_stmt|;
name|this
operator|.
name|finalReduceCounters
operator|=
operator|new
name|Counters
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullCounters
operator|.
name|incrAllCounters
argument_list|(
name|jobCounters
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|t
range|:
name|this
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|Counters
name|counters
init|=
name|t
operator|.
name|getCounters
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MAP
case|:
name|this
operator|.
name|finalMapCounters
operator|.
name|incrAllCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCE
case|:
name|this
operator|.
name|finalReduceCounters
operator|.
name|incrAllCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Task type neither map nor reduce: "
operator|+
name|t
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|fullCounters
operator|.
name|incrAllCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Task-start has been moved out of InitTransition, so this arc simply
comment|// hardcodes 0 for both map and reduce finished tasks.
DECL|class|KillNewJobTransition
specifier|private
specifier|static
class|class
name|KillNewJobTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|failedEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobStateInternal
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|,
name|job
operator|.
name|diagnostics
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|failedEvent
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillInitedJobTransition
specifier|private
specifier|static
class|class
name|KillInitedJobTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job received Kill in INITED state."
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KilledDuringSetupTransition
specifier|private
specifier|static
class|class
name|KilledDuringSetupTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job received kill in SETUP state."
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillTasksTransition
specifier|private
specifier|static
class|class
name|KillTasksTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
name|JOB_KILLED_DIAG
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskAttemptCompletedEventTransition
specifier|private
specifier|static
class|class
name|TaskAttemptCompletedEventTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|TaskAttemptCompletionEvent
name|tce
init|=
operator|(
operator|(
name|JobTaskAttemptCompletedEvent
operator|)
name|event
operator|)
operator|.
name|getCompletionEvent
argument_list|()
decl_stmt|;
comment|// Add the TaskAttemptCompletionEvent
comment|//eventId is equal to index in the arraylist
name|tce
operator|.
name|setEventId
argument_list|(
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|add
argument_list|(
name|tce
argument_list|)
expr_stmt|;
name|int
name|mapEventIdx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|.
name|equals
argument_list|(
name|tce
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
condition|)
block|{
comment|// we track map completions separately from task completions because
comment|// - getMapAttemptCompletionEvents uses index ranges specific to maps
comment|// - type converting the same events over and over is expensive
name|mapEventIdx
operator|=
name|job
operator|.
name|mapAttemptCompletionEvents
operator|.
name|size
argument_list|()
expr_stmt|;
name|job
operator|.
name|mapAttemptCompletionEvents
operator|.
name|add
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|tce
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|taskCompletionIdxToMapCompletionIdx
operator|.
name|add
argument_list|(
name|mapEventIdx
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptId
init|=
name|tce
operator|.
name|getAttemptId
argument_list|()
decl_stmt|;
name|TaskId
name|taskId
init|=
name|attemptId
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
comment|//make the previous completion event as obsolete if it exists
name|Integer
name|successEventNo
init|=
name|job
operator|.
name|successAttemptCompletionEventNoMap
operator|.
name|remove
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|successEventNo
operator|!=
literal|null
condition|)
block|{
name|TaskAttemptCompletionEvent
name|successEvent
init|=
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|get
argument_list|(
name|successEventNo
argument_list|)
decl_stmt|;
name|successEvent
operator|.
name|setStatus
argument_list|(
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|)
expr_stmt|;
name|int
name|mapCompletionIdx
init|=
name|job
operator|.
name|taskCompletionIdxToMapCompletionIdx
operator|.
name|get
argument_list|(
name|successEventNo
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapCompletionIdx
operator|>=
literal|0
condition|)
block|{
comment|// update the corresponding TaskCompletionEvent for the map
name|TaskCompletionEvent
name|mapEvent
init|=
name|job
operator|.
name|mapAttemptCompletionEvents
operator|.
name|get
argument_list|(
name|mapCompletionIdx
argument_list|)
decl_stmt|;
name|job
operator|.
name|mapAttemptCompletionEvents
operator|.
name|set
argument_list|(
name|mapCompletionIdx
argument_list|,
operator|new
name|TaskCompletionEvent
argument_list|(
name|mapEvent
operator|.
name|getEventId
argument_list|()
argument_list|,
name|mapEvent
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
name|mapEvent
operator|.
name|idWithinJob
argument_list|()
argument_list|,
name|mapEvent
operator|.
name|isMapTask
argument_list|()
argument_list|,
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|OBSOLETE
argument_list|,
name|mapEvent
operator|.
name|getTaskTrackerHttp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if this attempt is not successful then why is the previous successful
comment|// attempt being removed above - MAPREDUCE-4330
if|if
condition|(
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
operator|.
name|equals
argument_list|(
name|tce
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|successAttemptCompletionEventNoMap
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|tce
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// here we could have simply called Task.getSuccessfulAttempt() but
comment|// the event that triggers this code is sent before
comment|// Task.successfulAttempt is set and so there is no guarantee that it
comment|// will be available now
name|Task
name|task
init|=
name|job
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|attempt
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|nodeId
operator|!=
literal|null
operator|)
assert|;
comment|// node must exist for a successful event
name|List
argument_list|<
name|TaskAttemptId
argument_list|>
name|taskAttemptIdList
init|=
name|job
operator|.
name|nodesToSucceededTaskAttempts
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptIdList
operator|==
literal|null
condition|)
block|{
name|taskAttemptIdList
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|()
expr_stmt|;
name|job
operator|.
name|nodesToSucceededTaskAttempts
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|taskAttemptIdList
argument_list|)
expr_stmt|;
block|}
name|taskAttemptIdList
operator|.
name|add
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TaskAttemptFetchFailureTransition
specifier|private
specifier|static
class|class
name|TaskAttemptFetchFailureTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
comment|//get number of shuffling reduces
name|int
name|shufflingReduceTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskId
name|taskId
range|:
name|job
operator|.
name|reduceTasks
control|)
block|{
name|Task
name|task
init|=
name|job
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|TaskState
operator|.
name|RUNNING
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|TaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attempt
operator|.
name|getPhase
argument_list|()
operator|==
name|Phase
operator|.
name|SHUFFLE
condition|)
block|{
name|shufflingReduceTasks
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|JobTaskAttemptFetchFailureEvent
name|fetchfailureEvent
init|=
operator|(
name|JobTaskAttemptFetchFailureEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|mapId
range|:
name|fetchfailureEvent
operator|.
name|getMaps
argument_list|()
control|)
block|{
name|Integer
name|fetchFailures
init|=
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
decl_stmt|;
name|fetchFailures
operator|=
operator|(
name|fetchFailures
operator|==
literal|null
operator|)
condition|?
literal|1
else|:
operator|(
name|fetchFailures
operator|+
literal|1
operator|)
expr_stmt|;
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|put
argument_list|(
name|mapId
argument_list|,
name|fetchFailures
argument_list|)
expr_stmt|;
name|float
name|failureRate
init|=
name|shufflingReduceTasks
operator|==
literal|0
condition|?
literal|1.0f
else|:
operator|(
name|float
operator|)
name|fetchFailures
operator|/
name|shufflingReduceTasks
decl_stmt|;
comment|// declare faulty if fetch-failures>= max-allowed-failures
if|if
condition|(
name|fetchFailures
operator|>=
name|job
operator|.
name|getMaxFetchFailuresNotifications
argument_list|()
operator|&&
name|failureRate
operator|>=
name|job
operator|.
name|getMaxAllowedFetchFailuresFraction
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Too many fetch-failures for output of task attempt: "
operator|+
name|mapId
operator|+
literal|" ... raising fetch failure to map"
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptTooManyFetchFailureEvent
argument_list|(
name|mapId
argument_list|,
name|fetchfailureEvent
operator|.
name|getReduce
argument_list|()
argument_list|,
name|fetchfailureEvent
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|remove
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|TaskCompletedTransition
specifier|private
specifier|static
class|class
name|TaskCompletedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobStateInternal
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|completedTaskCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num completed Tasks: "
operator|+
name|job
operator|.
name|completedTaskCount
argument_list|)
expr_stmt|;
name|JobTaskEvent
name|taskEvent
init|=
operator|(
name|JobTaskEvent
operator|)
name|event
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|taskEvent
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|SUCCEEDED
condition|)
block|{
name|taskSucceeded
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|FAILED
condition|)
block|{
name|taskFailed
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|KILLED
condition|)
block|{
name|taskKilled
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|checkJobAfterTaskCompletion
argument_list|(
name|job
argument_list|)
return|;
block|}
comment|//This class is used to queue a ScheduledFuture to send an event to a job
comment|//after some delay. This can be used to wait for maximum amount of time
comment|//before proceeding anyway. e.g. When a job is waiting in FAIL_WAIT for
comment|//all tasks to be killed.
DECL|class|TriggerScheduledFuture
specifier|static
class|class
name|TriggerScheduledFuture
implements|implements
name|Runnable
block|{
DECL|field|toSend
name|JobEvent
name|toSend
decl_stmt|;
DECL|field|job
name|JobImpl
name|job
decl_stmt|;
DECL|method|TriggerScheduledFuture (JobImpl job, JobEvent toSend)
name|TriggerScheduledFuture
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|toSend
parameter_list|)
block|{
name|this
operator|.
name|toSend
operator|=
name|toSend
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending event "
operator|+
name|toSend
operator|+
literal|" to "
operator|+
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|toSend
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkJobAfterTaskCompletion (JobImpl job)
specifier|protected
name|JobStateInternal
name|checkJobAfterTaskCompletion
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
comment|//check for Job failure
if|if
condition|(
name|job
operator|.
name|failedMapTaskCount
operator|*
literal|100
operator|>
name|job
operator|.
name|allowedMapFailuresPercent
operator|*
name|job
operator|.
name|numMapTasks
operator|||
name|job
operator|.
name|failedReduceTaskCount
operator|*
literal|100
operator|>
name|job
operator|.
name|allowedReduceFailuresPercent
operator|*
name|job
operator|.
name|numReduceTasks
condition|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|String
name|diagnosticMsg
init|=
literal|"Job failed as tasks failed. "
operator|+
literal|"failedMaps:"
operator|+
name|job
operator|.
name|failedMapTaskCount
operator|+
literal|" failedReduces:"
operator|+
name|job
operator|.
name|failedReduceTaskCount
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|diagnosticMsg
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
name|diagnosticMsg
argument_list|)
expr_stmt|;
comment|//Send kill signal to all unfinished tasks here.
name|boolean
name|allDone
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|allDone
operator|=
literal|false
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//If all tasks are already done, we should go directly to FAIL_ABORT
if|if
condition|(
name|allDone
condition|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|FAIL_ABORT
return|;
block|}
comment|//Set max timeout to wait for the tasks to get killed
name|job
operator|.
name|failWaitTriggerScheduledFuture
operator|=
name|job
operator|.
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|TriggerScheduledFuture
argument_list|(
name|job
argument_list|,
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_FAIL_WAIT_TIMEDOUT
argument_list|)
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_COMMITTER_CANCEL_TIMEOUT_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_COMMITTER_CANCEL_TIMEOUT_MS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|FAIL_WAIT
return|;
block|}
return|return
name|job
operator|.
name|checkReadyForCommit
argument_list|()
return|;
block|}
DECL|method|taskSucceeded (JobImpl job, Task task)
specifier|private
name|void
name|taskSucceeded
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|succeededMapTaskCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|succeededReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|completedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|taskFailed (JobImpl job, Task task)
specifier|private
name|void
name|taskFailed
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|failedMapTaskCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|job
operator|.
name|failedReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Task failed "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|failedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|taskKilled (JobImpl job, Task task)
specifier|private
name|void
name|taskKilled
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|killedMapTaskCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|job
operator|.
name|killedReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|killedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Transition class for handling jobs with no tasks
DECL|class|JobNoTasksCompletedTransition
specifier|private
specifier|static
class|class
name|JobNoTasksCompletedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobStateInternal
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
return|return
name|job
operator|.
name|checkReadyForCommit
argument_list|()
return|;
block|}
block|}
DECL|class|CommitSucceededTransition
specifier|private
specifier|static
class|class
name|CommitSucceededTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|logJobHistoryFinishedEvent
argument_list|()
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitFailedTransition
specifier|private
specifier|static
class|class
name|CommitFailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobCommitFailedEvent
name|jcfe
init|=
operator|(
name|JobCommitFailedEvent
operator|)
name|event
decl_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job commit failed: "
operator|+
name|jcfe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KilledDuringCommitTransition
specifier|private
specifier|static
class|class
name|KilledDuringCommitTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KilledDuringAbortTransition
specifier|private
specifier|static
class|class
name|KilledDuringAbortTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|unsuccessfulFinish
argument_list|(
name|JobStateInternal
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|decrementSucceededMapperCount ()
name|void
name|decrementSucceededMapperCount
parameter_list|()
block|{
name|completedTaskCount
operator|--
expr_stmt|;
name|succeededMapTaskCount
operator|--
expr_stmt|;
block|}
DECL|class|MapTaskRescheduledTransition
specifier|private
specifier|static
class|class
name|MapTaskRescheduledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
comment|//succeeded map task is restarted back
name|job
operator|.
name|decrementSucceededMapperCount
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|KillWaitTaskCompletedTransition
specifier|private
specifier|static
class|class
name|KillWaitTaskCompletedTransition
extends|extends
name|TaskCompletedTransition
block|{
annotation|@
name|Override
DECL|method|checkJobAfterTaskCompletion (JobImpl job)
specifier|protected
name|JobStateInternal
name|checkJobAfterTaskCompletion
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
if|if
condition|(
name|job
operator|.
name|completedTaskCount
operator|==
name|job
operator|.
name|tasks
operator|.
name|size
argument_list|()
condition|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterJobAbortEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|job
operator|.
name|jobContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JobStateInternal
operator|.
name|KILL_ABORT
return|;
block|}
comment|//return the current state, Job not finished yet
return|return
name|job
operator|.
name|getInternalState
argument_list|()
return|;
block|}
block|}
DECL|method|addDiagnostic (String diag)
specifier|protected
name|void
name|addDiagnostic
parameter_list|(
name|String
name|diag
parameter_list|)
block|{
name|diagnostics
operator|.
name|add
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
DECL|class|DiagnosticsUpdateTransition
specifier|private
specifier|static
class|class
name|DiagnosticsUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
operator|(
operator|(
name|JobDiagnosticsUpdateEvent
operator|)
name|event
operator|)
operator|.
name|getDiagnosticUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CounterUpdateTransition
specifier|private
specifier|static
class|class
name|CounterUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobCounterUpdateEvent
name|jce
init|=
operator|(
name|JobCounterUpdateEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|JobCounterUpdateEvent
operator|.
name|CounterIncrementalUpdate
name|ci
range|:
name|jce
operator|.
name|getCounterUpdates
argument_list|()
control|)
block|{
name|job
operator|.
name|jobCounters
operator|.
name|findCounter
argument_list|(
name|ci
operator|.
name|getCounterKey
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
name|ci
operator|.
name|getIncrementValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|UpdatedNodesTransition
specifier|private
specifier|static
class|class
name|UpdatedNodesTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobUpdatedNodesEvent
name|updateEvent
init|=
operator|(
name|JobUpdatedNodesEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|NodeReport
name|nr
range|:
name|updateEvent
operator|.
name|getUpdatedNodes
argument_list|()
control|)
block|{
name|NodeState
name|nodeState
init|=
name|nr
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeState
operator|.
name|isUnusable
argument_list|()
condition|)
block|{
comment|// act on the updates
name|job
operator|.
name|actOnUnusableNode
argument_list|(
name|nr
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|InternalTerminationTransition
specifier|private
specifier|static
class|class
name|InternalTerminationTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
DECL|field|terminationState
name|JobStateInternal
name|terminationState
init|=
literal|null
decl_stmt|;
DECL|field|jobHistoryString
name|String
name|jobHistoryString
init|=
literal|null
decl_stmt|;
DECL|method|InternalTerminationTransition (JobStateInternal stateInternal, String jobHistoryString)
specifier|public
name|InternalTerminationTransition
parameter_list|(
name|JobStateInternal
name|stateInternal
parameter_list|,
name|String
name|jobHistoryString
parameter_list|)
block|{
name|this
operator|.
name|terminationState
operator|=
name|stateInternal
expr_stmt|;
comment|//mostly a hack for jbhistoryserver
name|this
operator|.
name|jobHistoryString
operator|=
name|jobHistoryString
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
comment|//TODO Is this JH event required.
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|failedEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|jobHistoryString
argument_list|,
name|job
operator|.
name|diagnostics
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|failedEvent
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|terminationState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InternalErrorTransition
specifier|private
specifier|static
class|class
name|InternalErrorTransition
extends|extends
name|InternalTerminationTransition
block|{
DECL|method|InternalErrorTransition ()
specifier|public
name|InternalErrorTransition
parameter_list|()
block|{
name|super
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InternalRebootTransition
specifier|private
specifier|static
class|class
name|InternalRebootTransition
extends|extends
name|InternalTerminationTransition
block|{
DECL|method|InternalRebootTransition ()
specifier|public
name|InternalRebootTransition
parameter_list|()
block|{
name|super
argument_list|(
name|JobStateInternal
operator|.
name|REBOOT
argument_list|,
name|JobStateInternal
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadConfFile ()
specifier|public
name|Configuration
name|loadConfFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|confPath
init|=
name|getConfFile
argument_list|()
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|confPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Configuration
name|jobConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|addResource
argument_list|(
name|fc
operator|.
name|open
argument_list|(
name|confPath
argument_list|)
argument_list|,
name|confPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
DECL|method|getMaxAllowedFetchFailuresFraction ()
specifier|public
name|float
name|getMaxAllowedFetchFailuresFraction
parameter_list|()
block|{
return|return
name|maxAllowedFetchFailuresFraction
return|;
block|}
DECL|method|getMaxFetchFailuresNotifications ()
specifier|public
name|int
name|getMaxFetchFailuresNotifications
parameter_list|()
block|{
return|return
name|maxFetchFailuresNotifications
return|;
block|}
block|}
end_class

end_unit

