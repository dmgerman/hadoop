begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceChildJVM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInfoChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|ChainMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|chain
operator|.
name|ChainReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|SplitMetaInfoReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_comment
comment|/** Implementation of Job interface. Maintains the state machines of Job.  * The read and write calls use ReadWriteLock for concurrency.  */
end_comment

begin_class
DECL|class|JobImpl
specifier|public
class|class
name|JobImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
implements|,
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//The maximum fraction of fetch failures allowed for a map
DECL|field|MAX_ALLOWED_FETCH_FAILURES_FRACTION
specifier|private
specifier|static
specifier|final
name|double
name|MAX_ALLOWED_FETCH_FAILURES_FRACTION
init|=
literal|0.5
decl_stmt|;
comment|// Maximum no. of fetch-failure notifications after which map task is failed
DECL|field|MAX_FETCH_FAILURES_NOTIFICATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FETCH_FAILURES_NOTIFICATIONS
init|=
literal|3
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|//final fields
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|final
name|JobACLsManager
name|aclsManager
decl_stmt|;
DECL|field|username
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|jobACLs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
decl_stmt|;
DECL|field|startCount
specifier|private
specifier|final
name|int
name|startCount
decl_stmt|;
DECL|field|completedTasksFromPreviousRun
specifier|private
specifier|final
name|Set
argument_list|<
name|TaskId
argument_list|>
name|completedTasksFromPreviousRun
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|jobId
specifier|private
specifier|final
name|JobId
name|jobId
decl_stmt|;
DECL|field|jobName
specifier|private
specifier|final
name|String
name|jobName
decl_stmt|;
DECL|field|oldJobId
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|oldJobId
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
specifier|final
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|tasksSyncHandle
specifier|private
specifier|final
name|Object
name|tasksSyncHandle
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|mapTasks
specifier|private
specifier|final
name|Set
argument_list|<
name|TaskId
argument_list|>
name|mapTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTasks
specifier|private
specifier|final
name|Set
argument_list|<
name|TaskId
argument_list|>
name|reduceTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|eventHandler
specifier|private
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|MRAppMetrics
name|metrics
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|lazyTasksCopyNeeded
specifier|private
name|boolean
name|lazyTasksCopyNeeded
init|=
literal|false
decl_stmt|;
DECL|field|tasks
specifier|private
specifier|volatile
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobCounters
specifier|private
name|Counters
name|jobCounters
init|=
name|newCounters
argument_list|()
decl_stmt|;
comment|// FIXME:
comment|//
comment|// Can then replace task-level uber counters (MR-2424) with job-level ones
comment|// sent from LocalContainerLauncher, and eventually including a count of
comment|// of uber-AM attempts (probably sent from MRAppMaster).
DECL|field|conf
specifier|public
name|Configuration
name|conf
decl_stmt|;
comment|//fields initialized in init
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|remoteJobSubmitDir
specifier|private
name|Path
name|remoteJobSubmitDir
decl_stmt|;
DECL|field|remoteJobConfFile
specifier|public
name|Path
name|remoteJobConfFile
decl_stmt|;
DECL|field|jobContext
specifier|private
name|JobContext
name|jobContext
decl_stmt|;
DECL|field|committer
specifier|private
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|allowedMapFailuresPercent
specifier|private
name|int
name|allowedMapFailuresPercent
init|=
literal|0
decl_stmt|;
DECL|field|allowedReduceFailuresPercent
specifier|private
name|int
name|allowedReduceFailuresPercent
init|=
literal|0
decl_stmt|;
DECL|field|taskAttemptCompletionEvents
specifier|private
name|List
argument_list|<
name|TaskAttemptCompletionEvent
argument_list|>
name|taskAttemptCompletionEvents
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//task/attempt related datastructures
DECL|field|successAttemptCompletionEventNoMap
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Integer
argument_list|>
name|successAttemptCompletionEventNoMap
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fetchFailuresMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|Integer
argument_list|>
name|fetchFailuresMapping
init|=
operator|new
name|HashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DiagnosticsUpdateTransition
DECL|field|DIAGNOSTIC_UPDATE_TRANSITION
name|DIAGNOSTIC_UPDATE_TRANSITION
init|=
operator|new
name|DiagnosticsUpdateTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InternalErrorTransition
DECL|field|INTERNAL_ERROR_TRANSITION
name|INTERNAL_ERROR_TRANSITION
init|=
operator|new
name|InternalErrorTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TaskAttemptCompletedEventTransition
DECL|field|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
init|=
operator|new
name|TaskAttemptCompletedEventTransition
argument_list|()
decl_stmt|;
DECL|field|COUNTER_UPDATE_TRANSITION
specifier|private
specifier|static
specifier|final
name|CounterUpdateTransition
name|COUNTER_UPDATE_TRANSITION
init|=
operator|new
name|CounterUpdateTransition
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobState
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|JobImpl
argument_list|,
name|JobState
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|)
comment|// Transitions from NEW state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|,
name|JobState
operator|.
name|NEW
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|,
name|JobState
operator|.
name|NEW
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
operator|new
name|InitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillNewJobTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Transitions from INITED state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|INITED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|INITED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_START
argument_list|,
operator|new
name|StartTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillInitedJobTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|INITED
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
operator|new
name|TaskCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_COMPLETED
argument_list|,
operator|new
name|JobNoTasksCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
operator|new
name|KillTasksTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
operator|new
name|MapTaskRescheduledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
operator|new
name|TaskAttemptFetchFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|RUNNING
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Transitions from KILL_WAIT state.
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|)
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
operator|new
name|KillWaitTaskCompletedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|TASK_ATTEMPT_COMPLETED_EVENT_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|JobState
operator|.
name|KILL_WAIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
comment|// Transitions from SUCCEEDED state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|,
name|JobState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|DIAGNOSTIC_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobEventType
operator|.
name|JOB_COUNTER_UPDATE
argument_list|,
name|COUNTER_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|,
name|INTERNAL_ERROR_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|,
name|JobState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|)
argument_list|)
comment|// No transitions from INTERNAL_ERROR state. Ignore all.
operator|.
name|addTransition
argument_list|(
name|JobState
operator|.
name|ERROR
argument_list|,
name|JobState
operator|.
name|ERROR
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JobEventType
operator|.
name|JOB_INIT
argument_list|,
name|JobEventType
operator|.
name|JOB_KILL
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_COMPLETED
argument_list|,
name|JobEventType
operator|.
name|JOB_MAP_TASK_RESCHEDULED
argument_list|,
name|JobEventType
operator|.
name|JOB_DIAGNOSTIC_UPDATE
argument_list|,
name|JobEventType
operator|.
name|JOB_TASK_ATTEMPT_FETCH_FAILURE
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|field|stateMachine
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|JobState
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|stateMachine
decl_stmt|;
comment|//changing fields while the job is running
DECL|field|numMapTasks
specifier|private
name|int
name|numMapTasks
decl_stmt|;
DECL|field|numReduceTasks
specifier|private
name|int
name|numReduceTasks
decl_stmt|;
DECL|field|completedTaskCount
specifier|private
name|int
name|completedTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|succeededMapTaskCount
specifier|private
name|int
name|succeededMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|succeededReduceTaskCount
specifier|private
name|int
name|succeededReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|failedMapTaskCount
specifier|private
name|int
name|failedMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|failedReduceTaskCount
specifier|private
name|int
name|failedReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|killedMapTaskCount
specifier|private
name|int
name|killedMapTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|killedReduceTaskCount
specifier|private
name|int
name|killedReduceTaskCount
init|=
literal|0
decl_stmt|;
DECL|field|submitTime
specifier|private
name|long
name|submitTime
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|setupProgress
specifier|private
name|float
name|setupProgress
decl_stmt|;
DECL|field|cleanupProgress
specifier|private
name|float
name|cleanupProgress
decl_stmt|;
DECL|field|isUber
specifier|private
name|boolean
name|isUber
init|=
literal|false
decl_stmt|;
DECL|field|fsTokens
specifier|private
name|Credentials
name|fsTokens
decl_stmt|;
DECL|field|jobToken
specifier|private
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
DECL|field|jobTokenSecretManager
specifier|private
name|JobTokenSecretManager
name|jobTokenSecretManager
decl_stmt|;
DECL|method|JobImpl (ApplicationId appID, Configuration conf, EventHandler eventHandler, TaskAttemptListener taskAttemptListener, JobTokenSecretManager jobTokenSecretManager, Credentials fsTokenCredentials, Clock clock, int startCount, Set<TaskId> completedTasksFromPreviousRun, MRAppMetrics metrics, String userName)
specifier|public
name|JobImpl
parameter_list|(
name|ApplicationId
name|appID
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|JobTokenSecretManager
name|jobTokenSecretManager
parameter_list|,
name|Credentials
name|fsTokenCredentials
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|int
name|startCount
parameter_list|,
name|Set
argument_list|<
name|TaskId
argument_list|>
name|completedTasksFromPreviousRun
parameter_list|,
name|MRAppMetrics
name|metrics
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|JobId
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|JOB_NAME
argument_list|,
literal|"<missing job name>"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|completedTasksFromPreviousRun
operator|=
name|completedTasksFromPreviousRun
expr_stmt|;
name|this
operator|.
name|startCount
operator|=
name|startCount
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|jobId
operator|.
name|setAppId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|jobId
operator|.
name|setId
argument_list|(
name|appID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|oldJobId
operator|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job created"
operator|+
literal|" appId="
operator|+
name|appID
operator|+
literal|" jobId="
operator|+
name|jobId
operator|+
literal|" oldJobId="
operator|+
name|oldJobId
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAttemptListener
operator|=
name|taskAttemptListener
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsTokens
operator|=
name|fsTokenCredentials
expr_stmt|;
name|this
operator|.
name|jobTokenSecretManager
operator|=
name|jobTokenSecretManager
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
operator|new
name|JobACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobACLs
operator|=
name|aclsManager
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getStateMachine ()
specifier|protected
name|StateMachine
argument_list|<
name|JobState
argument_list|,
name|JobEventType
argument_list|,
name|JobEvent
argument_list|>
name|getStateMachine
parameter_list|()
block|{
return|return
name|stateMachine
return|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|JobId
name|getID
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
comment|// Getter methods that make unit testing easier (package-scoped)
DECL|method|getCommitter ()
name|OutputCommitter
name|getCommitter
parameter_list|()
block|{
return|return
name|this
operator|.
name|committer
return|;
block|}
DECL|method|getEventHandler ()
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|eventHandler
return|;
block|}
DECL|method|getJobContext ()
name|JobContext
name|getJobContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobContext
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, JobACL jobOperation)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|JobACL
name|jobOperation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|AccessControlList
name|jobACL
init|=
name|jobACLs
operator|.
name|get
argument_list|(
name|jobOperation
argument_list|)
decl_stmt|;
return|return
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|jobOperation
argument_list|,
name|username
argument_list|,
name|jobACL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTask (TaskId taskID)
specifier|public
name|Task
name|getTask
parameter_list|(
name|TaskId
name|taskID
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|tasks
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCompletedMaps ()
specifier|public
name|int
name|getCompletedMaps
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|succeededMapTaskCount
operator|+
name|failedMapTaskCount
operator|+
name|killedMapTaskCount
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCompletedReduces ()
specifier|public
name|int
name|getCompletedReduces
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|succeededReduceTaskCount
operator|+
name|failedReduceTaskCount
operator|+
name|killedReduceTaskCount
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isUber ()
specifier|public
name|boolean
name|isUber
parameter_list|()
block|{
return|return
name|isUber
return|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
name|Counters
name|counters
init|=
name|newCounters
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|incrAllCounters
argument_list|(
name|counters
argument_list|,
name|jobCounters
argument_list|)
expr_stmt|;
return|return
name|incrTaskCounters
argument_list|(
name|counters
argument_list|,
name|tasks
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTypeCounters (Set<TaskId> taskIds)
specifier|private
name|Counters
name|getTypeCounters
parameter_list|(
name|Set
argument_list|<
name|TaskId
argument_list|>
name|taskIds
parameter_list|)
block|{
name|Counters
name|counters
init|=
name|newCounters
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskId
name|taskId
range|:
name|taskIds
control|)
block|{
name|Task
name|task
init|=
name|tasks
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|incrAllCounters
argument_list|(
name|counters
argument_list|,
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
DECL|method|getMapCounters ()
specifier|private
name|Counters
name|getMapCounters
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTypeCounters
argument_list|(
name|mapTasks
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getReduceCounters ()
specifier|private
name|Counters
name|getReduceCounters
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTypeCounters
argument_list|(
name|reduceTasks
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newCounters ()
specifier|public
specifier|static
name|Counters
name|newCounters
parameter_list|()
block|{
name|Counters
name|counters
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|counters
return|;
block|}
DECL|method|incrTaskCounters (Counters counters, Collection<Task> tasks)
specifier|public
specifier|static
name|Counters
name|incrTaskCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|Collection
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
block|{
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|incrAllCounters
argument_list|(
name|counters
argument_list|,
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
DECL|method|incrAllCounters (Counters counters, Counters other)
specifier|public
specifier|static
name|void
name|incrAllCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|Counters
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CounterGroup
name|otherGroup
range|:
name|other
operator|.
name|getAllCounterGroups
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|CounterGroup
name|group
init|=
name|counters
operator|.
name|getCounterGroup
argument_list|(
name|otherGroup
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|CounterGroup
operator|.
name|class
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|otherGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|.
name|setCounterGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setDisplayName
argument_list|(
name|otherGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|otherCounter
range|:
name|otherGroup
operator|.
name|getAllCounters
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Counter
name|counter
init|=
name|group
operator|.
name|getCounter
argument_list|(
name|otherCounter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|counter
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
expr_stmt|;
name|counter
operator|.
name|setName
argument_list|(
name|otherCounter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setCounter
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
name|counter
operator|.
name|setDisplayName
argument_list|(
name|otherCounter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|setValue
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
operator|+
name|otherCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptCompletionEvents ( int fromEventId, int maxEvents)
specifier|public
name|TaskAttemptCompletionEvent
index|[]
name|getTaskAttemptCompletionEvents
parameter_list|(
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
operator|new
name|TaskAttemptCompletionEvent
index|[
literal|0
index|]
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|>
name|fromEventId
condition|)
block|{
name|int
name|actualMax
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxEvents
argument_list|,
operator|(
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
operator|-
name|fromEventId
operator|)
argument_list|)
decl_stmt|;
name|events
operator|=
name|taskAttemptCompletionEvents
operator|.
name|subList
argument_list|(
name|fromEventId
argument_list|,
name|actualMax
operator|+
name|fromEventId
argument_list|)
operator|.
name|toArray
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|diagnostics
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|JobReport
name|getReport
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|JobReport
name|report
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO - Fix to correctly setup report and to check state
if|if
condition|(
name|report
operator|.
name|getJobState
argument_list|()
operator|==
name|JobState
operator|.
name|NEW
condition|)
block|{
return|return
name|report
return|;
block|}
name|report
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSetupProgress
argument_list|(
name|setupProgress
argument_list|)
expr_stmt|;
name|report
operator|.
name|setCleanupProgress
argument_list|(
name|cleanupProgress
argument_list|)
expr_stmt|;
name|report
operator|.
name|setMapProgress
argument_list|(
name|computeProgress
argument_list|(
name|mapTasks
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setReduceProgress
argument_list|(
name|computeProgress
argument_list|(
name|reduceTasks
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|report
operator|.
name|setUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|computeProgress (Set<TaskId> taskIds)
specifier|private
name|float
name|computeProgress
parameter_list|(
name|Set
argument_list|<
name|TaskId
argument_list|>
name|taskIds
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|float
name|progress
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskId
name|taskId
range|:
name|taskIds
control|)
block|{
name|Task
name|task
init|=
name|tasks
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|progress
operator|+=
name|task
operator|.
name|getProgress
argument_list|()
expr_stmt|;
block|}
name|int
name|taskIdsSize
init|=
name|taskIds
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskIdsSize
operator|!=
literal|0
condition|)
block|{
name|progress
operator|=
name|progress
operator|/
name|taskIdsSize
expr_stmt|;
block|}
return|return
name|progress
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTasks ()
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|()
block|{
synchronized|synchronized
init|(
name|tasksSyncHandle
init|)
block|{
name|lazyTasksCopyNeeded
operator|=
literal|true
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tasks
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTasks (TaskType taskType)
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|getTasks
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|localTasksCopy
init|=
name|tasks
decl_stmt|;
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskId
argument_list|>
name|tasksOfGivenType
init|=
literal|null
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|TaskType
operator|.
name|MAP
operator|==
name|taskType
condition|)
block|{
name|tasksOfGivenType
operator|=
name|mapTasks
expr_stmt|;
block|}
else|else
block|{
name|tasksOfGivenType
operator|=
name|reduceTasks
expr_stmt|;
block|}
for|for
control|(
name|TaskId
name|taskID
range|:
name|tasksOfGivenType
control|)
name|result
operator|.
name|put
argument_list|(
name|taskID
argument_list|,
name|localTasksCopy
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|JobState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getStateMachine
argument_list|()
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|scheduleTasks (Set<TaskId> taskIDs)
specifier|protected
name|void
name|scheduleTasks
parameter_list|(
name|Set
argument_list|<
name|TaskId
argument_list|>
name|taskIDs
parameter_list|)
block|{
for|for
control|(
name|TaskId
name|taskID
range|:
name|taskIDs
control|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|taskID
argument_list|,
name|TaskEventType
operator|.
name|T_SCHEDULE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|/**    * The only entry point to change the Job.    */
DECL|method|handle (JobEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getJobId
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|JobState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|getStateMachine
argument_list|()
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|addDiagnostic
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on Job "
operator|+
name|this
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|jobId
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//notify the eventhandler of state change
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|jobId
operator|+
literal|"Job Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|//helpful in testing
DECL|method|addTask (Task task)
specifier|protected
name|void
name|addTask
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
synchronized|synchronized
init|(
name|tasksSyncHandle
init|)
block|{
if|if
condition|(
name|lazyTasksCopyNeeded
condition|)
block|{
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|newTasks
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|newTasks
operator|.
name|putAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|newTasks
expr_stmt|;
name|lazyTasksCopyNeeded
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|tasks
operator|.
name|put
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|mapTasks
operator|.
name|add
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|reduceTasks
operator|.
name|add
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|waitingTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|setFinishTime ()
name|void
name|setFinishTime
parameter_list|()
block|{
name|finishTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
DECL|method|logJobHistoryFinishedEvent ()
name|void
name|logJobHistoryFinishedEvent
parameter_list|()
block|{
name|this
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobFinishedEvent
name|jfe
init|=
name|createJobFinishedEvent
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling handler for JobFinishedEvent "
argument_list|)
expr_stmt|;
name|this
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|this
operator|.
name|jobId
argument_list|,
name|jfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkJobCompleteSuccess (JobImpl job)
specifier|static
name|JobState
name|checkJobCompleteSuccess
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
comment|// check for Job success
if|if
condition|(
name|job
operator|.
name|completedTaskCount
operator|==
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Commit job& do cleanup
name|job
operator|.
name|getCommitter
argument_list|()
operator|.
name|commitJob
argument_list|(
name|job
operator|.
name|getJobContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not do commit for Job"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|logJobHistoryFinishedEvent
argument_list|()
expr_stmt|;
return|return
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|finished (JobState finalState)
name|JobState
name|finished
parameter_list|(
name|JobState
name|finalState
parameter_list|)
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|JobState
operator|.
name|RUNNING
condition|)
block|{
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishTime
operator|==
literal|0
condition|)
name|setFinishTime
argument_list|()
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobFinishEvent
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|KILLED
case|:
name|metrics
operator|.
name|killedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|metrics
operator|.
name|failedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUCCEEDED
case|:
name|metrics
operator|.
name|completedJob
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|finalState
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/*    * (non-Javadoc)    * @see org.apache.hadoop.mapreduce.v2.app.job.Job#getConfFile()    */
annotation|@
name|Override
DECL|method|getConfFile ()
specifier|public
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|remoteJobConfFile
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|mapTasks
operator|.
name|size
argument_list|()
return|;
comment|//FIXME: why indirection? return numMapTasks...
comment|// unless race?  how soon can this get called?
block|}
annotation|@
name|Override
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|reduceTasks
operator|.
name|size
argument_list|()
return|;
comment|//FIXME: why indirection? return numReduceTasks
block|}
comment|/*    * (non-Javadoc)    * @see org.apache.hadoop.mapreduce.v2.app.job.Job#getJobACLs()    */
annotation|@
name|Override
DECL|method|getJobACLs ()
specifier|public
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|getJobACLs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|jobACLs
argument_list|)
return|;
block|}
DECL|class|InitTransition
specifier|public
specifier|static
class|class
name|InitTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobState
argument_list|>
block|{
comment|/**      * Note that this transition method is called directly (and synchronously)      * by MRAppMaster's init() method (i.e., no RPC, no thread-switching;      * just plain sequential call within AM context), so we can trigger      * modifications in AM state from here (at least, if AM is written that      * way; MR version is).      */
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobState
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|submitTime
operator|=
name|job
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|submittedJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|preparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|//log to job history
name|JobSubmittedEvent
name|jse
init|=
operator|new
name|JobSubmittedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
literal|"mapred"
argument_list|)
argument_list|,
name|job
operator|.
name|submitTime
argument_list|,
name|job
operator|.
name|remoteJobConfFile
operator|.
name|toString
argument_list|()
argument_list|,
name|job
operator|.
name|jobACLs
argument_list|,
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|,
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jse
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO JH Verify jobACLs, UserName via UGI?
name|TaskSplitMetaInfo
index|[]
name|taskSplitMetaInfo
init|=
name|createSplits
argument_list|(
name|job
argument_list|,
name|job
operator|.
name|jobId
argument_list|)
decl_stmt|;
name|job
operator|.
name|numMapTasks
operator|=
name|taskSplitMetaInfo
operator|.
name|length
expr_stmt|;
name|job
operator|.
name|numReduceTasks
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|numMapTasks
operator|==
literal|0
operator|&&
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"No of maps and reduces are 0 "
operator|+
name|job
operator|.
name|jobId
argument_list|)
expr_stmt|;
block|}
name|checkTaskLimits
argument_list|()
expr_stmt|;
name|boolean
name|newApiCommitter
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|job
operator|.
name|numReduceTasks
operator|>
literal|0
operator|&&
name|job
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
operator|||
operator|(
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
operator|&&
name|job
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
name|newApiCommitter
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using mapred newApiCommitter."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter set in config "
operator|+
name|job
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.output.committer.class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newApiCommitter
condition|)
block|{
name|job
operator|.
name|jobContext
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|oldJobId
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|attemptID
operator|.
name|setTaskId
argument_list|(
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|setJobId
argument_list|(
name|job
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|attemptID
operator|.
name|getTaskId
argument_list|()
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptID
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputFormat
name|outputFormat
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|job
operator|.
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|committer
operator|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to assign outputcommitter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|job
operator|.
name|jobContext
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContextImpl
argument_list|(
operator|new
name|JobConf
argument_list|(
name|job
operator|.
name|conf
argument_list|)
argument_list|,
name|job
operator|.
name|oldJobId
argument_list|)
expr_stmt|;
name|job
operator|.
name|committer
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|job
operator|.
name|conf
operator|.
name|getClass
argument_list|(
literal|"mapred.output.committer.class"
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
operator|.
name|class
argument_list|)
argument_list|,
name|job
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter is "
operator|+
name|job
operator|.
name|committer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|inputLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numMapTasks
condition|;
operator|++
name|i
control|)
block|{
name|inputLength
operator|+=
name|taskSplitMetaInfo
index|[
name|i
index|]
operator|.
name|getInputDataLength
argument_list|()
expr_stmt|;
block|}
comment|//FIXME:  need new memory criterion for uber-decision (oops, too late here; until AM-resizing supported, must depend on job client to pass fat-slot needs)
comment|// these are no longer "system" settings, necessarily; user may override
name|int
name|sysMaxMaps
init|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXMAPS
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|int
name|sysMaxReduces
init|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXREDUCES
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|sysMaxBytes
init|=
name|job
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_MAXBYTES
argument_list|,
name|job
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
literal|64
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
comment|//FIXME: this is wrong; get FS from [File?]InputFormat and default block size from that
comment|//long sysMemSizeForUberSlot = JobTracker.getMemSizeForReduceSlot(); // FIXME [could use default AM-container memory size...]
name|boolean
name|uberEnabled
init|=
name|job
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|smallNumMapTasks
init|=
operator|(
name|job
operator|.
name|numMapTasks
operator|<=
name|sysMaxMaps
operator|)
decl_stmt|;
name|boolean
name|smallNumReduceTasks
init|=
operator|(
name|job
operator|.
name|numReduceTasks
operator|<=
name|sysMaxReduces
operator|)
decl_stmt|;
name|boolean
name|smallInput
init|=
operator|(
name|inputLength
operator|<=
name|sysMaxBytes
operator|)
decl_stmt|;
name|boolean
name|smallMemory
init|=
literal|true
decl_stmt|;
comment|//FIXME (see above)
comment|// ignoring overhead due to UberTask and statics as negligible here:
comment|//  FIXME&& (Math.max(memoryPerMap, memoryPerReduce)<= sysMemSizeForUberSlot
comment|//              || sysMemSizeForUberSlot == JobConf.DISABLED_MEMORY_LIMIT)
name|boolean
name|notChainJob
init|=
operator|!
name|isChainJob
argument_list|(
name|job
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// User has overall veto power over uberization, or user can modify
comment|// limits (overriding system settings and potentially shooting
comment|// themselves in the head).  Note that ChainMapper/Reducer are
comment|// fundamentally incompatible with MR-1220; they employ a blocking
comment|// User has overall veto power over uberization, or user can modify
comment|// limits (overriding system settings and potentially shooting
comment|// themselves in the head).  Note that ChainMapper/Reducer are
comment|// fundamentally incompatible with MR-1220; they employ a blocking
comment|// queue between the maps/reduces and thus require parallel execution,
comment|// while "uber-AM" (MR AM + LocalContainerLauncher) loops over tasks
comment|// and thus requires sequential execution.
name|job
operator|.
name|isUber
operator|=
name|uberEnabled
operator|&&
name|smallNumMapTasks
operator|&&
name|smallNumReduceTasks
operator|&&
name|smallInput
operator|&&
name|smallMemory
operator|&&
name|notChainJob
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|isUber
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Uberizing job "
operator|+
name|job
operator|.
name|jobId
operator|+
literal|": "
operator|+
name|job
operator|.
name|numMapTasks
operator|+
literal|"m+"
operator|+
name|job
operator|.
name|numReduceTasks
operator|+
literal|"r tasks ("
operator|+
name|inputLength
operator|+
literal|" input bytes) will run sequentially on single node."
argument_list|)
expr_stmt|;
comment|//TODO: also note which node?
comment|// make sure reduces are scheduled only after all map are completed
name|job
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|MRJobConfig
operator|.
name|COMPLETED_MAPS_FOR_REDUCE_SLOWSTART
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
comment|// uber-subtask attempts all get launched on same node; if one fails,
comment|// probably should retry elsewhere, i.e., move entire uber-AM:  ergo,
comment|// limit attempts to 1 (or at most 2?  probably not...)
name|job
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// disable speculation:  makes no sense to speculate an entire job
comment|//        canSpeculateMaps = canSpeculateReduces = false; // [TODO: in old version, ultimately was from conf.getMapSpeculativeExecution(), conf.getReduceSpeculativeExecution()]
block|}
else|else
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Not uberizing "
argument_list|)
operator|.
name|append
argument_list|(
name|job
operator|.
name|jobId
argument_list|)
operator|.
name|append
argument_list|(
literal|" because:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uberEnabled
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" not enabled;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallNumMapTasks
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too many maps;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallNumReduceTasks
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too many reduces;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallInput
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much input;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallMemory
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" too much RAM;"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|notChainJob
condition|)
name|msg
operator|.
name|append
argument_list|(
literal|" chainjob"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|taskAttemptCompletionEvents
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptCompletionEvent
argument_list|>
argument_list|(
name|job
operator|.
name|numMapTasks
operator|+
name|job
operator|.
name|numReduceTasks
operator|+
literal|10
argument_list|)
expr_stmt|;
name|job
operator|.
name|allowedMapFailuresPercent
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_FAILURES_MAX_PERCENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|allowedReduceFailuresPercent
operator|=
name|job
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// do the setup
name|job
operator|.
name|committer
operator|.
name|setupJob
argument_list|(
name|job
operator|.
name|jobContext
argument_list|)
expr_stmt|;
name|job
operator|.
name|setupProgress
operator|=
literal|1.0f
expr_stmt|;
comment|// create the Tasks but don't start them yet
name|createMapTasks
argument_list|(
name|job
argument_list|,
name|inputLength
argument_list|,
name|taskSplitMetaInfo
argument_list|)
expr_stmt|;
name|createReduceTasks
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|endPreparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|JobState
operator|.
name|INITED
return|;
comment|//TODO XXX Should JobInitedEvent be generated here (instead of in StartTransition)
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job init failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job init failed : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|abortJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|endPreparingJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|)
return|;
block|}
block|}
DECL|method|setup (JobImpl job)
specifier|protected
name|void
name|setup
parameter_list|(
name|JobImpl
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|oldJobIDString
init|=
name|job
operator|.
name|oldJobId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|job
operator|.
name|conf
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG --- startJobs:"
operator|+
literal|" parent="
operator|+
name|path
operator|+
literal|" child="
operator|+
name|oldJobIDString
argument_list|)
expr_stmt|;
name|job
operator|.
name|remoteJobSubmitDir
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
operator|.
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|oldJobIDString
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|remoteJobConfFile
operator|=
operator|new
name|Path
argument_list|(
name|job
operator|.
name|remoteJobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
expr_stmt|;
comment|// Prepare the TaskAttemptListener server for authentication of Containers
comment|// TaskAttemptListener gets the information via jobTokenSecretManager.
name|JobTokenIdentifier
name|identifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|oldJobIDString
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|jobToken
operator|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
name|job
operator|.
name|jobTokenSecretManager
argument_list|)
expr_stmt|;
name|job
operator|.
name|jobToken
operator|.
name|setService
argument_list|(
name|identifier
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add it to the jobTokenSecretManager so that TaskAttemptListener server
comment|// can authenticate containers(tasks)
name|job
operator|.
name|jobTokenSecretManager
operator|.
name|addTokenForJob
argument_list|(
name|oldJobIDString
argument_list|,
name|job
operator|.
name|jobToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding job token for "
operator|+
name|oldJobIDString
operator|+
literal|" to jobTokenSecretManager"
argument_list|)
expr_stmt|;
comment|// Upload the jobTokens onto the remote FS so that ContainerManager can
comment|// localize it to be used by the Containers(tasks)
name|Credentials
name|tokenStorage
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|job
operator|.
name|jobToken
argument_list|,
name|tokenStorage
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|tokenStorage
operator|.
name|addAll
argument_list|(
name|job
operator|.
name|fsTokens
argument_list|)
expr_stmt|;
block|}
name|Path
name|remoteJobTokenFile
init|=
operator|new
name|Path
argument_list|(
name|job
operator|.
name|remoteJobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|APPLICATION_TOKENS_FILE
argument_list|)
decl_stmt|;
name|tokenStorage
operator|.
name|writeTokenStorageFile
argument_list|(
name|remoteJobTokenFile
argument_list|,
name|job
operator|.
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing back the job-token file on the remote file system:"
operator|+
name|remoteJobTokenFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * ChainMapper and ChainReducer must execute in parallel, so they're not      * compatible with uberization/LocalContainerLauncher (100% sequential).      */
DECL|method|isChainJob (Configuration conf)
name|boolean
name|isChainJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|isChainJob
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|mapClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_CLASS_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapClassName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|mapClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|mapClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChainMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mapClass
argument_list|)
condition|)
name|isChainJob
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// don't care; assume it's not derived from ChainMapper
block|}
try|try
block|{
name|String
name|reduceClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_CLASS_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceClassName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|reduceClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|reduceClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChainReducer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|reduceClass
argument_list|)
condition|)
name|isChainJob
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// don't care; assume it's not derived from ChainReducer
block|}
return|return
name|isChainJob
return|;
block|}
DECL|method|createMapTasks (JobImpl job, long inputLength, TaskSplitMetaInfo[] splits)
specifier|private
name|void
name|createMapTasks
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|long
name|inputLength
parameter_list|,
name|TaskSplitMetaInfo
index|[]
name|splits
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numMapTasks
condition|;
operator|++
name|i
control|)
block|{
name|TaskImpl
name|task
init|=
operator|new
name|MapTaskImpl
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|i
argument_list|,
name|job
operator|.
name|eventHandler
argument_list|,
name|job
operator|.
name|remoteJobConfFile
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|splits
index|[
name|i
index|]
argument_list|,
name|job
operator|.
name|taskAttemptListener
argument_list|,
name|job
operator|.
name|committer
argument_list|,
name|job
operator|.
name|jobToken
argument_list|,
name|job
operator|.
name|fsTokens
operator|.
name|getAllTokens
argument_list|()
argument_list|,
name|job
operator|.
name|clock
argument_list|,
name|job
operator|.
name|completedTasksFromPreviousRun
argument_list|,
name|job
operator|.
name|startCount
argument_list|,
name|job
operator|.
name|metrics
argument_list|)
decl_stmt|;
name|job
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Input size for job "
operator|+
name|job
operator|.
name|jobId
operator|+
literal|" = "
operator|+
name|inputLength
operator|+
literal|". Number of splits = "
operator|+
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createReduceTasks (JobImpl job)
specifier|private
name|void
name|createReduceTasks
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|numReduceTasks
condition|;
name|i
operator|++
control|)
block|{
name|TaskImpl
name|task
init|=
operator|new
name|ReduceTaskImpl
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|i
argument_list|,
name|job
operator|.
name|eventHandler
argument_list|,
name|job
operator|.
name|remoteJobConfFile
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|numMapTasks
argument_list|,
name|job
operator|.
name|taskAttemptListener
argument_list|,
name|job
operator|.
name|committer
argument_list|,
name|job
operator|.
name|jobToken
argument_list|,
name|job
operator|.
name|fsTokens
operator|.
name|getAllTokens
argument_list|()
argument_list|,
name|job
operator|.
name|clock
argument_list|,
name|job
operator|.
name|completedTasksFromPreviousRun
argument_list|,
name|job
operator|.
name|startCount
argument_list|,
name|job
operator|.
name|metrics
argument_list|)
decl_stmt|;
name|job
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of reduces for job "
operator|+
name|job
operator|.
name|jobId
operator|+
literal|" = "
operator|+
name|job
operator|.
name|numReduceTasks
argument_list|)
expr_stmt|;
block|}
DECL|method|createSplits (JobImpl job, JobId jobId)
specifier|protected
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
name|TaskSplitMetaInfo
index|[]
name|allTaskSplitMetaInfo
decl_stmt|;
try|try
block|{
name|allTaskSplitMetaInfo
operator|=
name|SplitMetaInfoReader
operator|.
name|readSplitMetaInfo
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|fs
argument_list|,
name|job
operator|.
name|conf
argument_list|,
name|job
operator|.
name|remoteJobSubmitDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|allTaskSplitMetaInfo
return|;
block|}
comment|/**      * If the number of tasks are greater than the configured value      * throw an exception that will fail job initialization      */
DECL|method|checkTaskLimits ()
specifier|private
name|void
name|checkTaskLimits
parameter_list|()
block|{
comment|// no code, for now
block|}
block|}
comment|// end of InitTransition
DECL|class|StartTransition
specifier|public
specifier|static
class|class
name|StartTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
comment|/**      * This transition executes in the event-dispatcher thread, though it's      * triggered in MRAppMaster's startJobs() method.      */
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|startTime
operator|=
name|job
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|job
operator|.
name|scheduleTasks
argument_list|(
name|job
operator|.
name|mapTasks
argument_list|)
expr_stmt|;
comment|// schedule (i.e., start) the maps
name|job
operator|.
name|scheduleTasks
argument_list|(
name|job
operator|.
name|reduceTasks
argument_list|)
expr_stmt|;
name|JobInitedEvent
name|jie
init|=
operator|new
name|JobInitedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|startTime
argument_list|,
name|job
operator|.
name|numMapTasks
argument_list|,
name|job
operator|.
name|numReduceTasks
argument_list|,
name|job
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//Will transition to state running. Currently in INITED
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jie
argument_list|)
argument_list|)
expr_stmt|;
name|JobInfoChangeEvent
name|jice
init|=
operator|new
name|JobInfoChangeEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|submitTime
argument_list|,
name|job
operator|.
name|startTime
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|jice
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|runningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// If we have no tasks, just transition to job completed
if|if
condition|(
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
operator|&&
name|job
operator|.
name|numMapTasks
operator|==
literal|0
condition|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|JobEventType
operator|.
name|JOB_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|abortJob ( org.apache.hadoop.mapreduce.JobStatus.State finalState)
specifier|private
name|void
name|abortJob
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
name|finalState
parameter_list|)
block|{
try|try
block|{
name|committer
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not abortJob"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishTime
operator|==
literal|0
condition|)
name|setFinishTime
argument_list|()
expr_stmt|;
name|cleanupProgress
operator|=
literal|1.0f
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|unsuccessfulJobEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|oldJobId
argument_list|,
name|finishTime
argument_list|,
name|succeededMapTaskCount
argument_list|,
name|succeededReduceTaskCount
argument_list|,
name|finalState
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|jobId
argument_list|,
name|unsuccessfulJobEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// JobFinishedEvent triggers the move of the history file out of the staging
comment|// area. May need to create a new event type for this if JobFinished should
comment|// not be generated for KilledJobs, etc.
DECL|method|createJobFinishedEvent (JobImpl job)
specifier|private
specifier|static
name|JobFinishedEvent
name|createJobFinishedEvent
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
name|JobFinishedEvent
name|jfe
init|=
operator|new
name|JobFinishedEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
name|job
operator|.
name|succeededMapTaskCount
argument_list|,
name|job
operator|.
name|succeededReduceTaskCount
argument_list|,
name|job
operator|.
name|failedMapTaskCount
argument_list|,
name|job
operator|.
name|failedReduceTaskCount
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|job
operator|.
name|getMapCounters
argument_list|()
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|job
operator|.
name|getReduceCounters
argument_list|()
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|jfe
return|;
block|}
comment|// Task-start has been moved out of InitTransition, so this arc simply
comment|// hardcodes 0 for both map and reduce finished tasks.
DECL|class|KillNewJobTransition
specifier|private
specifier|static
class|class
name|KillNewJobTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|failedEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|failedEvent
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillInitedJobTransition
specifier|private
specifier|static
class|class
name|KillInitedJobTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|abortJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job received Kill in INITED state."
argument_list|)
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KillTasksTransition
specifier|private
specifier|static
class|class
name|KillTasksTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Job received Kill while in RUNNING state."
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|job
operator|.
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskEvent
argument_list|(
name|task
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskEventType
operator|.
name|T_KILL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|endRunningJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskAttemptCompletedEventTransition
specifier|private
specifier|static
class|class
name|TaskAttemptCompletedEventTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|TaskAttemptCompletionEvent
name|tce
init|=
operator|(
operator|(
name|JobTaskAttemptCompletedEvent
operator|)
name|event
operator|)
operator|.
name|getCompletionEvent
argument_list|()
decl_stmt|;
comment|// Add the TaskAttemptCompletionEvent
comment|//eventId is equal to index in the arraylist
name|tce
operator|.
name|setEventId
argument_list|(
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|add
argument_list|(
name|tce
argument_list|)
expr_stmt|;
comment|//make the previous completion event as obsolete if it exists
name|Object
name|successEventNo
init|=
name|job
operator|.
name|successAttemptCompletionEventNoMap
operator|.
name|remove
argument_list|(
name|tce
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|successEventNo
operator|!=
literal|null
condition|)
block|{
name|TaskAttemptCompletionEvent
name|successEvent
init|=
name|job
operator|.
name|taskAttemptCompletionEvents
operator|.
name|get
argument_list|(
operator|(
name|Integer
operator|)
name|successEventNo
argument_list|)
decl_stmt|;
name|successEvent
operator|.
name|setStatus
argument_list|(
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
operator|.
name|equals
argument_list|(
name|tce
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|successAttemptCompletionEventNoMap
operator|.
name|put
argument_list|(
name|tce
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
name|tce
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TaskAttemptFetchFailureTransition
specifier|private
specifier|static
class|class
name|TaskAttemptFetchFailureTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobTaskAttemptFetchFailureEvent
name|fetchfailureEvent
init|=
operator|(
name|JobTaskAttemptFetchFailureEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|mapId
range|:
name|fetchfailureEvent
operator|.
name|getMaps
argument_list|()
control|)
block|{
name|Integer
name|fetchFailures
init|=
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
decl_stmt|;
name|fetchFailures
operator|=
operator|(
name|fetchFailures
operator|==
literal|null
operator|)
condition|?
literal|1
else|:
operator|(
name|fetchFailures
operator|+
literal|1
operator|)
expr_stmt|;
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|put
argument_list|(
name|mapId
argument_list|,
name|fetchFailures
argument_list|)
expr_stmt|;
comment|//get number of running reduces
name|int
name|runningReduceTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskId
name|taskId
range|:
name|job
operator|.
name|reduceTasks
control|)
block|{
if|if
condition|(
name|TaskState
operator|.
name|RUNNING
operator|.
name|equals
argument_list|(
name|job
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|runningReduceTasks
operator|++
expr_stmt|;
block|}
block|}
name|float
name|failureRate
init|=
operator|(
name|float
operator|)
name|fetchFailures
operator|/
name|runningReduceTasks
decl_stmt|;
comment|// declare faulty if fetch-failures>= max-allowed-failures
name|boolean
name|isMapFaulty
init|=
operator|(
name|failureRate
operator|>=
name|MAX_ALLOWED_FETCH_FAILURES_FRACTION
operator|)
decl_stmt|;
if|if
condition|(
name|fetchFailures
operator|>=
name|MAX_FETCH_FAILURES_NOTIFICATIONS
operator|&&
name|isMapFaulty
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Too many fetch-failures for output of task attempt: "
operator|+
name|mapId
operator|+
literal|" ... raising fetch failure to map"
argument_list|)
expr_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapId
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TOO_MANY_FETCH_FAILURE
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|fetchFailuresMapping
operator|.
name|remove
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|TaskCompletedTransition
specifier|private
specifier|static
class|class
name|TaskCompletedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobState
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|completedTaskCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num completed Tasks: "
operator|+
name|job
operator|.
name|completedTaskCount
argument_list|)
expr_stmt|;
name|JobTaskEvent
name|taskEvent
init|=
operator|(
name|JobTaskEvent
operator|)
name|event
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|taskEvent
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|SUCCEEDED
condition|)
block|{
name|taskSucceeded
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|FAILED
condition|)
block|{
name|taskFailed
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskEvent
operator|.
name|getState
argument_list|()
operator|==
name|TaskState
operator|.
name|KILLED
condition|)
block|{
name|taskKilled
argument_list|(
name|job
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|checkJobForCompletion
argument_list|(
name|job
argument_list|)
return|;
block|}
DECL|method|checkJobForCompletion (JobImpl job)
specifier|protected
name|JobState
name|checkJobForCompletion
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
comment|//check for Job failure
if|if
condition|(
name|job
operator|.
name|failedMapTaskCount
operator|*
literal|100
operator|>
name|job
operator|.
name|allowedMapFailuresPercent
operator|*
name|job
operator|.
name|numMapTasks
operator|||
name|job
operator|.
name|failedReduceTaskCount
operator|*
literal|100
operator|>
name|job
operator|.
name|allowedReduceFailuresPercent
operator|*
name|job
operator|.
name|numReduceTasks
condition|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|String
name|diagnosticMsg
init|=
literal|"Job failed as tasks failed. "
operator|+
literal|"failedMaps:"
operator|+
name|job
operator|.
name|failedMapTaskCount
operator|+
literal|" failedReduces:"
operator|+
name|job
operator|.
name|failedReduceTaskCount
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|diagnosticMsg
argument_list|)
expr_stmt|;
name|job
operator|.
name|addDiagnostic
argument_list|(
name|diagnosticMsg
argument_list|)
expr_stmt|;
name|job
operator|.
name|abortJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|)
return|;
block|}
name|JobState
name|jobCompleteSuccess
init|=
name|JobImpl
operator|.
name|checkJobCompleteSuccess
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobCompleteSuccess
operator|!=
literal|null
condition|)
block|{
return|return
name|jobCompleteSuccess
return|;
block|}
comment|//return the current state, Job not finished yet
return|return
name|job
operator|.
name|getState
argument_list|()
return|;
block|}
DECL|method|taskSucceeded (JobImpl job, Task task)
specifier|private
name|void
name|taskSucceeded
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|succeededMapTaskCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|job
operator|.
name|succeededReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|completedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|taskFailed (JobImpl job, Task task)
specifier|private
name|void
name|taskFailed
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|failedMapTaskCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|job
operator|.
name|failedReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|addDiagnostic
argument_list|(
literal|"Task failed "
operator|+
name|task
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|metrics
operator|.
name|failedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|taskKilled (JobImpl job, Task task)
specifier|private
name|void
name|taskKilled
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|job
operator|.
name|killedMapTaskCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|job
operator|.
name|killedReduceTaskCount
operator|++
expr_stmt|;
block|}
name|job
operator|.
name|metrics
operator|.
name|killedTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Transition class for handling jobs with no tasks
DECL|class|JobNoTasksCompletedTransition
specifier|static
class|class
name|JobNoTasksCompletedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|,
name|JobState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|JobState
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobState
name|jobCompleteSuccess
init|=
name|JobImpl
operator|.
name|checkJobCompleteSuccess
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobCompleteSuccess
operator|!=
literal|null
condition|)
block|{
return|return
name|jobCompleteSuccess
return|;
block|}
comment|// Return the current state, Job not finished yet
return|return
name|job
operator|.
name|getState
argument_list|()
return|;
block|}
block|}
DECL|class|MapTaskRescheduledTransition
specifier|private
specifier|static
class|class
name|MapTaskRescheduledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
comment|//succeeded map task is restarted back
name|job
operator|.
name|completedTaskCount
operator|--
expr_stmt|;
name|job
operator|.
name|succeededMapTaskCount
operator|--
expr_stmt|;
block|}
block|}
DECL|class|KillWaitTaskCompletedTransition
specifier|private
specifier|static
class|class
name|KillWaitTaskCompletedTransition
extends|extends
name|TaskCompletedTransition
block|{
annotation|@
name|Override
DECL|method|checkJobForCompletion (JobImpl job)
specifier|protected
name|JobState
name|checkJobForCompletion
parameter_list|(
name|JobImpl
name|job
parameter_list|)
block|{
if|if
condition|(
name|job
operator|.
name|completedTaskCount
operator|==
name|job
operator|.
name|tasks
operator|.
name|size
argument_list|()
condition|)
block|{
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|job
operator|.
name|abortJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|)
return|;
block|}
comment|//return the current state, Job not finished yet
return|return
name|job
operator|.
name|getState
argument_list|()
return|;
block|}
block|}
DECL|method|addDiagnostic (String diag)
specifier|private
name|void
name|addDiagnostic
parameter_list|(
name|String
name|diag
parameter_list|)
block|{
name|diagnostics
operator|.
name|add
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
DECL|class|DiagnosticsUpdateTransition
specifier|private
specifier|static
class|class
name|DiagnosticsUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|job
operator|.
name|addDiagnostic
argument_list|(
operator|(
operator|(
name|JobDiagnosticsUpdateEvent
operator|)
name|event
operator|)
operator|.
name|getDiagnosticUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CounterUpdateTransition
specifier|private
specifier|static
class|class
name|CounterUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
name|JobCounterUpdateEvent
name|jce
init|=
operator|(
name|JobCounterUpdateEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|JobCounterUpdateEvent
operator|.
name|CounterIncrementalUpdate
name|ci
range|:
name|jce
operator|.
name|getCounterUpdates
argument_list|()
control|)
block|{
name|job
operator|.
name|jobCounters
operator|.
name|incrCounter
argument_list|(
name|ci
operator|.
name|getCounterKey
argument_list|()
argument_list|,
name|ci
operator|.
name|getIncrementValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|InternalErrorTransition
specifier|private
specifier|static
class|class
name|InternalErrorTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|JobImpl
argument_list|,
name|JobEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (JobImpl job, JobEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|JobImpl
name|job
parameter_list|,
name|JobEvent
name|event
parameter_list|)
block|{
comment|//TODO Is this JH event required.
name|job
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|JobUnsuccessfulCompletionEvent
name|failedEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|job
operator|.
name|oldJobId
argument_list|,
name|job
operator|.
name|finishTime
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobState
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|jobId
argument_list|,
name|failedEvent
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|finished
argument_list|(
name|JobState
operator|.
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

