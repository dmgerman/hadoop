begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_comment
comment|// Workaround for ProgressSplitBlock being package access
end_comment

begin_class
DECL|class|WrappedProgressSplitsBlock
specifier|public
class|class
name|WrappedProgressSplitsBlock
extends|extends
name|ProgressSplitsBlock
block|{
DECL|field|wrappedProgressWallclockTime
specifier|private
name|WrappedPeriodicStatsAccumulator
name|wrappedProgressWallclockTime
decl_stmt|;
DECL|field|wrappedProgressCPUTime
specifier|private
name|WrappedPeriodicStatsAccumulator
name|wrappedProgressCPUTime
decl_stmt|;
DECL|field|wrappedProgressVirtualMemoryKbytes
specifier|private
name|WrappedPeriodicStatsAccumulator
name|wrappedProgressVirtualMemoryKbytes
decl_stmt|;
DECL|field|wrappedProgressPhysicalMemoryKbytes
specifier|private
name|WrappedPeriodicStatsAccumulator
name|wrappedProgressPhysicalMemoryKbytes
decl_stmt|;
DECL|method|WrappedProgressSplitsBlock (int numberSplits)
specifier|public
name|WrappedProgressSplitsBlock
parameter_list|(
name|int
name|numberSplits
parameter_list|)
block|{
name|super
argument_list|(
name|numberSplits
argument_list|)
expr_stmt|;
block|}
DECL|method|burst ()
specifier|public
name|int
index|[]
index|[]
name|burst
parameter_list|()
block|{
return|return
name|super
operator|.
name|burst
argument_list|()
return|;
block|}
DECL|method|getProgressWallclockTime ()
specifier|public
name|WrappedPeriodicStatsAccumulator
name|getProgressWallclockTime
parameter_list|()
block|{
if|if
condition|(
name|wrappedProgressWallclockTime
operator|==
literal|null
condition|)
block|{
name|wrappedProgressWallclockTime
operator|=
operator|new
name|WrappedPeriodicStatsAccumulator
argument_list|(
name|progressWallclockTime
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedProgressWallclockTime
return|;
block|}
DECL|method|getProgressCPUTime ()
specifier|public
name|WrappedPeriodicStatsAccumulator
name|getProgressCPUTime
parameter_list|()
block|{
if|if
condition|(
name|wrappedProgressCPUTime
operator|==
literal|null
condition|)
block|{
name|wrappedProgressCPUTime
operator|=
operator|new
name|WrappedPeriodicStatsAccumulator
argument_list|(
name|progressCPUTime
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedProgressCPUTime
return|;
block|}
DECL|method|getProgressVirtualMemoryKbytes ()
specifier|public
name|WrappedPeriodicStatsAccumulator
name|getProgressVirtualMemoryKbytes
parameter_list|()
block|{
if|if
condition|(
name|wrappedProgressVirtualMemoryKbytes
operator|==
literal|null
condition|)
block|{
name|wrappedProgressVirtualMemoryKbytes
operator|=
operator|new
name|WrappedPeriodicStatsAccumulator
argument_list|(
name|progressVirtualMemoryKbytes
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedProgressVirtualMemoryKbytes
return|;
block|}
DECL|method|getProgressPhysicalMemoryKbytes ()
specifier|public
name|WrappedPeriodicStatsAccumulator
name|getProgressPhysicalMemoryKbytes
parameter_list|()
block|{
if|if
condition|(
name|wrappedProgressPhysicalMemoryKbytes
operator|==
literal|null
condition|)
block|{
name|wrappedProgressPhysicalMemoryKbytes
operator|=
operator|new
name|WrappedPeriodicStatsAccumulator
argument_list|(
name|progressPhysicalMemoryKbytes
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedProgressPhysicalMemoryKbytes
return|;
block|}
block|}
end_class

end_unit

