begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceChildJVM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedJvmID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedProgressSplitsBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|MapAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|ReduceAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Avataar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Locality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterTaskAbortEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttemptStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerLaunchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptRecoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskTAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerRemoteLaunchEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SpeculatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Implementation of TaskAttempt interface.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TaskAttemptImpl
specifier|public
specifier|abstract
class|class
name|TaskAttemptImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
implements|,
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|EMPTY_COUNTERS
specifier|static
specifier|final
name|Counters
name|EMPTY_COUNTERS
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MEMORY_SPLITS_RESOLUTION
specifier|private
specifier|static
specifier|final
name|long
name|MEMORY_SPLITS_RESOLUTION
init|=
literal|1024
decl_stmt|;
comment|//TODO Make configurable?
DECL|field|recordFactory
specifier|private
specifier|final
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|final
name|JobConf
name|conf
decl_stmt|;
DECL|field|jobFile
specifier|protected
specifier|final
name|Path
name|jobFile
decl_stmt|;
DECL|field|partition
specifier|protected
specifier|final
name|int
name|partition
decl_stmt|;
DECL|field|eventHandler
specifier|protected
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|attemptId
specifier|private
specifier|final
name|TaskAttemptId
name|attemptId
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|oldJobId
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|oldJobId
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
specifier|final
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|resourceCapability
specifier|private
specifier|final
name|Resource
name|resourceCapability
decl_stmt|;
DECL|field|dataLocalHosts
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|dataLocalHosts
decl_stmt|;
DECL|field|dataLocalRacks
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|dataLocalRacks
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|appContext
specifier|private
specifier|final
name|AppContext
name|appContext
decl_stmt|;
DECL|field|credentials
specifier|private
name|Credentials
name|credentials
decl_stmt|;
DECL|field|jobToken
specifier|private
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
DECL|field|initialClasspathFlag
specifier|private
specifier|static
name|AtomicBoolean
name|initialClasspathFlag
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|initialClasspath
specifier|private
specifier|static
name|String
name|initialClasspath
init|=
literal|null
decl_stmt|;
DECL|field|initialAppClasspath
specifier|private
specifier|static
name|String
name|initialAppClasspath
init|=
literal|null
decl_stmt|;
DECL|field|commonContainerSpecLock
specifier|private
specifier|static
name|Object
name|commonContainerSpecLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|commonContainerSpec
specifier|private
specifier|static
name|ContainerLaunchContext
name|commonContainerSpec
init|=
literal|null
decl_stmt|;
DECL|field|classpathLock
specifier|private
specifier|static
specifier|final
name|Object
name|classpathLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|launchTime
specifier|private
name|long
name|launchTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|progressSplitBlock
specifier|private
name|WrappedProgressSplitsBlock
name|progressSplitBlock
decl_stmt|;
DECL|field|shufflePort
specifier|private
name|int
name|shufflePort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|trackerName
specifier|private
name|String
name|trackerName
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|locality
specifier|private
name|Locality
name|locality
decl_stmt|;
DECL|field|avataar
specifier|private
name|Avataar
name|avataar
decl_stmt|;
DECL|field|CLEANUP_CONTAINER_TRANSITION
specifier|private
specifier|static
specifier|final
name|CleanupContainerTransition
name|CLEANUP_CONTAINER_TRANSITION
init|=
operator|new
name|CleanupContainerTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DiagnosticInformationUpdater
DECL|field|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
init|=
operator|new
name|DiagnosticInformationUpdater
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|TaskAttemptEventType
argument_list|>
DECL|field|FAILED_KILLED_STATE_IGNORED_EVENTS
name|FAILED_KILLED_STATE_IGNORED_EVENTS
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
comment|// Container launch events can arrive late
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TOO_MANY_FETCH_FAILURE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptStateInternal
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptStateInternal
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|)
comment|// Transitions from the NEW state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_SCHEDULE
argument_list|,
operator|new
name|RequestContainerTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_RESCHEDULE
argument_list|,
operator|new
name|RequestContainerTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
operator|new
name|FailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|)
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_RECOVER
argument_list|,
operator|new
name|RecoverTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|NEW
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Transitions from the UNASSIGNED state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_ASSIGNED
argument_list|,
operator|new
name|ContainerAssignedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Transitions from the ASSIGNED state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
operator|new
name|LaunchedContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Transitions from RUNNING state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
operator|new
name|StatusUpdater
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// If no commit is required, task directly goes to success
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// If commit is required, task goes through commit pending state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
operator|new
name|CommitPendingTransition
argument_list|()
argument_list|)
comment|// Failure handling while RUNNING
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|//for handling container exit without sending the done or fail msg
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Timeout handling while RUNNING
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// if container killed by AM shutting down
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
comment|// Kill handling
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_PREEMPTED
argument_list|,
operator|new
name|PreemptedTransition
argument_list|()
argument_list|)
comment|// Transitions from COMMIT_PENDING state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
operator|new
name|StatusUpdater
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// if container killed by AM shutting down
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// AM is likely to receive duplicate TA_COMMIT_PENDINGs as the task attempt
comment|// will re-send the commit message until it doesn't encounter any
comment|// IOException and succeeds in delivering the commit message.
comment|// Ignoring the duplicate commit message is a short-term fix. In long term,
comment|// we need to make use of retry cache to help this and other MR protocol
comment|// APIs that can be considered as @AtMostOnce.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|)
comment|// Transitions from SUCCESS_CONTAINER_CLEANUP state
comment|// kill and cleanup the container
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|SucceededTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
argument_list|)
comment|// Transitions from FAIL_CONTAINER_CLEANUP state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|TaskCleanupTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
comment|// Container launch events can arrive late
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|)
argument_list|)
comment|// Transitions from KILL_CONTAINER_CLEANUP
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|TaskCleanupTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|)
argument_list|)
comment|// Transitions from FAIL_TASK_CLEANUP
comment|// run the task cleanup
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CLEANUP_DONE
argument_list|,
operator|new
name|FailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
comment|// Container launch events can arrive late
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|)
argument_list|)
comment|// Transitions from KILL_TASK_CLEANUP
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CLEANUP_DONE
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_PREEMPTED
argument_list|,
comment|// Container launch events can arrive late
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|)
argument_list|)
comment|// Transitions from SUCCEEDED
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
comment|//only possible for map attempts
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TOO_MANY_FETCH_FAILURE
argument_list|,
operator|new
name|TooManyFetchFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|)
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
operator|new
name|KilledAfterSuccessTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for SUCCEEDED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for FAILED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|,
name|FAILED_KILLED_STATE_IGNORED_EVENTS
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for KILLED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|,
name|FAILED_KILLED_STATE_IGNORED_EVENTS
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|TaskAttemptStateInternal
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|container
specifier|public
name|Container
name|container
decl_stmt|;
DECL|field|nodeRackName
specifier|private
name|String
name|nodeRackName
decl_stmt|;
DECL|field|jvmID
specifier|private
name|WrappedJvmID
name|jvmID
decl_stmt|;
comment|//this takes good amount of memory ~ 30KB. Instantiate it lazily
comment|//and make it null once task is launched.
DECL|field|remoteTask
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
name|remoteTask
decl_stmt|;
comment|//this is the last status reported by the REMOTE running attempt
DECL|field|reportedStatus
specifier|private
name|TaskAttemptStatus
name|reportedStatus
decl_stmt|;
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|method|TaskAttemptImpl (TaskId taskId, int i, EventHandler eventHandler, TaskAttemptListener taskAttemptListener, Path jobFile, int partition, JobConf conf, String[] dataLocalHosts, Token<JobTokenIdentifier> jobToken, Credentials credentials, Clock clock, AppContext appContext)
specifier|public
name|TaskAttemptImpl
parameter_list|(
name|TaskId
name|taskId
parameter_list|,
name|int
name|i
parameter_list|,
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|Path
name|jobFile
parameter_list|,
name|int
name|partition
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
index|[]
name|dataLocalHosts
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|AppContext
name|appContext
parameter_list|)
block|{
name|oldJobId
operator|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|attemptId
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
expr_stmt|;
name|attemptId
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|attemptId
operator|.
name|setId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAttemptListener
operator|=
name|taskAttemptListener
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
comment|// Initialize reportedStatus
name|reportedStatus
operator|=
operator|new
name|TaskAttemptStatus
argument_list|()
expr_stmt|;
name|initTaskAttemptStatus
argument_list|(
name|reportedStatus
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
name|this
operator|.
name|jobToken
operator|=
name|jobToken
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|this
operator|.
name|jobFile
operator|=
name|jobFile
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
comment|//TODO:create the resource reqt for this Task attempt
name|this
operator|.
name|resourceCapability
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceCapability
operator|.
name|setMemory
argument_list|(
name|getMemoryRequired
argument_list|(
name|conf
argument_list|,
name|taskId
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceCapability
operator|.
name|setVirtualCores
argument_list|(
name|getCpuRequired
argument_list|(
name|conf
argument_list|,
name|taskId
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataLocalHosts
operator|=
name|resolveHosts
argument_list|(
name|dataLocalHosts
argument_list|)
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataLocalRacks
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|this
operator|.
name|dataLocalHosts
control|)
block|{
name|this
operator|.
name|dataLocalRacks
operator|.
name|add
argument_list|(
name|RackResolver
operator|.
name|resolve
argument_list|(
name|host
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|locality
operator|=
name|Locality
operator|.
name|OFF_SWITCH
expr_stmt|;
name|avataar
operator|=
name|Avataar
operator|.
name|VIRGIN
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getMemoryRequired (JobConf conf, TaskType taskType)
specifier|private
name|int
name|getMemoryRequired
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getMemoryRequired
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskType
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCpuRequired (Configuration conf, TaskType taskType)
specifier|private
name|int
name|getCpuRequired
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|int
name|vcores
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|vcores
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_CPU_VCORES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|vcores
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_CPU_VCORES
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_REDUCE_CPU_VCORES
argument_list|)
expr_stmt|;
block|}
return|return
name|vcores
return|;
block|}
comment|/**    * Create a {@link LocalResource} record with all the given parameters.    */
DECL|method|createLocalResource (FileSystem fc, Path file, LocalResourceType type, LocalResourceVisibility visibility)
specifier|private
specifier|static
name|LocalResource
name|createLocalResource
parameter_list|(
name|FileSystem
name|fc
parameter_list|,
name|Path
name|file
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|visibility
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fstat
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|URL
name|resourceURL
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|fc
operator|.
name|resolvePath
argument_list|(
name|fstat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|resourceSize
init|=
name|fstat
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|resourceModificationTime
init|=
name|fstat
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
return|return
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|resourceURL
argument_list|,
name|type
argument_list|,
name|visibility
argument_list|,
name|resourceSize
argument_list|,
name|resourceModificationTime
argument_list|)
return|;
block|}
comment|/**    * Lock this on initialClasspath so that there is only one fork in the AM for    * getting the initial class-path. TODO: We already construct    * a parent CLC and use it for all the containers, so this should go away    * once the mr-generated-classpath stuff is gone.    */
DECL|method|getInitialClasspath (Configuration conf)
specifier|private
specifier|static
name|String
name|getInitialClasspath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|classpathLock
init|)
block|{
if|if
condition|(
name|initialClasspathFlag
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|initialClasspath
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|initialClasspath
operator|=
name|env
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|initialAppClasspath
operator|=
name|env
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|APP_CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|initialClasspathFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initialClasspath
return|;
block|}
block|}
comment|/**    * Create the common {@link ContainerLaunchContext} for all attempts.    * @param applicationACLs     */
DECL|method|createCommonContainerLaunchContext ( Map<ApplicationAccessType, String> applicationACLs, Configuration conf, Token<JobTokenIdentifier> jobToken, final org.apache.hadoop.mapred.JobID oldJobId, Credentials credentials)
specifier|private
specifier|static
name|ContainerLaunchContext
name|createCommonContainerLaunchContext
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|applicationACLs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|oldJobId
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
comment|// Application resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Application environment
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Service data
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Tokens
name|ByteBuffer
name|taskCredentialsBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|remoteFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// //////////// Set up JobJar to be localized properly on the remote NM.
name|String
name|jobJar
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobJar
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|jobJarPath
init|=
operator|new
name|Path
argument_list|(
name|jobJar
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|jobJarFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobJarPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|remoteJobJar
init|=
name|jobJarPath
operator|.
name|makeQualified
argument_list|(
name|jobJarFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|jobJarFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|LocalResource
name|rc
init|=
name|createLocalResource
argument_list|(
name|jobJarFs
argument_list|,
name|remoteJobJar
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
name|conf
operator|.
name|getPattern
argument_list|(
name|JobContext
operator|.
name|JAR_UNPACK_PATTERN
argument_list|,
name|JobConf
operator|.
name|UNPACK_JAR_PATTERN_DEFAULT
argument_list|)
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_JAR
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The job-jar file on the remote FS is "
operator|+
name|remoteJobJar
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Job jar may be null. For e.g, for pipes, the job jar is the hadoop
comment|// mapreduce jar itself which is already on the classpath.
name|LOG
operator|.
name|info
argument_list|(
literal|"Job jar is not present. "
operator|+
literal|"Not adding any jar to the list of resources."
argument_list|)
expr_stmt|;
block|}
comment|// //////////// End of JobJar setup
comment|// //////////// Set up JobConf to be localized properly on the remote NM.
name|Path
name|path
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|remoteJobSubmitDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|oldJobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|remoteJobConfPath
init|=
operator|new
name|Path
argument_list|(
name|remoteJobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|,
name|createLocalResource
argument_list|(
name|remoteFS
argument_list|,
name|remoteJobConfPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The job-conf file on the remote FS is "
operator|+
name|remoteJobConfPath
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
comment|// //////////// End of JobConf setup
comment|// Setup DistributedCache
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
comment|// Setup up task credentials buffer
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding #"
operator|+
name|credentials
operator|.
name|numberOfTokens
argument_list|()
operator|+
literal|" tokens and #"
operator|+
name|credentials
operator|.
name|numberOfSecretKeys
argument_list|()
operator|+
literal|" secret keys for NM use for launching container"
argument_list|)
expr_stmt|;
name|Credentials
name|taskCredentials
init|=
operator|new
name|Credentials
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
comment|// LocalStorageToken is needed irrespective of whether security is enabled
comment|// or not.
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|jobToken
argument_list|,
name|taskCredentials
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|containerTokens_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Size of containertokens_dob is "
operator|+
name|taskCredentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|taskCredentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|containerTokens_dob
argument_list|)
expr_stmt|;
name|taskCredentialsBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokens_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|containerTokens_dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add shuffle secret key
comment|// The secret key is converted to a JobToken to preserve backwards
comment|// compatibility with an older ShuffleHandler running on an NM.
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting shuffle token in serviceData"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|shuffleSecret
init|=
name|TokenCache
operator|.
name|getShuffleSecretKey
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|shuffleSecret
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot locate shuffle secret in credentials."
operator|+
literal|" Using job token as shuffle secret."
argument_list|)
expr_stmt|;
name|shuffleSecret
operator|=
name|jobToken
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|shuffleToken
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|jobToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|shuffleSecret
argument_list|,
name|jobToken
operator|.
name|getKind
argument_list|()
argument_list|,
name|jobToken
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeServiceData
argument_list|(
name|shuffleToken
argument_list|)
argument_list|)
expr_stmt|;
comment|// add external shuffle-providers - if any
name|Collection
argument_list|<
name|String
argument_list|>
name|shuffleProviders
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_SHUFFLE_PROVIDER_SERVICES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shuffleProviders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|auxNames
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|shuffleProvider
range|:
name|shuffleProviders
control|)
block|{
if|if
condition|(
name|shuffleProvider
operator|.
name|equals
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|)
condition|)
block|{
continue|continue;
comment|// skip built-in shuffle-provider that was already inserted with shuffle secret key
block|}
if|if
condition|(
name|auxNames
operator|.
name|contains
argument_list|(
name|shuffleProvider
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding ShuffleProvider Service: "
operator|+
name|shuffleProvider
operator|+
literal|" to serviceData"
argument_list|)
expr_stmt|;
comment|// This only serves for INIT_APP notifications
comment|// The shuffle service needs to be able to work with the host:port information provided by the AM
comment|// (i.e. shuffle services which require custom location / other configuration are not supported)
name|serviceData
operator|.
name|put
argument_list|(
name|shuffleProvider
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"ShuffleProvider Service: "
operator|+
name|shuffleProvider
operator|+
literal|" was NOT found in the list of aux-services that are available in this NM."
operator|+
literal|" You may need to specify this ShuffleProvider as an aux-service in your yarn-site.xml"
argument_list|)
throw|;
block|}
block|}
block|}
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|getInitialClasspath
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialAppClasspath
operator|!=
literal|null
condition|)
block|{
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|APP_CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|initialAppClasspath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Shell
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|SHELL
operator|.
name|name
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPRED_ADMIN_USER_SHELL
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_SHELL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add pwd to LD_LIBRARY_PATH, add this before adding anything else
name|MRApps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|LD_LIBRARY_PATH
operator|.
name|name
argument_list|()
argument_list|,
name|MRApps
operator|.
name|crossPlatformifyMREnv
argument_list|(
name|conf
argument_list|,
name|Environment
operator|.
name|PWD
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Add the env variables passed by the admin
name|MRApps
operator|.
name|setEnvFromInputString
argument_list|(
name|environment
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPRED_ADMIN_USER_ENV
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAPRED_ADMIN_USER_ENV
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Construct the actual Container
comment|// The null fields are per-container and will be constructed for each
comment|// container separately.
name|ContainerLaunchContext
name|container
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|environment
argument_list|,
literal|null
argument_list|,
name|serviceData
argument_list|,
name|taskCredentialsBuffer
argument_list|,
name|applicationACLs
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
DECL|method|createContainerLaunchContext ( Map<ApplicationAccessType, String> applicationACLs, Configuration conf, Token<JobTokenIdentifier> jobToken, Task remoteTask, final org.apache.hadoop.mapred.JobID oldJobId, WrappedJvmID jvmID, TaskAttemptListener taskAttemptListener, Credentials credentials)
specifier|static
name|ContainerLaunchContext
name|createContainerLaunchContext
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|applicationACLs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
name|Task
name|remoteTask
parameter_list|,
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|oldJobId
parameter_list|,
name|WrappedJvmID
name|jvmID
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
synchronized|synchronized
init|(
name|commonContainerSpecLock
init|)
block|{
if|if
condition|(
name|commonContainerSpec
operator|==
literal|null
condition|)
block|{
name|commonContainerSpec
operator|=
name|createCommonContainerLaunchContext
argument_list|(
name|applicationACLs
argument_list|,
name|conf
argument_list|,
name|jobToken
argument_list|,
name|oldJobId
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Fill in the fields needed per-container that are missing in the common
comment|// spec.
comment|// Setup environment by cloning from common env.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|commonContainerSpec
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|myEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|env
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|myEnv
operator|.
name|putAll
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|MapReduceChildJVM
operator|.
name|setVMEnv
argument_list|(
name|myEnv
argument_list|,
name|remoteTask
argument_list|)
expr_stmt|;
comment|// Set up the launch command
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|MapReduceChildJVM
operator|.
name|getVMCommand
argument_list|(
name|taskAttemptListener
operator|.
name|getAddress
argument_list|()
argument_list|,
name|remoteTask
argument_list|,
name|jvmID
argument_list|)
decl_stmt|;
comment|// Duplicate the ByteBuffers for access by multiple containers.
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|myServiceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|commonContainerSpec
operator|.
name|getServiceData
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|myServiceData
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Construct the actual Container
name|ContainerLaunchContext
name|container
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|commonContainerSpec
operator|.
name|getLocalResources
argument_list|()
argument_list|,
name|myEnv
argument_list|,
name|commands
argument_list|,
name|myServiceData
argument_list|,
name|commonContainerSpec
operator|.
name|getTokens
argument_list|()
operator|.
name|duplicate
argument_list|()
argument_list|,
name|applicationACLs
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerID ()
specifier|public
name|ContainerId
name|getAssignedContainerID
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|container
operator|==
literal|null
condition|?
literal|null
else|:
name|container
operator|.
name|getId
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerMgrAddress ()
specifier|public
name|String
name|getAssignedContainerMgrAddress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|container
operator|==
literal|null
condition|?
literal|null
else|:
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLaunchTime ()
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|launchTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|finishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortFinishTime ()
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|reportedStatus
operator|.
name|sortFinishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShufflePort ()
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|shufflePort
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|container
operator|==
literal|null
condition|?
literal|null
else|:
name|container
operator|.
name|getNodeId
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**If container Assigned then return the node's address, otherwise null.    */
annotation|@
name|Override
DECL|method|getNodeHttpAddress ()
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|container
operator|==
literal|null
condition|?
literal|null
else|:
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If container Assigned then return the node's rackname, otherwise null.    */
annotation|@
name|Override
DECL|method|getNodeRackName ()
specifier|public
name|String
name|getNodeRackName
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|nodeRackName
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createRemoteTask ()
specifier|protected
specifier|abstract
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
name|createRemoteTask
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskAttemptId
name|getID
parameter_list|()
block|{
return|return
name|attemptId
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// TODO: Use stateMachine level method?
return|return
operator|(
name|getInternalState
argument_list|()
operator|==
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
operator|||
name|getInternalState
argument_list|()
operator|==
name|TaskAttemptStateInternal
operator|.
name|FAILED
operator|||
name|getInternalState
argument_list|()
operator|==
name|TaskAttemptStateInternal
operator|.
name|KILLED
operator|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskAttemptReport
name|getReport
parameter_list|()
block|{
name|TaskAttemptReport
name|result
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
comment|//take the LOCAL state of attempt
comment|//DO NOT take from reportedStatus
name|result
operator|.
name|setTaskAttemptState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setProgress
argument_list|(
name|reportedStatus
operator|.
name|progress
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStartTime
argument_list|(
name|launchTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShuffleFinishTime
argument_list|(
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDiagnosticInfo
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|LINE_SEPARATOR
argument_list|,
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPhase
argument_list|(
name|reportedStatus
operator|.
name|phase
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStateString
argument_list|(
name|reportedStatus
operator|.
name|stateString
argument_list|)
expr_stmt|;
name|result
operator|.
name|setCounters
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setContainerId
argument_list|(
name|this
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNodeManagerHost
argument_list|(
name|trackerName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNodeManagerHttpPort
argument_list|(
name|httpPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|container
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setNodeManagerPort
argument_list|(
name|this
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|.
name|addAll
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Counters
name|counters
init|=
name|reportedStatus
operator|.
name|counters
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
name|counters
operator|=
name|EMPTY_COUNTERS
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|reportedStatus
operator|.
name|progress
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPhase ()
specifier|public
name|Phase
name|getPhase
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|reportedStatus
operator|.
name|phase
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskAttemptState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getExternalState
argument_list|(
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|TaskAttemptStateInternal
name|oldState
init|=
name|getInternalState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on TaskAttempt "
operator|+
name|this
operator|.
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getInternalState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|attemptId
operator|+
literal|" TaskAttempt Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getInternalState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInternalState ()
specifier|public
name|TaskAttemptStateInternal
name|getInternalState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLocality ()
specifier|public
name|Locality
name|getLocality
parameter_list|()
block|{
return|return
name|locality
return|;
block|}
DECL|method|setLocality (Locality locality)
specifier|public
name|void
name|setLocality
parameter_list|(
name|Locality
name|locality
parameter_list|)
block|{
name|this
operator|.
name|locality
operator|=
name|locality
expr_stmt|;
block|}
DECL|method|getAvataar ()
specifier|public
name|Avataar
name|getAvataar
parameter_list|()
block|{
return|return
name|avataar
return|;
block|}
DECL|method|setAvataar (Avataar avataar)
specifier|public
name|void
name|setAvataar
parameter_list|(
name|Avataar
name|avataar
parameter_list|)
block|{
name|this
operator|.
name|avataar
operator|=
name|avataar
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|recover (TaskAttemptInfo taInfo, OutputCommitter committer, boolean recoverOutput)
specifier|public
name|TaskAttemptStateInternal
name|recover
parameter_list|(
name|TaskAttemptInfo
name|taInfo
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|boolean
name|recoverOutput
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|taInfo
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|NodeId
name|containerNodeId
init|=
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|taInfo
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|taInfo
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|taInfo
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|taInfo
operator|.
name|getHttpPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// Resource/Priority/Tokens are only needed while launching the container on
comment|// an NM, these are already completed tasks, so setting them to null
name|container
operator|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|containerNodeId
argument_list|,
name|nodeHttpAddress
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|computeRackAndLocality
argument_list|()
expr_stmt|;
name|launchTime
operator|=
name|taInfo
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|finishTime
operator|=
operator|(
name|taInfo
operator|.
name|getFinishTime
argument_list|()
operator|!=
operator|-
literal|1
operator|)
condition|?
name|taInfo
operator|.
name|getFinishTime
argument_list|()
else|:
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|shufflePort
operator|=
name|taInfo
operator|.
name|getShufflePort
argument_list|()
expr_stmt|;
name|trackerName
operator|=
name|taInfo
operator|.
name|getHostname
argument_list|()
expr_stmt|;
name|httpPort
operator|=
name|taInfo
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
name|sendLaunchedEvents
argument_list|()
expr_stmt|;
name|reportedStatus
operator|.
name|id
operator|=
name|attemptId
expr_stmt|;
name|reportedStatus
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|reportedStatus
operator|.
name|counters
operator|=
name|taInfo
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|reportedStatus
operator|.
name|stateString
operator|=
name|taInfo
operator|.
name|getState
argument_list|()
expr_stmt|;
name|reportedStatus
operator|.
name|phase
operator|=
name|Phase
operator|.
name|CLEANUP
expr_stmt|;
name|reportedStatus
operator|.
name|mapFinishTime
operator|=
name|taInfo
operator|.
name|getMapFinishTime
argument_list|()
expr_stmt|;
name|reportedStatus
operator|.
name|shuffleFinishTime
operator|=
name|taInfo
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
name|reportedStatus
operator|.
name|sortFinishTime
operator|=
name|taInfo
operator|.
name|getSortFinishTime
argument_list|()
expr_stmt|;
name|addDiagnosticInfo
argument_list|(
name|taInfo
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|needToClean
init|=
literal|false
decl_stmt|;
name|String
name|recoveredState
init|=
name|taInfo
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoverOutput
operator|&&
name|TaskAttemptState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|recoveredState
argument_list|)
condition|)
block|{
name|TaskAttemptContext
name|tac
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|committer
operator|.
name|recoverTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered output from task attempt "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to recover task attempt "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task attempt "
operator|+
name|attemptId
operator|+
literal|" will be recovered as KILLED"
argument_list|)
expr_stmt|;
name|recoveredState
operator|=
name|TaskAttemptState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
expr_stmt|;
name|needToClean
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|TaskAttemptStateInternal
name|attemptState
decl_stmt|;
if|if
condition|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|recoveredState
argument_list|)
condition|)
block|{
name|attemptState
operator|=
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
expr_stmt|;
name|reportedStatus
operator|.
name|taskState
operator|=
name|TaskAttemptState
operator|.
name|SUCCEEDED
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTASucceeded
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|logAttemptFinishedEvent
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TaskAttemptState
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|recoveredState
argument_list|)
condition|)
block|{
name|attemptState
operator|=
name|TaskAttemptStateInternal
operator|.
name|FAILED
expr_stmt|;
name|reportedStatus
operator|.
name|taskState
operator|=
name|TaskAttemptState
operator|.
name|FAILED
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|this
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|TaskAttemptState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|recoveredState
argument_list|)
condition|)
block|{
if|if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|recoveredState
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TaskAttempt"
operator|+
name|attemptId
operator|+
literal|" had not completed, recovering as KILLED"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"TaskAttempt "
operator|+
name|attemptId
operator|+
literal|" found in unexpected state "
operator|+
name|recoveredState
operator|+
literal|", recovering as KILLED"
argument_list|)
expr_stmt|;
block|}
name|addDiagnosticInfo
argument_list|(
literal|"Killed during application recovery"
argument_list|)
expr_stmt|;
name|needToClean
operator|=
literal|true
expr_stmt|;
block|}
name|attemptState
operator|=
name|TaskAttemptStateInternal
operator|.
name|KILLED
expr_stmt|;
name|reportedStatus
operator|.
name|taskState
operator|=
name|TaskAttemptState
operator|.
name|KILLED
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAKilled
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|this
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needToClean
condition|)
block|{
name|TaskAttemptContext
name|tac
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|committer
operator|.
name|abortTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Task cleanup failed for attempt "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attemptState
return|;
block|}
DECL|method|getExternalState ( TaskAttemptStateInternal smState)
specifier|private
specifier|static
name|TaskAttemptState
name|getExternalState
parameter_list|(
name|TaskAttemptStateInternal
name|smState
parameter_list|)
block|{
switch|switch
condition|(
name|smState
condition|)
block|{
case|case
name|ASSIGNED
case|:
case|case
name|UNASSIGNED
case|:
return|return
name|TaskAttemptState
operator|.
name|STARTING
return|;
case|case
name|COMMIT_PENDING
case|:
return|return
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
return|;
case|case
name|FAILED
case|:
return|return
name|TaskAttemptState
operator|.
name|FAILED
return|;
case|case
name|KILLED
case|:
return|return
name|TaskAttemptState
operator|.
name|KILLED
return|;
comment|// All CLEANUP states considered as RUNNING since events have not gone out
comment|// to the Task yet. May be possible to consider them as a Finished state.
case|case
name|FAIL_CONTAINER_CLEANUP
case|:
case|case
name|FAIL_TASK_CLEANUP
case|:
case|case
name|KILL_CONTAINER_CLEANUP
case|:
case|case
name|KILL_TASK_CLEANUP
case|:
case|case
name|SUCCESS_CONTAINER_CLEANUP
case|:
case|case
name|RUNNING
case|:
return|return
name|TaskAttemptState
operator|.
name|RUNNING
return|;
case|case
name|NEW
case|:
return|return
name|TaskAttemptState
operator|.
name|NEW
return|;
case|case
name|SUCCEEDED
case|:
return|return
name|TaskAttemptState
operator|.
name|SUCCEEDED
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Attempt to convert invalid "
operator|+
literal|"stateMachineTaskAttemptState to externalTaskAttemptState: "
operator|+
name|smState
argument_list|)
throw|;
block|}
block|}
comment|//always called in write lock
DECL|method|setFinishTime ()
specifier|private
name|void
name|setFinishTime
parameter_list|()
block|{
comment|//set the finish time only if launch time is set
if|if
condition|(
name|launchTime
operator|!=
literal|0
condition|)
block|{
name|finishTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|computeRackAndLocality ()
specifier|private
name|void
name|computeRackAndLocality
parameter_list|()
block|{
name|NodeId
name|containerNodeId
init|=
name|container
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|nodeRackName
operator|=
name|RackResolver
operator|.
name|resolve
argument_list|(
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
expr_stmt|;
name|locality
operator|=
name|Locality
operator|.
name|OFF_SWITCH
expr_stmt|;
if|if
condition|(
name|dataLocalHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|cHost
init|=
name|resolveHost
argument_list|(
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLocalHosts
operator|.
name|contains
argument_list|(
name|cHost
argument_list|)
condition|)
block|{
name|locality
operator|=
name|Locality
operator|.
name|NODE_LOCAL
expr_stmt|;
block|}
block|}
if|if
condition|(
name|locality
operator|==
name|Locality
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|dataLocalRacks
operator|.
name|contains
argument_list|(
name|nodeRackName
argument_list|)
condition|)
block|{
name|locality
operator|=
name|Locality
operator|.
name|RACK_LOCAL
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateMillisCounters (JobCounterUpdateEvent jce, TaskAttemptImpl taskAttempt)
specifier|private
specifier|static
name|void
name|updateMillisCounters
parameter_list|(
name|JobCounterUpdateEvent
name|jce
parameter_list|,
name|TaskAttemptImpl
name|taskAttempt
parameter_list|)
block|{
name|TaskType
name|taskType
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
operator|(
name|taskAttempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|)
decl_stmt|;
name|int
name|mbRequired
init|=
name|taskAttempt
operator|.
name|getMemoryRequired
argument_list|(
name|taskAttempt
operator|.
name|conf
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
name|int
name|vcoresRequired
init|=
name|taskAttempt
operator|.
name|getCpuRequired
argument_list|(
name|taskAttempt
operator|.
name|conf
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
name|int
name|minSlotMemSize
init|=
name|taskAttempt
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|int
name|simSlotsRequired
init|=
name|minSlotMemSize
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|float
operator|)
name|mbRequired
operator|/
name|minSlotMemSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|,
name|simSlotsRequired
operator|*
name|duration
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|MB_MILLIS_MAPS
argument_list|,
name|duration
operator|*
name|mbRequired
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|VCORES_MILLIS_MAPS
argument_list|,
name|duration
operator|*
name|vcoresRequired
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|MILLIS_MAPS
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_REDUCES
argument_list|,
name|simSlotsRequired
operator|*
name|duration
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|MB_MILLIS_REDUCES
argument_list|,
name|duration
operator|*
name|mbRequired
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|VCORES_MILLIS_REDUCES
argument_list|,
name|duration
operator|*
name|vcoresRequired
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|MILLIS_REDUCES
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJobCounterUpdateEventTASucceeded ( TaskAttemptImpl taskAttempt)
specifier|private
specifier|static
name|JobCounterUpdateEvent
name|createJobCounterUpdateEventTASucceeded
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|)
block|{
name|TaskId
name|taskId
init|=
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|updateMillisCounters
argument_list|(
name|jce
argument_list|,
name|taskAttempt
argument_list|)
expr_stmt|;
return|return
name|jce
return|;
block|}
DECL|method|createJobCounterUpdateEventTAFailed ( TaskAttemptImpl taskAttempt, boolean taskAlreadyCompleted)
specifier|private
specifier|static
name|JobCounterUpdateEvent
name|createJobCounterUpdateEventTAFailed
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|boolean
name|taskAlreadyCompleted
parameter_list|)
block|{
name|TaskType
name|taskType
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|taskAlreadyCompleted
condition|)
block|{
name|updateMillisCounters
argument_list|(
name|jce
argument_list|,
name|taskAttempt
argument_list|)
expr_stmt|;
block|}
return|return
name|jce
return|;
block|}
DECL|method|createJobCounterUpdateEventTAKilled ( TaskAttemptImpl taskAttempt, boolean taskAlreadyCompleted)
specifier|private
specifier|static
name|JobCounterUpdateEvent
name|createJobCounterUpdateEventTAKilled
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|boolean
name|taskAlreadyCompleted
parameter_list|)
block|{
name|TaskType
name|taskType
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_KILLED_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_KILLED_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|taskAlreadyCompleted
condition|)
block|{
name|updateMillisCounters
argument_list|(
name|jce
argument_list|,
name|taskAttempt
argument_list|)
expr_stmt|;
block|}
return|return
name|jce
return|;
block|}
specifier|private
specifier|static
name|TaskAttemptUnsuccessfulCompletionEvent
DECL|method|createTaskAttemptUnsuccessfulCompletionEvent (TaskAttemptImpl taskAttempt, TaskAttemptStateInternal attemptState)
name|createTaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptStateInternal
name|attemptState
parameter_list|)
block|{
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
operator|new
name|TaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|attemptState
operator|.
name|toString
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|finishTime
argument_list|,
name|taskAttempt
operator|.
name|container
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|taskAttempt
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|container
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|taskAttempt
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|nodeRackName
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|taskAttempt
operator|.
name|nodeRackName
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|LINE_SEPARATOR
argument_list|,
name|taskAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|,
name|taskAttempt
operator|.
name|getCounters
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tauce
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sendLaunchedEvents ()
specifier|private
name|void
name|sendLaunchedEvents
parameter_list|()
block|{
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
else|:
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TaskAttempt: ["
operator|+
name|attemptId
operator|+
literal|"] using containerId: ["
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" on NM: ["
operator|+
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|TaskAttemptStartedEvent
name|tase
init|=
operator|new
name|TaskAttemptStartedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|launchTime
argument_list|,
name|trackerName
argument_list|,
name|httpPort
argument_list|,
name|shufflePort
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|locality
operator|.
name|toString
argument_list|()
argument_list|,
name|avataar
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tase
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProgressSplitBlock ()
specifier|private
name|WrappedProgressSplitsBlock
name|getProgressSplitBlock
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|progressSplitBlock
operator|==
literal|null
condition|)
block|{
name|progressSplitBlock
operator|=
operator|new
name|WrappedProgressSplitsBlock
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_NUM_PROGRESS_SPLITS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_NUM_PROGRESS_SPLITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|progressSplitBlock
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateProgressSplits ()
specifier|private
name|void
name|updateProgressSplits
parameter_list|()
block|{
name|double
name|newProgress
init|=
name|reportedStatus
operator|.
name|progress
decl_stmt|;
name|newProgress
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|newProgress
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|reportedStatus
operator|.
name|counters
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
return|return;
name|WrappedProgressSplitsBlock
name|splitsBlock
init|=
name|getProgressSplitBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitsBlock
operator|!=
literal|null
condition|)
block|{
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|getLaunchTime
argument_list|()
decl_stmt|;
comment|// TODO Ensure not 0
if|if
condition|(
name|start
operator|!=
literal|0
operator|&&
name|now
operator|-
name|start
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressWallclockTime
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|now
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Counter
name|cpuCounter
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpuCounter
operator|!=
literal|null
operator|&&
name|cpuCounter
operator|.
name|getValue
argument_list|()
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressCPUTime
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
operator|(
name|int
operator|)
name|cpuCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// long to int? TODO: FIX. Same below
block|}
name|Counter
name|virtualBytes
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualBytes
operator|!=
literal|null
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressVirtualMemoryKbytes
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|virtualBytes
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|MEMORY_SPLITS_RESOLUTION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Counter
name|physicalBytes
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|physicalBytes
operator|!=
literal|null
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressPhysicalMemoryKbytes
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|physicalBytes
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|MEMORY_SPLITS_RESOLUTION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RequestContainerTransition
specifier|static
class|class
name|RequestContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|rescheduled
specifier|private
specifier|final
name|boolean
name|rescheduled
decl_stmt|;
DECL|method|RequestContainerTransition (boolean rescheduled)
specifier|public
name|RequestContainerTransition
parameter_list|(
name|boolean
name|rescheduled
parameter_list|)
block|{
name|this
operator|.
name|rescheduled
operator|=
name|rescheduled
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// Tell any speculator that we're requesting a container
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//request for container
if|if
condition|(
name|rescheduled
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|ContainerRequestEvent
operator|.
name|createContainerRequestEventForFailedContainer
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|resourceCapability
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerRequestEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|resourceCapability
argument_list|,
name|taskAttempt
operator|.
name|dataLocalHosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|taskAttempt
operator|.
name|dataLocalHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|taskAttempt
operator|.
name|dataLocalRacks
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|taskAttempt
operator|.
name|dataLocalRacks
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|resolveHosts (String[] src)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|resolveHosts
parameter_list|(
name|String
index|[]
name|src
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|src
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|isIP
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resolveHost
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|resolveHost (String src)
specifier|protected
name|String
name|resolveHost
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|String
name|result
init|=
name|src
decl_stmt|;
comment|// Fallback in case of failure.
try|try
block|{
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|result
operator|=
name|addr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to resolve address: "
operator|+
name|src
operator|+
literal|". Continuing to use the same."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|field|ipPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|ipPattern
init|=
comment|// Pattern for matching ip
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"
argument_list|)
decl_stmt|;
DECL|method|isIP (String src)
specifier|protected
name|boolean
name|isIP
parameter_list|(
name|String
name|src
parameter_list|)
block|{
return|return
name|ipPattern
operator|.
name|matcher
argument_list|(
name|src
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|class|ContainerAssignedTransition
specifier|private
specifier|static
class|class
name|ContainerAssignedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|transition (final TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
specifier|final
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
specifier|final
name|TaskAttemptContainerAssignedEvent
name|cEvent
init|=
operator|(
name|TaskAttemptContainerAssignedEvent
operator|)
name|event
decl_stmt|;
name|Container
name|container
init|=
name|cEvent
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|taskAttempt
operator|.
name|container
operator|=
name|container
expr_stmt|;
comment|// this is a _real_ Task (classic Hadoop mapred flavor):
name|taskAttempt
operator|.
name|remoteTask
operator|=
name|taskAttempt
operator|.
name|createRemoteTask
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|jvmID
operator|=
operator|new
name|WrappedJvmID
argument_list|(
name|taskAttempt
operator|.
name|remoteTask
operator|.
name|getTaskID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|remoteTask
operator|.
name|isMapTask
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|registerPendingTask
argument_list|(
name|taskAttempt
operator|.
name|remoteTask
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|computeRackAndLocality
argument_list|()
expr_stmt|;
comment|//launch the container
comment|//create the container object to be launched for a given Task attempt
name|ContainerLaunchContext
name|launchContext
init|=
name|createContainerLaunchContext
argument_list|(
name|cEvent
operator|.
name|getApplicationACLs
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|conf
argument_list|,
name|taskAttempt
operator|.
name|jobToken
argument_list|,
name|taskAttempt
operator|.
name|remoteTask
argument_list|,
name|taskAttempt
operator|.
name|oldJobId
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|,
name|taskAttempt
operator|.
name|taskAttemptListener
argument_list|,
name|taskAttempt
operator|.
name|credentials
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerRemoteLaunchEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|launchContext
argument_list|,
name|container
argument_list|,
name|taskAttempt
operator|.
name|remoteTask
argument_list|)
argument_list|)
expr_stmt|;
comment|// send event to speculator that our container needs are satisfied
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeallocateContainerTransition
specifier|private
specifier|static
class|class
name|DeallocateContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|finalState
specifier|private
specifier|final
name|TaskAttemptStateInternal
name|finalState
decl_stmt|;
DECL|field|withdrawsContainerRequest
specifier|private
specifier|final
name|boolean
name|withdrawsContainerRequest
decl_stmt|;
DECL|method|DeallocateContainerTransition (TaskAttemptStateInternal finalState, boolean withdrawsContainerRequest)
name|DeallocateContainerTransition
parameter_list|(
name|TaskAttemptStateInternal
name|finalState
parameter_list|,
name|boolean
name|withdrawsContainerRequest
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
name|this
operator|.
name|withdrawsContainerRequest
operator|=
name|withdrawsContainerRequest
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
operator|(
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
operator|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//send the deallocate event to ContainerAllocator
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerAllocatorEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_DEALLOCATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// send event to speculator that we withdraw our container needs, if
comment|//  we're transitioning out of UNASSIGNED
if|if
condition|(
name|withdrawsContainerRequest
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|FAILED
case|:
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|KILLED
case|:
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Task final state is not FAILED or KILLED: "
operator|+
name|finalState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|finalState
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalState
operator|==
name|TaskAttemptStateInternal
operator|.
name|FAILED
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalState
operator|==
name|TaskAttemptStateInternal
operator|.
name|KILLED
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAKilled
argument_list|(
name|taskAttempt
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not "
operator|+
literal|"generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LaunchedContainerTransition
specifier|private
specifier|static
class|class
name|LaunchedContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent evnt)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|evnt
parameter_list|)
block|{
name|TaskAttemptContainerLaunchedEvent
name|event
init|=
operator|(
name|TaskAttemptContainerLaunchedEvent
operator|)
name|evnt
decl_stmt|;
comment|//set the launch time
name|taskAttempt
operator|.
name|launchTime
operator|=
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|shufflePort
operator|=
name|event
operator|.
name|getShufflePort
argument_list|()
expr_stmt|;
comment|// register it to TaskAttemptListener so that it can start monitoring it.
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|registerLaunchedTask
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
comment|//TODO Resolve to host / IP in case of a local address.
name|InetSocketAddress
name|nodeHttpInetAddr
init|=
comment|// TODO: Costly to create sock-addr?
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|taskAttempt
operator|.
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|trackerName
operator|=
name|nodeHttpInetAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|httpPort
operator|=
name|nodeHttpInetAddr
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|sendLaunchedEvents
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
literal|true
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//make remoteTask reference as null as it is no more needed
comment|//and free up the memory
name|taskAttempt
operator|.
name|remoteTask
operator|=
literal|null
expr_stmt|;
comment|//tell the Task that attempt has started
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitPendingTransition
specifier|private
specifier|static
class|class
name|CommitPendingTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_COMMIT_PENDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskCleanupTransition
specifier|private
specifier|static
class|class
name|TaskCleanupTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|taskAttempt
operator|.
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|CommitterTaskAbortEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SucceededTransition
specifier|private
specifier|static
class|class
name|SucceededTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTASucceeded
argument_list|(
name|taskAttempt
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|logAttemptFinishedEvent
argument_list|(
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|reportedStatus
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailedTransition
specifier|private
specifier|static
class|class
name|FailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
comment|// taskAttempt.logAttemptFinishedEvent(TaskAttemptStateInternal.FAILED); Not
comment|// handling failed map/reduce events.
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not "
operator|+
literal|"generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecoverTransition
specifier|private
specifier|static
class|class
name|RecoverTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|,
name|TaskAttemptStateInternal
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|TaskAttemptStateInternal
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|TaskAttemptRecoverEvent
name|tare
init|=
operator|(
name|TaskAttemptRecoverEvent
operator|)
name|event
decl_stmt|;
return|return
name|taskAttempt
operator|.
name|recover
argument_list|(
name|tare
operator|.
name|getTaskAttemptInfo
argument_list|()
argument_list|,
name|tare
operator|.
name|getCommitter
argument_list|()
argument_list|,
name|tare
operator|.
name|getRecoverOutput
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|logAttemptFinishedEvent (TaskAttemptStateInternal state)
specifier|private
name|void
name|logAttemptFinishedEvent
parameter_list|(
name|TaskAttemptStateInternal
name|state
parameter_list|)
block|{
comment|//Log finished events only if an attempt started.
if|if
condition|(
name|getLaunchTime
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|String
name|containerHostName
init|=
name|this
operator|.
name|container
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|containerNodePort
init|=
name|this
operator|.
name|container
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|this
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|MapAttemptFinishedEvent
name|mfe
init|=
operator|new
name|MapAttemptFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|mapFinishTime
argument_list|,
name|finishTime
argument_list|,
name|containerHostName
argument_list|,
name|containerNodePort
argument_list|,
name|this
operator|.
name|nodeRackName
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|nodeRackName
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|stateString
argument_list|,
name|getCounters
argument_list|()
argument_list|,
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|mfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReduceAttemptFinishedEvent
name|rfe
init|=
operator|new
name|ReduceAttemptFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|sortFinishTime
argument_list|,
name|finishTime
argument_list|,
name|containerHostName
argument_list|,
name|containerNodePort
argument_list|,
name|this
operator|.
name|nodeRackName
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|nodeRackName
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|stateString
argument_list|,
name|getCounters
argument_list|()
argument_list|,
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|rfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TooManyFetchFailureTransition
specifier|private
specifier|static
class|class
name|TooManyFetchFailureTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// too many fetch failure can only happen for map tasks
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
comment|//add to diagnostic
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
literal|"Too Many fetch failures.Failing the attempt"
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not "
operator|+
literal|"generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KilledAfterSuccessTransition
specifier|private
specifier|static
class|class
name|KilledAfterSuccessTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|,
name|TaskAttemptStateInternal
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|TaskAttemptStateInternal
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
comment|// after a reduce task has succeeded, its outputs are in safe in HDFS.
comment|// logically such a task should not be killed. we only come here when
comment|// there is a race condition in the event queue. E.g. some logic sends
comment|// a kill request to this attempt when the successful completion event
comment|// for this task is already in the event queue. so the kill event will
comment|// get executed immediately after the attempt is marked successful and
comment|// result in this transition being exercised.
comment|// ignore this for reduce tasks
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring killed event for successful reduce task attempt"
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|TaskAttemptStateInternal
operator|.
name|SUCCEEDED
return|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|TaskAttemptKillEvent
name|msgEvent
init|=
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
decl_stmt|;
comment|//add to diagnostic
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
name|msgEvent
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// not setting a finish time since it was set on success
assert|assert
operator|(
name|taskAttempt
operator|.
name|getFinishTime
argument_list|()
operator|!=
literal|0
operator|)
assert|;
assert|assert
operator|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
operator|)
assert|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAKilled
argument_list|(
name|taskAttempt
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TaskAttemptStateInternal
operator|.
name|KILLED
return|;
block|}
block|}
DECL|class|KilledTransition
specifier|private
specifier|static
class|class
name|KilledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAKilled
argument_list|(
name|taskAttempt
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptStateInternal
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not "
operator|+
literal|"generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
operator|(
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
operator|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//      taskAttempt.logAttemptFinishedEvent(TaskAttemptStateInternal.KILLED); Not logging Map/Reduce attempts in case of failure.
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PreemptedTransition
specifier|private
specifier|static
class|class
name|PreemptedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|unregister
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|getAssignedContainerMgrAddress
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CleanupContainerTransition
specifier|private
specifier|static
class|class
name|CleanupContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// unregister it to TaskAttemptListener so that it stops listening
comment|// for it
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|unregister
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptKillEvent
condition|)
block|{
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
operator|(
operator|(
name|TaskAttemptKillEvent
operator|)
name|event
operator|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|taskAttempt
operator|.
name|updateProgressSplits
argument_list|()
expr_stmt|;
comment|//send the cleanup event to containerLauncher
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|taskAttempt
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|taskAttempt
operator|.
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDiagnosticInfo (String diag)
specifier|private
name|void
name|addDiagnosticInfo
parameter_list|(
name|String
name|diag
parameter_list|)
block|{
if|if
condition|(
name|diag
operator|!=
literal|null
operator|&&
operator|!
name|diag
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|diagnostics
operator|.
name|add
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatusUpdater
specifier|private
specifier|static
class|class
name|StatusUpdater
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// Status update calls don't really change the state of the attempt.
name|TaskAttemptStatus
name|newReportedStatus
init|=
operator|(
operator|(
name|TaskAttemptStatusUpdateEvent
operator|)
name|event
operator|)
operator|.
name|getReportedTaskAttemptStatus
argument_list|()
decl_stmt|;
comment|// Now switch the information in the reportedStatus
name|taskAttempt
operator|.
name|reportedStatus
operator|=
name|newReportedStatus
expr_stmt|;
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|taskState
operator|=
name|taskAttempt
operator|.
name|getState
argument_list|()
expr_stmt|;
comment|// send event to speculator about the reported status
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|reportedStatus
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|updateProgressSplits
argument_list|()
expr_stmt|;
comment|//if fetch failures are present, send the fetch failure event to job
comment|//this only will happen in reduce attempt type
if|if
condition|(
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
operator|!=
literal|null
operator|&&
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskAttemptFetchFailureEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|DiagnosticInformationUpdater
specifier|private
specifier|static
class|class
name|DiagnosticInformationUpdater
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|TaskAttemptDiagnosticsUpdateEvent
name|diagEvent
init|=
operator|(
name|TaskAttemptDiagnosticsUpdateEvent
operator|)
name|event
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Diagnostics report from "
operator|+
name|taskAttempt
operator|.
name|attemptId
operator|+
literal|": "
operator|+
name|diagEvent
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
name|diagEvent
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initTaskAttemptStatus (TaskAttemptStatus result)
specifier|private
name|void
name|initTaskAttemptStatus
parameter_list|(
name|TaskAttemptStatus
name|result
parameter_list|)
block|{
name|result
operator|.
name|progress
operator|=
literal|0.0f
expr_stmt|;
name|result
operator|.
name|phase
operator|=
name|Phase
operator|.
name|STARTING
expr_stmt|;
name|result
operator|.
name|stateString
operator|=
literal|"NEW"
expr_stmt|;
name|result
operator|.
name|taskState
operator|=
name|TaskAttemptState
operator|.
name|NEW
expr_stmt|;
name|Counters
name|counters
init|=
name|EMPTY_COUNTERS
decl_stmt|;
name|result
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
block|}
block|}
end_class

end_unit

