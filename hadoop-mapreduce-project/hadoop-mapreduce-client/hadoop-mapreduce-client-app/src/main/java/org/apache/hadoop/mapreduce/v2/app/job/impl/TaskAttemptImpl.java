begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.job.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceChildJVM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedJvmID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|WrappedProgressSplitsBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|MapAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|ReduceAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobCounterUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerAssignedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptContainerLaunchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskTAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerRemoteLaunchEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SpeculatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|taskclean
operator|.
name|TaskCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_comment
comment|/**  * Implementation of TaskAttempt interface.  */
end_comment

begin_class
DECL|class|TaskAttemptImpl
specifier|public
specifier|abstract
class|class
name|TaskAttemptImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
implements|,
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MEMORY_SPLITS_RESOLUTION
specifier|private
specifier|static
specifier|final
name|long
name|MEMORY_SPLITS_RESOLUTION
init|=
literal|1024
decl_stmt|;
comment|//TODO Make configurable?
DECL|field|MAP_MEMORY_MB_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|MAP_MEMORY_MB_DEFAULT
init|=
literal|1024
decl_stmt|;
DECL|field|REDUCE_MEMORY_MB_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|REDUCE_MEMORY_MB_DEFAULT
init|=
literal|1024
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|jobFile
specifier|protected
specifier|final
name|Path
name|jobFile
decl_stmt|;
DECL|field|partition
specifier|protected
specifier|final
name|int
name|partition
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|eventHandler
specifier|protected
specifier|final
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|field|attemptId
specifier|private
specifier|final
name|TaskAttemptId
name|attemptId
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
DECL|field|oldJobId
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|oldJobId
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
specifier|final
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|committer
specifier|private
specifier|final
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|resourceCapability
specifier|private
specifier|final
name|Resource
name|resourceCapability
decl_stmt|;
DECL|field|dataLocalHosts
specifier|private
specifier|final
name|String
index|[]
name|dataLocalHosts
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|fsTokens
specifier|private
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|fsTokens
decl_stmt|;
DECL|field|jobToken
specifier|private
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
DECL|field|initialClasspathFlag
specifier|private
specifier|static
name|AtomicBoolean
name|initialClasspathFlag
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|initialClasspath
specifier|private
specifier|static
name|String
name|initialClasspath
init|=
literal|null
decl_stmt|;
DECL|field|classpathLock
specifier|private
specifier|static
specifier|final
name|Object
name|classpathLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|launchTime
specifier|private
name|long
name|launchTime
decl_stmt|;
DECL|field|finishTime
specifier|private
name|long
name|finishTime
decl_stmt|;
DECL|field|progressSplitBlock
specifier|private
name|WrappedProgressSplitsBlock
name|progressSplitBlock
decl_stmt|;
DECL|field|shufflePort
specifier|private
name|int
name|shufflePort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|trackerName
specifier|private
name|String
name|trackerName
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|CLEANUP_CONTAINER_TRANSITION
specifier|private
specifier|static
specifier|final
name|CleanupContainerTransition
name|CLEANUP_CONTAINER_TRANSITION
init|=
operator|new
name|CleanupContainerTransition
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DiagnosticInformationUpdater
DECL|field|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
init|=
operator|new
name|DiagnosticInformationUpdater
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptState
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptState
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
argument_list|(
name|TaskAttemptState
operator|.
name|NEW
argument_list|)
comment|// Transitions from the NEW state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|NEW
argument_list|,
name|TaskAttemptState
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_SCHEDULE
argument_list|,
operator|new
name|RequestContainerTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|NEW
argument_list|,
name|TaskAttemptState
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_RESCHEDULE
argument_list|,
operator|new
name|RequestContainerTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|NEW
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|NEW
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
operator|new
name|FailedTransition
argument_list|()
argument_list|)
comment|// Transitions from the UNASSIGNED state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_ASSIGNED
argument_list|,
operator|new
name|ContainerAssignedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|UNASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
literal|true
argument_list|)
argument_list|)
comment|// Transitions from the ASSIGNED state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
operator|new
name|LaunchedContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCH_FAILED
argument_list|,
operator|new
name|DeallocateContainerTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// ^ If RM kills the container due to expiry, preemption etc.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|ASSIGNED
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Transitions from RUNNING state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
operator|new
name|StatusUpdater
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// If no commit is required, task directly goes to success
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// If commit is required, task goes through commit pending state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
operator|new
name|CommitPendingTransition
argument_list|()
argument_list|)
comment|// Failure handling while RUNNING
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|//for handling container exit without sending the done or fail msg
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Timeout handling while RUNNING
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Kill handling
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Transitions from COMMIT_PENDING state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
operator|new
name|StatusUpdater
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|COMMIT_PENDING
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|CLEANUP_CONTAINER_TRANSITION
argument_list|)
comment|// Transitions from SUCCESS_CONTAINER_CLEANUP state
comment|// kill and cleanup the container
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|SucceededTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCESS_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
argument_list|)
comment|// Transitions from FAIL_CONTAINER_CLEANUP state.
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|TaskCleanupTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|)
argument_list|)
comment|// Transitions from KILL_CONTAINER_CLEANUP
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_CLEANED
argument_list|,
operator|new
name|TaskCleanupTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_CONTAINER_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|)
argument_list|)
comment|// Transitions from FAIL_TASK_CLEANUP
comment|// run the task cleanup
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CLEANUP_DONE
argument_list|,
operator|new
name|FailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|FAIL_TASK_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
comment|// Transitions from KILL_TASK_CLEANUP
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CLEANUP_DONE
argument_list|,
operator|new
name|KilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|TaskAttemptState
operator|.
name|KILL_TASK_CLEANUP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
comment|// Transitions from SUCCEEDED
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
comment|//only possible for map attempts
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TOO_MANY_FETCH_FAILURE
argument_list|,
operator|new
name|TooManyFetchFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for SUCCEEDED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|)
argument_list|)
comment|// Transitions from FAILED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for FAILED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
comment|// Transitions from KILLED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DIAGNOSTICS_UPDATE
argument_list|,
name|DIAGNOSTIC_INFORMATION_UPDATE_TRANSITION
argument_list|)
comment|// Ignore-able events for KILLED state
operator|.
name|addTransition
argument_list|(
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEventType
operator|.
name|TA_KILL
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_ASSIGNED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_COMPLETED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_UPDATE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_CONTAINER_LAUNCHED
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_COMMIT_PENDING
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_FAILMSG
argument_list|)
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|TaskAttemptState
argument_list|,
name|TaskAttemptEventType
argument_list|,
name|TaskAttemptEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|containerID
specifier|private
name|ContainerId
name|containerID
decl_stmt|;
DECL|field|containerNodeId
specifier|private
name|NodeId
name|containerNodeId
decl_stmt|;
DECL|field|containerMgrAddress
specifier|private
name|String
name|containerMgrAddress
decl_stmt|;
DECL|field|nodeHttpAddress
specifier|private
name|String
name|nodeHttpAddress
decl_stmt|;
DECL|field|nodeRackName
specifier|private
name|String
name|nodeRackName
decl_stmt|;
DECL|field|jvmID
specifier|private
name|WrappedJvmID
name|jvmID
decl_stmt|;
DECL|field|containerToken
specifier|private
name|ContainerToken
name|containerToken
decl_stmt|;
DECL|field|assignedCapability
specifier|private
name|Resource
name|assignedCapability
decl_stmt|;
comment|//this takes good amount of memory ~ 30KB. Instantiate it lazily
comment|//and make it null once task is launched.
DECL|field|remoteTask
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
name|remoteTask
decl_stmt|;
comment|//this is the last status reported by the REMOTE running attempt
DECL|field|reportedStatus
specifier|private
name|TaskAttemptStatus
name|reportedStatus
decl_stmt|;
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|method|TaskAttemptImpl (TaskId taskId, int i, @SuppressWarnings(R) EventHandler eventHandler, TaskAttemptListener taskAttemptListener, Path jobFile, int partition, Configuration conf, String[] dataLocalHosts, OutputCommitter committer, Token<JobTokenIdentifier> jobToken, Collection<Token<? extends TokenIdentifier>> fsTokens, Clock clock)
specifier|public
name|TaskAttemptImpl
parameter_list|(
name|TaskId
name|taskId
parameter_list|,
name|int
name|i
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|eventHandler
parameter_list|,
name|TaskAttemptListener
name|taskAttemptListener
parameter_list|,
name|Path
name|jobFile
parameter_list|,
name|int
name|partition
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|dataLocalHosts
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|fsTokens
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|oldJobId
operator|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskId
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|attemptId
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptId
operator|.
name|class
argument_list|)
expr_stmt|;
name|attemptId
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|attemptId
operator|.
name|setId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAttemptListener
operator|=
name|taskAttemptListener
expr_stmt|;
comment|// Initialize reportedStatus
name|reportedStatus
operator|=
operator|new
name|TaskAttemptStatus
argument_list|()
expr_stmt|;
name|initTaskAttemptStatus
argument_list|(
name|reportedStatus
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsTokens
operator|=
name|fsTokens
expr_stmt|;
name|this
operator|.
name|jobToken
operator|=
name|jobToken
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|this
operator|.
name|committer
operator|=
name|committer
expr_stmt|;
name|this
operator|.
name|jobFile
operator|=
name|jobFile
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
comment|//TODO:create the resource reqt for this Task attempt
name|this
operator|.
name|resourceCapability
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceCapability
operator|.
name|setMemory
argument_list|(
name|getMemoryRequired
argument_list|(
name|conf
argument_list|,
name|taskId
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataLocalHosts
operator|=
name|dataLocalHosts
expr_stmt|;
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// This "this leak" is okay because the retained pointer is in an
comment|//  instance variable.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getMemoryRequired (Configuration conf, TaskType taskType)
specifier|private
name|int
name|getMemoryRequired
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|int
name|memory
init|=
literal|1024
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|memory
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|MAP_MEMORY_MB_DEFAULT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|memory
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_MB
argument_list|,
name|REDUCE_MEMORY_MB_DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|memory
return|;
block|}
comment|/**    * Create a {@link LocalResource} record with all the given parameters.    * TODO: This should pave way for Builder pattern.    */
DECL|method|createLocalResource (FileSystem fc, RecordFactory recordFactory, Path file, LocalResourceType type, LocalResourceVisibility visibility)
specifier|private
specifier|static
name|LocalResource
name|createLocalResource
parameter_list|(
name|FileSystem
name|fc
parameter_list|,
name|RecordFactory
name|recordFactory
parameter_list|,
name|Path
name|file
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|visibility
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fstat
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|LocalResource
name|resource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|fc
operator|.
name|resolvePath
argument_list|(
name|fstat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVisibility
argument_list|(
name|visibility
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSize
argument_list|(
name|fstat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setTimestamp
argument_list|(
name|fstat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
comment|/**    * Lock this on initialClasspath so that there is only one fork in the AM for    * getting the initial class-path. TODO: This should go away once we construct    * a parent CLC and use it for all the containers.    */
DECL|method|getInitialClasspath ()
specifier|private
name|String
name|getInitialClasspath
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|classpathLock
init|)
block|{
if|if
condition|(
name|initialClasspathFlag
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|initialClasspath
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRApps
operator|.
name|setClasspath
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|initialClasspath
operator|=
name|env
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|initialClasspathFlag
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initialClasspath
return|;
block|}
block|}
comment|/**    * Create the {@link ContainerLaunchContext} for this attempt.    * @param applicationACLs     */
DECL|method|createContainerLaunchContext ( Map<ApplicationAccessType, String> applicationACLs)
specifier|private
name|ContainerLaunchContext
name|createContainerLaunchContext
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|applicationACLs
parameter_list|)
block|{
comment|// Application resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Application environment
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Service data
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Tokens
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|remoteFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// //////////// Set up JobJar to be localized properly on the remote NM.
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Path
name|remoteJobJar
init|=
operator|(
operator|new
name|Path
argument_list|(
name|remoteTask
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JAR
argument_list|)
argument_list|)
operator|)
operator|.
name|makeQualified
argument_list|(
name|remoteFS
operator|.
name|getUri
argument_list|()
argument_list|,
name|remoteFS
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_JAR
argument_list|,
name|createLocalResource
argument_list|(
name|remoteFS
argument_list|,
name|recordFactory
argument_list|,
name|remoteJobJar
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The job-jar file on the remote FS is "
operator|+
name|remoteJobJar
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Job jar may be null. For e.g, for pipes, the job jar is the hadoop
comment|// mapreduce jar itself which is already on the classpath.
name|LOG
operator|.
name|info
argument_list|(
literal|"Job jar is not present. "
operator|+
literal|"Not adding any jar to the list of resources."
argument_list|)
expr_stmt|;
block|}
comment|// //////////// End of JobJar setup
comment|// //////////// Set up JobConf to be localized properly on the remote NM.
name|Path
name|path
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|remoteJobSubmitDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|oldJobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|remoteJobConfPath
init|=
operator|new
name|Path
argument_list|(
name|remoteJobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|,
name|createLocalResource
argument_list|(
name|remoteFS
argument_list|,
name|recordFactory
argument_list|,
name|remoteJobConfPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The job-conf file on the remote FS is "
operator|+
name|remoteJobConfPath
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
comment|// //////////// End of JobConf setup
comment|// Setup DistributedCache
name|MRApps
operator|.
name|setupDistributedCache
argument_list|(
name|conf
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
comment|// Setup up tokens
name|Credentials
name|taskCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Add file-system tokens
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|fsTokens
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting fs-token for NM use for launching container : "
operator|+
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|taskCredentials
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LocalStorageToken is needed irrespective of whether security is enabled
comment|// or not.
name|TokenCache
operator|.
name|setJobToken
argument_list|(
name|jobToken
argument_list|,
name|taskCredentials
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|containerTokens_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Size of containertokens_dob is "
operator|+
name|taskCredentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|taskCredentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|containerTokens_dob
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokens_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|containerTokens_dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add shuffle token
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting shuffle token in serviceData"
argument_list|)
expr_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
name|ShuffleHandler
operator|.
name|MAPREDUCE_SHUFFLE_SERVICEID
argument_list|,
name|ShuffleHandler
operator|.
name|serializeServiceData
argument_list|(
name|jobToken
argument_list|)
argument_list|)
expr_stmt|;
name|Apps
operator|.
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|getInitialClasspath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Setup environment
name|MapReduceChildJVM
operator|.
name|setVMEnv
argument_list|(
name|environment
argument_list|,
name|remoteTask
argument_list|)
expr_stmt|;
comment|// Set up the launch command
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|MapReduceChildJVM
operator|.
name|getVMCommand
argument_list|(
name|taskAttemptListener
operator|.
name|getAddress
argument_list|()
argument_list|,
name|remoteTask
argument_list|,
name|jvmID
argument_list|)
decl_stmt|;
comment|// Construct the actual Container
name|ContainerLaunchContext
name|container
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
name|containerID
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|)
argument_list|,
name|assignedCapability
argument_list|,
name|localResources
argument_list|,
name|environment
argument_list|,
name|commands
argument_list|,
name|serviceData
argument_list|,
name|tokens
argument_list|,
name|applicationACLs
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerID ()
specifier|public
name|ContainerId
name|getAssignedContainerID
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|containerID
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAssignedContainerMgrAddress ()
specifier|public
name|String
name|getAssignedContainerMgrAddress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|containerMgrAddress
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLaunchTime ()
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|launchTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|finishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortFinishTime ()
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|reportedStatus
operator|.
name|sortFinishTime
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShufflePort ()
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|shufflePort
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**If container Assigned then return the node's address, otherwise null.    */
annotation|@
name|Override
DECL|method|getNodeHttpAddress ()
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|nodeHttpAddress
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If container Assigned then return the node's rackname, otherwise null.    */
annotation|@
name|Override
DECL|method|getNodeRackName ()
specifier|public
name|String
name|getNodeRackName
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|nodeRackName
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createRemoteTask ()
specifier|protected
specifier|abstract
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
name|createRemoteTask
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskAttemptId
name|getID
parameter_list|()
block|{
return|return
name|attemptId
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// TODO: Use stateMachine level method?
return|return
operator|(
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|SUCCEEDED
operator|||
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|FAILED
operator|||
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|KILLED
operator|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskAttemptReport
name|getReport
parameter_list|()
block|{
name|TaskAttemptReport
name|result
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|TaskAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
comment|//take the LOCAL state of attempt
comment|//DO NOT take from reportedStatus
name|result
operator|.
name|setTaskAttemptState
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setProgress
argument_list|(
name|reportedStatus
operator|.
name|progress
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStartTime
argument_list|(
name|launchTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShuffleFinishTime
argument_list|(
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDiagnosticInfo
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|LINE_SEPARATOR
argument_list|,
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPhase
argument_list|(
name|reportedStatus
operator|.
name|phase
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStateString
argument_list|(
name|reportedStatus
operator|.
name|stateString
argument_list|)
expr_stmt|;
name|result
operator|.
name|setCounters
argument_list|(
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setContainerId
argument_list|(
name|this
operator|.
name|getAssignedContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNodeManagerHost
argument_list|(
name|trackerName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNodeManagerHttpPort
argument_list|(
name|httpPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|containerNodeId
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setNodeManagerPort
argument_list|(
name|this
operator|.
name|containerNodeId
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDiagnostics ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiagnostics
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|.
name|addAll
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Counters
name|counters
init|=
name|reportedStatus
operator|.
name|counters
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
name|counters
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//        counters.groups = new HashMap<String, CounterGroup>();
block|}
return|return
name|counters
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|reportedStatus
operator|.
name|progress
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskAttemptState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|TaskAttemptState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobDiagnosticsUpdateEvent
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" on TaskAttempt "
operator|+
name|this
operator|.
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobEvent
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|INTERNAL_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|attemptId
operator|+
literal|" TaskAttempt Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|//always called in write lock
DECL|method|setFinishTime ()
specifier|private
name|void
name|setFinishTime
parameter_list|()
block|{
comment|//set the finish time only if launch time is set
if|if
condition|(
name|launchTime
operator|!=
literal|0
condition|)
block|{
name|finishTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|computeSlotMillis (TaskAttemptImpl taskAttempt)
specifier|private
specifier|static
name|long
name|computeSlotMillis
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|)
block|{
name|TaskType
name|taskType
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|int
name|slotMemoryReq
init|=
name|taskAttempt
operator|.
name|getMemoryRequired
argument_list|(
name|taskAttempt
operator|.
name|conf
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
name|int
name|simSlotsRequired
init|=
name|slotMemoryReq
operator|/
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|MAP_MEMORY_MB_DEFAULT
else|:
name|REDUCE_MEMORY_MB_DEFAULT
operator|)
decl_stmt|;
comment|// Simulating MRv1 slots for counters by assuming *_MEMORY_MB_DEFAULT
comment|// corresponds to a MrV1 slot.
comment|// Fallow slot millis is not applicable in MRv2 - since a container is
comment|// either assigned with the required memory or is not. No partial
comment|// reserveations
name|long
name|slotMillisIncrement
init|=
name|simSlotsRequired
operator|*
operator|(
name|taskAttempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|)
decl_stmt|;
return|return
name|slotMillisIncrement
return|;
block|}
DECL|method|createJobCounterUpdateEventTAFailed ( TaskAttemptImpl taskAttempt)
specifier|private
specifier|static
name|JobCounterUpdateEvent
name|createJobCounterUpdateEventTAFailed
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|)
block|{
name|TaskType
name|taskType
init|=
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|slotMillisIncrement
init|=
name|computeSlotMillis
argument_list|(
name|taskAttempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|,
name|slotMillisIncrement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|NUM_FAILED_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_REDUCES
argument_list|,
name|slotMillisIncrement
argument_list|)
expr_stmt|;
block|}
return|return
name|jce
return|;
block|}
specifier|private
specifier|static
name|TaskAttemptUnsuccessfulCompletionEvent
DECL|method|createTaskAttemptUnsuccessfulCompletionEvent (TaskAttemptImpl taskAttempt, TaskAttemptState attemptState)
name|createTaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptState
name|attemptState
parameter_list|)
block|{
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
operator|new
name|TaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|attemptState
operator|.
name|toString
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|finishTime
argument_list|,
name|taskAttempt
operator|.
name|containerMgrAddress
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|taskAttempt
operator|.
name|containerMgrAddress
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|LINE_SEPARATOR
argument_list|,
name|taskAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|,
name|taskAttempt
operator|.
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tauce
return|;
block|}
DECL|method|getProgressSplitBlock ()
specifier|private
name|WrappedProgressSplitsBlock
name|getProgressSplitBlock
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|progressSplitBlock
operator|==
literal|null
condition|)
block|{
name|progressSplitBlock
operator|=
operator|new
name|WrappedProgressSplitsBlock
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_NUM_PROGRESS_SPLITS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_NUM_PROGRESS_SPLITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|progressSplitBlock
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateProgressSplits ()
specifier|private
name|void
name|updateProgressSplits
parameter_list|()
block|{
name|double
name|newProgress
init|=
name|reportedStatus
operator|.
name|progress
decl_stmt|;
name|Counters
name|counters
init|=
name|reportedStatus
operator|.
name|counters
decl_stmt|;
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
return|return;
name|WrappedProgressSplitsBlock
name|splitsBlock
init|=
name|getProgressSplitBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitsBlock
operator|!=
literal|null
condition|)
block|{
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|getLaunchTime
argument_list|()
decl_stmt|;
comment|// TODO Ensure not 0
if|if
condition|(
name|start
operator|!=
literal|0
operator|&&
name|now
operator|-
name|start
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressWallclockTime
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|now
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Counter
name|cpuCounter
init|=
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpuCounter
operator|!=
literal|null
operator|&&
name|cpuCounter
operator|.
name|getValue
argument_list|()
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressCPUTime
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
operator|(
name|int
operator|)
name|cpuCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Counter
name|virtualBytes
init|=
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualBytes
operator|!=
literal|null
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressVirtualMemoryKbytes
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|virtualBytes
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|MEMORY_SPLITS_RESOLUTION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Counter
name|physicalBytes
init|=
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|physicalBytes
operator|!=
literal|null
condition|)
block|{
name|splitsBlock
operator|.
name|getProgressPhysicalMemoryKbytes
argument_list|()
operator|.
name|extend
argument_list|(
name|newProgress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|physicalBytes
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|MEMORY_SPLITS_RESOLUTION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RequestContainerTransition
specifier|private
specifier|static
class|class
name|RequestContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|rescheduled
specifier|private
specifier|final
name|boolean
name|rescheduled
decl_stmt|;
DECL|method|RequestContainerTransition (boolean rescheduled)
specifier|public
name|RequestContainerTransition
parameter_list|(
name|boolean
name|rescheduled
parameter_list|)
block|{
name|this
operator|.
name|rescheduled
operator|=
name|rescheduled
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// Tell any speculator that we're requesting a container
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//request for container
if|if
condition|(
name|rescheduled
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|ContainerRequestEvent
operator|.
name|createContainerRequestEventForFailedContainer
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|resourceCapability
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[
name|taskAttempt
operator|.
name|dataLocalHosts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|taskAttempt
operator|.
name|dataLocalHosts
control|)
block|{
name|racks
index|[
name|i
operator|++
index|]
operator|=
name|RackResolver
operator|.
name|resolve
argument_list|(
name|host
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerRequestEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|resourceCapability
argument_list|,
name|taskAttempt
operator|.
name|dataLocalHosts
argument_list|,
name|racks
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerAssignedTransition
specifier|private
specifier|static
class|class
name|ContainerAssignedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|transition (final TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
specifier|final
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
specifier|final
name|TaskAttemptContainerAssignedEvent
name|cEvent
init|=
operator|(
name|TaskAttemptContainerAssignedEvent
operator|)
name|event
decl_stmt|;
name|taskAttempt
operator|.
name|containerID
operator|=
name|cEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|containerNodeId
operator|=
name|cEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|containerMgrAddress
operator|=
name|taskAttempt
operator|.
name|containerNodeId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|nodeHttpAddress
operator|=
name|cEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|nodeRackName
operator|=
name|RackResolver
operator|.
name|resolve
argument_list|(
name|taskAttempt
operator|.
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|containerToken
operator|=
name|cEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerToken
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|assignedCapability
operator|=
name|cEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
expr_stmt|;
comment|// this is a _real_ Task (classic Hadoop mapred flavor):
name|taskAttempt
operator|.
name|remoteTask
operator|=
name|taskAttempt
operator|.
name|createRemoteTask
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|jvmID
operator|=
operator|new
name|WrappedJvmID
argument_list|(
name|taskAttempt
operator|.
name|remoteTask
operator|.
name|getTaskID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|remoteTask
operator|.
name|isMapTask
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|containerID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|registerPendingTask
argument_list|(
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
comment|//launch the container
comment|//create the container object to be launched for a given Task attempt
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerRemoteLaunchEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|containerID
argument_list|,
name|taskAttempt
operator|.
name|containerMgrAddress
argument_list|,
name|taskAttempt
operator|.
name|containerToken
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ContainerLaunchContext
name|getContainer
parameter_list|()
block|{
return|return
name|taskAttempt
operator|.
name|createContainerLaunchContext
argument_list|(
name|cEvent
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
name|getRemoteTask
parameter_list|()
block|{
comment|// classic mapred Task, not YARN version
return|return
name|taskAttempt
operator|.
name|remoteTask
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// send event to speculator that our container needs are satisfied
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeallocateContainerTransition
specifier|private
specifier|static
class|class
name|DeallocateContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
DECL|field|finalState
specifier|private
specifier|final
name|TaskAttemptState
name|finalState
decl_stmt|;
DECL|field|withdrawsContainerRequest
specifier|private
specifier|final
name|boolean
name|withdrawsContainerRequest
decl_stmt|;
DECL|method|DeallocateContainerTransition (TaskAttemptState finalState, boolean withdrawsContainerRequest)
name|DeallocateContainerTransition
parameter_list|(
name|TaskAttemptState
name|finalState
parameter_list|,
name|boolean
name|withdrawsContainerRequest
parameter_list|)
block|{
name|this
operator|.
name|finalState
operator|=
name|finalState
expr_stmt|;
name|this
operator|.
name|withdrawsContainerRequest
operator|=
name|withdrawsContainerRequest
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
comment|//send the deallocate event to ContainerAllocator
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerAllocatorEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|CONTAINER_DEALLOCATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// send event to speculator that we withdraw our container needs, if
comment|//  we're transitioning out of UNASSIGNED
if|if
condition|(
name|withdrawsContainerRequest
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|getID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|finalState
condition|)
block|{
case|case
name|FAILED
case|:
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|KILLED
case|:
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|finalState
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LaunchedContainerTransition
specifier|private
specifier|static
class|class
name|LaunchedContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent evnt)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|evnt
parameter_list|)
block|{
name|TaskAttemptContainerLaunchedEvent
name|event
init|=
operator|(
name|TaskAttemptContainerLaunchedEvent
operator|)
name|evnt
decl_stmt|;
comment|//set the launch time
name|taskAttempt
operator|.
name|launchTime
operator|=
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|shufflePort
operator|=
name|event
operator|.
name|getShufflePort
argument_list|()
expr_stmt|;
comment|// register it to TaskAttemptListener so that it start listening
comment|// for it
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|registerLaunchedTask
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|remoteTask
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
comment|//TODO Resolve to host / IP in case of a local address.
name|InetSocketAddress
name|nodeHttpInetAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|taskAttempt
operator|.
name|nodeHttpAddress
argument_list|)
decl_stmt|;
comment|// TODO:
comment|// Costly?
name|taskAttempt
operator|.
name|trackerName
operator|=
name|nodeHttpInetAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|taskAttempt
operator|.
name|httpPort
operator|=
name|nodeHttpInetAddr
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_MAPS
else|:
name|JobCounter
operator|.
name|TOTAL_LAUNCHED_REDUCES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TaskAttempt: ["
operator|+
name|taskAttempt
operator|.
name|attemptId
operator|+
literal|"] using containerId: ["
operator|+
name|taskAttempt
operator|.
name|containerID
operator|+
literal|" on NM: ["
operator|+
name|taskAttempt
operator|.
name|containerMgrAddress
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|TaskAttemptStartedEvent
name|tase
init|=
operator|new
name|TaskAttemptStartedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|taskAttempt
operator|.
name|launchTime
argument_list|,
name|nodeHttpInetAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nodeHttpInetAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|taskAttempt
operator|.
name|shufflePort
argument_list|,
name|taskAttempt
operator|.
name|containerID
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tase
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
literal|true
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//make remoteTask reference as null as it is no more needed
comment|//and free up the memory
name|taskAttempt
operator|.
name|remoteTask
operator|=
literal|null
expr_stmt|;
comment|//tell the Task that attempt has started
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitPendingTransition
specifier|private
specifier|static
class|class
name|CommitPendingTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_COMMIT_PENDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskCleanupTransition
specifier|private
specifier|static
class|class
name|TaskCleanupTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
operator|new
name|JobConf
argument_list|(
name|taskAttempt
operator|.
name|conf
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskCleanupEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|committer
argument_list|,
name|taskContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SucceededTransition
specifier|private
specifier|static
class|class
name|SucceededTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
name|String
name|taskType
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"In TaskAttemptImpl taskType: "
operator|+
name|taskType
argument_list|)
expr_stmt|;
name|long
name|slotMillis
init|=
name|computeSlotMillis
argument_list|(
name|taskAttempt
argument_list|)
decl_stmt|;
name|JobCounterUpdateEvent
name|jce
init|=
operator|new
name|JobCounterUpdateEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|jce
operator|.
name|addCounterUpdate
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
else|:
name|JobCounter
operator|.
name|SLOTS_MILLIS_REDUCES
argument_list|,
name|slotMillis
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|jce
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|logAttemptFinishedEvent
argument_list|(
name|TaskAttemptState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|reportedStatus
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailedTransition
specifier|private
specifier|static
class|class
name|FailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
comment|// taskAttempt.logAttemptFinishedEvent(TaskAttemptState.FAILED); Not
comment|// handling failed map/reduce events.
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|logAttemptFinishedEvent (TaskAttemptState state)
specifier|private
name|void
name|logAttemptFinishedEvent
parameter_list|(
name|TaskAttemptState
name|state
parameter_list|)
block|{
comment|//Log finished events only if an attempt started.
if|if
condition|(
name|getLaunchTime
argument_list|()
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|MapAttemptFinishedEvent
name|mfe
init|=
operator|new
name|MapAttemptFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|mapFinishTime
argument_list|,
name|finishTime
argument_list|,
name|this
operator|.
name|containerNodeId
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|this
operator|.
name|nodeRackName
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|nodeRackName
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|stateString
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|getCounters
argument_list|()
argument_list|)
argument_list|,
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|mfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReduceAttemptFinishedEvent
name|rfe
init|=
operator|new
name|ReduceAttemptFinishedEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
argument_list|)
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|shuffleFinishTime
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|sortFinishTime
argument_list|,
name|finishTime
argument_list|,
name|this
operator|.
name|containerNodeId
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|this
operator|.
name|nodeRackName
operator|==
literal|null
condition|?
literal|"UNKNOWN"
else|:
name|this
operator|.
name|nodeRackName
argument_list|,
name|this
operator|.
name|reportedStatus
operator|.
name|stateString
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|getCounters
argument_list|()
argument_list|)
argument_list|,
name|getProgressSplitBlock
argument_list|()
operator|.
name|burst
argument_list|()
argument_list|)
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|rfe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TooManyFetchFailureTransition
specifier|private
specifier|static
class|class
name|TooManyFetchFailureTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//add to diagnostic
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
literal|"Too Many fetch failures.Failing the attempt"
argument_list|)
expr_stmt|;
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KilledTransition
specifier|private
specifier|static
class|class
name|KilledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|//set the finish time
name|taskAttempt
operator|.
name|setFinishTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskAttempt
operator|.
name|getLaunchTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
name|createJobCounterUpdateEventTAFailed
argument_list|(
name|taskAttempt
argument_list|)
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
name|createTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|taskAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|tauce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not generating HistoryFinish event since start event not generated for taskAttempt: "
operator|+
name|taskAttempt
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//      taskAttempt.logAttemptFinishedEvent(TaskAttemptState.KILLED); Not logging Map/Reduce attempts in case of failure.
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskTAttemptEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|TaskEventType
operator|.
name|T_ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CleanupContainerTransition
specifier|private
specifier|static
class|class
name|CleanupContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// unregister it to TaskAttemptListener so that it stops listening
comment|// for it
name|taskAttempt
operator|.
name|taskAttemptListener
operator|.
name|unregister
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|jvmID
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|taskAttempt
operator|.
name|updateProgressSplits
argument_list|()
expr_stmt|;
comment|//send the cleanup event to containerLauncher
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLauncherEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|containerID
argument_list|,
name|taskAttempt
operator|.
name|containerMgrAddress
argument_list|,
name|taskAttempt
operator|.
name|containerToken
argument_list|,
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|CONTAINER_REMOTE_CLEANUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDiagnosticInfo (String diag)
specifier|private
name|void
name|addDiagnosticInfo
parameter_list|(
name|String
name|diag
parameter_list|)
block|{
if|if
condition|(
name|diag
operator|!=
literal|null
operator|&&
operator|!
name|diag
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|diagnostics
operator|.
name|add
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatusUpdater
specifier|private
specifier|static
class|class
name|StatusUpdater
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
comment|// Status update calls don't really change the state of the attempt.
name|TaskAttemptStatus
name|newReportedStatus
init|=
operator|(
operator|(
name|TaskAttemptStatusUpdateEvent
operator|)
name|event
operator|)
operator|.
name|getReportedTaskAttemptStatus
argument_list|()
decl_stmt|;
comment|// Now switch the information in the reportedStatus
name|taskAttempt
operator|.
name|reportedStatus
operator|=
name|newReportedStatus
expr_stmt|;
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|taskState
operator|=
name|taskAttempt
operator|.
name|getState
argument_list|()
expr_stmt|;
comment|// send event to speculator about the reported status
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|taskAttempt
operator|.
name|reportedStatus
argument_list|,
name|taskAttempt
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|updateProgressSplits
argument_list|()
expr_stmt|;
comment|//if fetch failures are present, send the fetch failure event to job
comment|//this only will happen in reduce attempt type
if|if
condition|(
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
operator|!=
literal|null
operator|&&
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|taskAttempt
operator|.
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskAttemptFetchFailureEvent
argument_list|(
name|taskAttempt
operator|.
name|attemptId
argument_list|,
name|taskAttempt
operator|.
name|reportedStatus
operator|.
name|fetchFailedMaps
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|DiagnosticInformationUpdater
specifier|private
specifier|static
class|class
name|DiagnosticInformationUpdater
implements|implements
name|SingleArcTransition
argument_list|<
name|TaskAttemptImpl
argument_list|,
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (TaskAttemptImpl taskAttempt, TaskAttemptEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|TaskAttemptImpl
name|taskAttempt
parameter_list|,
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|TaskAttemptDiagnosticsUpdateEvent
name|diagEvent
init|=
operator|(
name|TaskAttemptDiagnosticsUpdateEvent
operator|)
name|event
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Diagnostics report from "
operator|+
name|taskAttempt
operator|.
name|attemptId
operator|+
literal|": "
operator|+
name|diagEvent
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|taskAttempt
operator|.
name|addDiagnosticInfo
argument_list|(
name|diagEvent
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initTaskAttemptStatus (TaskAttemptStatus result)
specifier|private
name|void
name|initTaskAttemptStatus
parameter_list|(
name|TaskAttemptStatus
name|result
parameter_list|)
block|{
name|result
operator|.
name|progress
operator|=
literal|0.0f
expr_stmt|;
name|result
operator|.
name|phase
operator|=
name|Phase
operator|.
name|STARTING
expr_stmt|;
name|result
operator|.
name|stateString
operator|=
literal|"NEW"
expr_stmt|;
name|result
operator|.
name|taskState
operator|=
name|TaskAttemptState
operator|.
name|NEW
expr_stmt|;
name|Counters
name|counters
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//    counters.groups = new HashMap<String, CounterGroup>();
name|result
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
block|}
block|}
end_class

end_unit

