begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_class
DECL|class|ContainerLauncherEvent
specifier|public
class|class
name|ContainerLauncherEvent
extends|extends
name|AbstractEvent
argument_list|<
name|ContainerLauncher
operator|.
name|EventType
argument_list|>
block|{
DECL|field|taskAttemptID
specifier|private
name|TaskAttemptId
name|taskAttemptID
decl_stmt|;
DECL|field|containerID
specifier|private
name|ContainerId
name|containerID
decl_stmt|;
DECL|field|containerMgrAddress
specifier|private
name|String
name|containerMgrAddress
decl_stmt|;
DECL|field|containerToken
specifier|private
name|Token
name|containerToken
decl_stmt|;
DECL|field|dumpContainerThreads
specifier|private
name|boolean
name|dumpContainerThreads
decl_stmt|;
DECL|method|ContainerLauncherEvent (TaskAttemptId taskAttemptID, ContainerId containerID, String containerMgrAddress, Token containerToken, ContainerLauncher.EventType type)
specifier|public
name|ContainerLauncherEvent
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|,
name|ContainerId
name|containerID
parameter_list|,
name|String
name|containerMgrAddress
parameter_list|,
name|Token
name|containerToken
parameter_list|,
name|ContainerLauncher
operator|.
name|EventType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|taskAttemptID
argument_list|,
name|containerID
argument_list|,
name|containerMgrAddress
argument_list|,
name|containerToken
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|ContainerLauncherEvent (TaskAttemptId taskAttemptID, ContainerId containerID, String containerMgrAddress, Token containerToken, ContainerLauncher.EventType type, boolean dumpContainerThreads)
specifier|public
name|ContainerLauncherEvent
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|,
name|ContainerId
name|containerID
parameter_list|,
name|String
name|containerMgrAddress
parameter_list|,
name|Token
name|containerToken
parameter_list|,
name|ContainerLauncher
operator|.
name|EventType
name|type
parameter_list|,
name|boolean
name|dumpContainerThreads
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAttemptID
operator|=
name|taskAttemptID
expr_stmt|;
name|this
operator|.
name|containerID
operator|=
name|containerID
expr_stmt|;
name|this
operator|.
name|containerMgrAddress
operator|=
name|containerMgrAddress
expr_stmt|;
name|this
operator|.
name|containerToken
operator|=
name|containerToken
expr_stmt|;
name|this
operator|.
name|dumpContainerThreads
operator|=
name|dumpContainerThreads
expr_stmt|;
block|}
DECL|method|getTaskAttemptID ()
specifier|public
name|TaskAttemptId
name|getTaskAttemptID
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskAttemptID
return|;
block|}
DECL|method|getContainerID ()
specifier|public
name|ContainerId
name|getContainerID
parameter_list|()
block|{
return|return
name|containerID
return|;
block|}
DECL|method|getContainerMgrAddress ()
specifier|public
name|String
name|getContainerMgrAddress
parameter_list|()
block|{
return|return
name|containerMgrAddress
return|;
block|}
DECL|method|getContainerToken ()
specifier|public
name|Token
name|getContainerToken
parameter_list|()
block|{
return|return
name|containerToken
return|;
block|}
DECL|method|getDumpContainerThreads ()
specifier|public
name|boolean
name|getDumpContainerThreads
parameter_list|()
block|{
return|return
name|dumpContainerThreads
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" for container "
operator|+
name|containerID
operator|+
literal|" taskAttempt "
operator|+
name|taskAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|containerID
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|containerID
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|containerMgrAddress
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|containerMgrAddress
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|containerToken
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|containerToken
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|taskAttemptID
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|taskAttemptID
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|dumpContainerThreads
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ContainerLauncherEvent
name|other
init|=
operator|(
name|ContainerLauncherEvent
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|containerID
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|containerID
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|containerID
operator|.
name|equals
argument_list|(
name|other
operator|.
name|containerID
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|containerMgrAddress
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|containerMgrAddress
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|containerMgrAddress
operator|.
name|equals
argument_list|(
name|other
operator|.
name|containerMgrAddress
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|containerToken
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|containerToken
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|containerToken
operator|.
name|equals
argument_list|(
name|other
operator|.
name|containerToken
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|taskAttemptID
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|taskAttemptID
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|taskAttemptID
operator|.
name|equals
argument_list|(
name|other
operator|.
name|taskAttemptID
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|dumpContainerThreads
operator|==
name|other
operator|.
name|dumpContainerThreads
return|;
block|}
block|}
end_class

end_unit

