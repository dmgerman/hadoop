begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AbstractLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_comment
comment|/**  * This class generates TA_TIMED_OUT if the task attempt stays in FINISHING  * state for too long.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TaskAttemptFinishingMonitor
specifier|public
class|class
name|TaskAttemptFinishingMonitor
extends|extends
name|AbstractLivelinessMonitor
argument_list|<
name|TaskAttemptId
argument_list|>
block|{
DECL|field|eventHandler
specifier|private
name|EventHandler
name|eventHandler
decl_stmt|;
DECL|method|TaskAttemptFinishingMonitor (EventHandler eventHandler)
specifier|public
name|TaskAttemptFinishingMonitor
parameter_list|(
name|EventHandler
name|eventHandler
parameter_list|)
block|{
name|super
argument_list|(
literal|"TaskAttemptFinishingMonitor"
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
block|}
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|expireIntvl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|TASK_EXIT_TIMEOUT
argument_list|,
name|MRJobConfig
operator|.
name|TASK_EXIT_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|checkIntvl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|TASK_EXIT_TIMEOUT_CHECK_INTERVAL_MS
argument_list|,
name|MRJobConfig
operator|.
name|TASK_EXIT_TIMEOUT_CHECK_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
name|setExpireInterval
argument_list|(
name|expireIntvl
argument_list|)
expr_stmt|;
name|setMonitorInterval
argument_list|(
name|checkIntvl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|expire (TaskAttemptId id)
specifier|protected
name|void
name|expire
parameter_list|(
name|TaskAttemptId
name|id
parameter_list|)
block|{
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|id
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_TIMED_OUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

