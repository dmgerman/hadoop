begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|FileNameIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|JsonNodeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_comment
comment|/**  * The job history events get routed to this class. This class writes the Job  * history events to the DFS directly into a staging dir and then moved to a  * done-dir. JobHistory implementation is in this package to access package  * private classes.  */
end_comment

begin_class
DECL|class|JobHistoryEventHandler
specifier|public
class|class
name|JobHistoryEventHandler
extends|extends
name|AbstractService
implements|implements
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
block|{
DECL|field|FACTORY
specifier|private
specifier|static
specifier|final
name|JsonNodeFactory
name|FACTORY
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
DECL|field|startCount
specifier|private
specifier|final
name|int
name|startCount
decl_stmt|;
DECL|field|eventCounter
specifier|private
name|int
name|eventCounter
decl_stmt|;
comment|// Those file systems may differ from the job configuration
comment|// See org.apache.hadoop.mapreduce.v2.jobhistory.JobHistoryUtils
comment|// #ensurePathInDefaultFileSystem
DECL|field|stagingDirFS
specifier|private
name|FileSystem
name|stagingDirFS
decl_stmt|;
comment|// log Dir FileSystem
DECL|field|doneDirFS
specifier|private
name|FileSystem
name|doneDirFS
decl_stmt|;
comment|// done Dir FileSystem
DECL|field|stagingDirPath
specifier|private
name|Path
name|stagingDirPath
init|=
literal|null
decl_stmt|;
DECL|field|doneDirPrefixPath
specifier|private
name|Path
name|doneDirPrefixPath
init|=
literal|null
decl_stmt|;
comment|// folder for completed jobs
DECL|field|maxUnflushedCompletionEvents
specifier|private
name|int
name|maxUnflushedCompletionEvents
decl_stmt|;
DECL|field|postJobCompletionMultiplier
specifier|private
name|int
name|postJobCompletionMultiplier
decl_stmt|;
DECL|field|flushTimeout
specifier|private
name|long
name|flushTimeout
decl_stmt|;
DECL|field|minQueueSizeForBatchingFlushes
specifier|private
name|int
name|minQueueSizeForBatchingFlushes
decl_stmt|;
comment|// TODO: Rename
DECL|field|numUnflushedCompletionEvents
specifier|private
name|int
name|numUnflushedCompletionEvents
init|=
literal|0
decl_stmt|;
DECL|field|isTimerActive
specifier|private
name|boolean
name|isTimerActive
decl_stmt|;
DECL|field|jhistMode
specifier|private
name|EventWriter
operator|.
name|WriteMode
name|jhistMode
init|=
name|EventWriter
operator|.
name|WriteMode
operator|.
name|JSON
decl_stmt|;
DECL|field|eventQueue
specifier|protected
name|BlockingQueue
argument_list|<
name|JobHistoryEvent
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|JobHistoryEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|eventHandlingThread
specifier|protected
name|Thread
name|eventHandlingThread
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobHistoryEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fileMap
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
name|fileMap
init|=
name|Collections
operator|.
expr|<
name|JobId
decl_stmt|,
name|MetaInfo
decl|>
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// should job completion be force when the AM shuts down?
DECL|field|forceJobCompletion
specifier|protected
specifier|volatile
name|boolean
name|forceJobCompletion
init|=
literal|false
decl_stmt|;
DECL|field|timelineClient
specifier|protected
name|TimelineClient
name|timelineClient
decl_stmt|;
DECL|field|MAPREDUCE_JOB_ENTITY_TYPE
specifier|private
specifier|static
name|String
name|MAPREDUCE_JOB_ENTITY_TYPE
init|=
literal|"MAPREDUCE_JOB"
decl_stmt|;
DECL|field|MAPREDUCE_TASK_ENTITY_TYPE
specifier|private
specifier|static
name|String
name|MAPREDUCE_TASK_ENTITY_TYPE
init|=
literal|"MAPREDUCE_TASK"
decl_stmt|;
DECL|method|JobHistoryEventHandler (AppContext context, int startCount)
specifier|public
name|JobHistoryEventHandler
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|int
name|startCount
parameter_list|)
block|{
name|super
argument_list|(
literal|"JobHistoryEventHandler"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|startCount
operator|=
name|startCount
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.yarn.service.AbstractService#init(org.    * apache.hadoop.conf.Configuration)    * Initializes the FileSystem and Path objects for the log and done directories.    * Creates these directories if they do not already exist.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jobId
init|=
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|context
operator|.
name|getApplicationID
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|stagingDirStr
init|=
literal|null
decl_stmt|;
name|String
name|doneDirStr
init|=
literal|null
decl_stmt|;
name|String
name|userDoneDirStr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stagingDirStr
operator|=
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryStagingDirPrefix
argument_list|(
name|conf
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|doneDirStr
operator|=
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryIntermediateDoneDirPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|userDoneDirStr
operator|=
name|JobHistoryUtils
operator|.
name|getHistoryIntermediateDoneDirForUser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed while getting the configured log directories"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Check for the existence of the history staging dir. Maybe create it.
try|try
block|{
name|stagingDirPath
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|stagingDirStr
argument_list|)
argument_list|)
expr_stmt|;
name|stagingDirFS
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|stagingDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|stagingDirFS
argument_list|,
name|stagingDirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_STAGING_DIR_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed while checking for/creating  history staging path: ["
operator|+
name|stagingDirPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Check for the existence of intermediate done dir.
name|Path
name|doneDirPath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doneDirPath
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|doneDirStr
argument_list|)
argument_list|)
expr_stmt|;
name|doneDirFS
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|doneDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// This directory will be in a common location, or this may be a cluster
comment|// meant for a single user. Creating based on the conf. Should ideally be
comment|// created by the JobHistoryServer or as part of deployment.
if|if
condition|(
operator|!
name|doneDirFS
operator|.
name|exists
argument_list|(
name|doneDirPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|JobHistoryUtils
operator|.
name|shouldCreateNonUserDirectory
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating intermediate history logDir: ["
operator|+
name|doneDirPath
operator|+
literal|"] + based on conf. Should ideally be created by the JobHistoryServer: "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_CREATE_JH_INTERMEDIATE_BASE_DIR
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|doneDirFS
argument_list|,
name|doneDirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO Temporary toShort till new FsPermission(FsPermissions)
comment|// respects
comment|// sticky
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Not creating intermediate history logDir: ["
operator|+
name|doneDirPath
operator|+
literal|"] based on conf: "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_CREATE_JH_INTERMEDIATE_BASE_DIR
operator|+
literal|". Either set to true or pre-create this directory with"
operator|+
literal|" appropriate permissions"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed checking for the existance of history intermediate "
operator|+
literal|"done directory: ["
operator|+
name|doneDirPath
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Check/create user directory under intermediate done dir.
try|try
block|{
name|doneDirPrefixPath
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|userDoneDirStr
argument_list|)
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|doneDirFS
argument_list|,
name|doneDirPrefixPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_INTERMEDIATE_USER_DIR_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating user intermediate history done directory: [ "
operator|+
name|doneDirPrefixPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Maximum number of unflushed completion-events that can stay in the queue
comment|// before flush kicks in.
name|maxUnflushedCompletionEvents
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS
argument_list|)
expr_stmt|;
comment|// We want to cut down flushes after job completes so as to write quicker,
comment|// so we increase maxUnflushedEvents post Job completion by using the
comment|// following multiplier.
name|postJobCompletionMultiplier
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER
argument_list|)
expr_stmt|;
comment|// Max time until which flush doesn't take place.
name|flushTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|minQueueSizeForBatchingFlushes
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAPREDUCE_JOB_EMIT_TIMELINE_DATA
argument_list|)
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
condition|)
block|{
name|timelineClient
operator|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
expr_stmt|;
name|timelineClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline service is enabled"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Emitting job history data to the timeline server is enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline service is not enabled"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Emitting job history data to the timeline server is not enabled"
argument_list|)
expr_stmt|;
block|}
comment|// Flag for setting
name|String
name|jhistFormat
init|=
name|conf
operator|.
name|get
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_JHIST_FORMAT
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HS_JHIST_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|jhistFormat
operator|.
name|equals
argument_list|(
literal|"json"
argument_list|)
condition|)
block|{
name|jhistMode
operator|=
name|EventWriter
operator|.
name|WriteMode
operator|.
name|JSON
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jhistFormat
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|jhistMode
operator|=
name|EventWriter
operator|.
name|WriteMode
operator|.
name|BINARY
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unrecognized value '"
operator|+
name|jhistFormat
operator|+
literal|"' for property "
operator|+
name|JHAdminConfig
operator|.
name|MR_HS_JHIST_FORMAT
operator|+
literal|".  Valid values are "
operator|+
literal|"'json' or 'binary'.  Falling back to default value '"
operator|+
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HS_JHIST_FORMAT
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdir (FileSystem fs, Path path, FsPermission fsp)
specifier|private
name|void
name|mkdir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
name|FileStatus
name|fsStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Perms after creating "
operator|+
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|+
literal|", Expected: "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|!=
name|fsp
operator|.
name|toShort
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Explicitly setting permissions to : "
operator|+
name|fsp
operator|.
name|toShort
argument_list|()
operator|+
literal|", "
operator|+
name|fsp
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory: ["
operator|+
name|path
operator|+
literal|"] already exists."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|timelineClient
operator|!=
literal|null
condition|)
block|{
name|timelineClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|eventHandlingThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JobHistoryEvent
name|event
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
comment|// Log the size of the history-event-queue every so often.
if|if
condition|(
name|eventCounter
operator|!=
literal|0
operator|&&
name|eventCounter
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|eventCounter
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Size of the JobHistory event queue is "
operator|+
name|eventQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eventCounter
operator|++
expr_stmt|;
block|}
try|try
block|{
name|event
operator|=
name|eventQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"EventQueue take interrupted. Returning"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If an event has been removed from the queue. Handle it.
comment|// The rest of the queue is handled via stop()
comment|// Clear the interrupt status if it's set before calling handleEvent
comment|// and set it if it was set before calling handleEvent.
comment|// Interrupts received from other threads during handleEvent cannot be
comment|// dealth with - Shell.runCommand() ignores them.
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|boolean
name|isInterrupted
init|=
name|Thread
operator|.
name|interrupted
argument_list|()
decl_stmt|;
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInterrupted
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event handling interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|,
literal|"eventHandlingThread"
argument_list|)
expr_stmt|;
name|eventHandlingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping JobHistoryEventHandler. "
operator|+
literal|"Size of the outstanding queue size is "
operator|+
name|eventQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
comment|//do not interrupt while event handling is in progress
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|eventHandlingThread
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupting Event Handling thread"
argument_list|)
expr_stmt|;
name|eventHandlingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Null event handling thread"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|eventHandlingThread
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for Event Handling thread to complete"
argument_list|)
expr_stmt|;
name|eventHandlingThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted Exception while stopping"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
comment|// Cancel all timers - so that they aren't invoked during or after
comment|// the metaInfo object is wrapped up.
for|for
control|(
name|MetaInfo
name|mi
range|:
name|fileMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down timer for "
operator|+
name|mi
argument_list|)
expr_stmt|;
block|}
name|mi
operator|.
name|shutDownTimer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception while cancelling delayed flush timer. "
operator|+
literal|"Likely caused by a failed flush "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//write all the events remaining in queue
name|Iterator
argument_list|<
name|JobHistoryEvent
argument_list|>
name|it
init|=
name|eventQueue
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JobHistoryEvent
name|ev
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"In stop, writing event "
operator|+
name|ev
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
comment|// Process JobUnsuccessfulCompletionEvent for jobIds which still haven't
comment|// closed their event writers
if|if
condition|(
name|forceJobCompletion
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|JobId
argument_list|,
name|MetaInfo
argument_list|>
name|jobIt
range|:
name|fileMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JobId
name|toClose
init|=
name|jobIt
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MetaInfo
name|mi
init|=
name|jobIt
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mi
operator|!=
literal|null
operator|&&
name|mi
operator|.
name|isWriterActive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found jobId "
operator|+
name|toClose
operator|+
literal|" to have not been closed. Will close"
argument_list|)
expr_stmt|;
comment|//Create a JobFinishEvent so that it is written to the job history
specifier|final
name|Job
name|job
init|=
name|context
operator|.
name|getJob
argument_list|(
name|toClose
argument_list|)
decl_stmt|;
name|JobUnsuccessfulCompletionEvent
name|jucEvent
init|=
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|toClose
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|job
operator|.
name|getCompletedMaps
argument_list|()
argument_list|,
name|job
operator|.
name|getCompletedReduces
argument_list|()
argument_list|,
name|createJobStateForJobUnsuccessfulCompletionEvent
argument_list|(
name|mi
operator|.
name|getForcedJobStateOnShutDown
argument_list|()
argument_list|)
argument_list|,
name|job
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryEvent
name|jfEvent
init|=
operator|new
name|JobHistoryEvent
argument_list|(
name|toClose
argument_list|,
name|jucEvent
argument_list|)
decl_stmt|;
comment|//Bypass the queue mechanism which might wait. Call the method directly
name|handleEvent
argument_list|(
name|jfEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//close all file handles
for|for
control|(
name|MetaInfo
name|mi
range|:
name|fileMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|mi
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception while closing file "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|timelineClient
operator|!=
literal|null
condition|)
block|{
name|timelineClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped JobHistoryEventHandler. super.stop()"
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|createEventWriter (Path historyFilePath)
specifier|protected
name|EventWriter
name|createEventWriter
parameter_list|(
name|Path
name|historyFilePath
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|stagingDirFS
operator|.
name|create
argument_list|(
name|historyFilePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|EventWriter
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|jhistMode
argument_list|)
return|;
block|}
comment|/**    * Create an event writer for the Job represented by the jobID.    * Writes out the job configuration to the log directory.    * This should be the first call to history for a job    *     * @param jobId the jobId.    * @param amStartedEvent    * @throws IOException    */
DECL|method|setupEventWriter (JobId jobId, AMStartedEvent amStartedEvent)
specifier|protected
name|void
name|setupEventWriter
parameter_list|(
name|JobId
name|jobId
parameter_list|,
name|AMStartedEvent
name|amStartedEvent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stagingDirPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log Directory is null, returning"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing Log Directory for History"
argument_list|)
throw|;
block|}
name|MetaInfo
name|oldFi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
comment|// TODO Ideally this should be written out to the job dir
comment|// (.staging/jobid/files - RecoveryService will need to be patched)
name|Path
name|historyFile
init|=
name|JobHistoryUtils
operator|.
name|getStagingJobHistoryFile
argument_list|(
name|stagingDirPath
argument_list|,
name|jobId
argument_list|,
name|startCount
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"User is null while setting up jobhistory eventwriter"
argument_list|)
throw|;
block|}
name|String
name|jobName
init|=
name|context
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|EventWriter
name|writer
init|=
operator|(
name|oldFi
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|oldFi
operator|.
name|writer
decl_stmt|;
name|Path
name|logDirConfPath
init|=
name|JobHistoryUtils
operator|.
name|getStagingConfFile
argument_list|(
name|stagingDirPath
argument_list|,
name|jobId
argument_list|,
name|startCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|=
name|createEventWriter
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Event Writer setup for JobId: "
operator|+
name|jobId
operator|+
literal|", File: "
operator|+
name|historyFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not create log file: ["
operator|+
name|historyFile
operator|+
literal|"] + for job "
operator|+
literal|"["
operator|+
name|jobName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|//Write out conf only if the writer isn't already setup.
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
comment|// TODO Ideally this should be written out to the job dir
comment|// (.staging/jobid/files - RecoveryService will need to be patched)
name|FSDataOutputStream
name|jobFileOut
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|logDirConfPath
operator|!=
literal|null
condition|)
block|{
name|jobFileOut
operator|=
name|stagingDirFS
operator|.
name|create
argument_list|(
name|logDirConfPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|jobFileOut
argument_list|)
expr_stmt|;
name|jobFileOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to write the job configuration file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|String
name|queueName
init|=
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|queueName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|,
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
name|MetaInfo
name|fi
init|=
operator|new
name|MetaInfo
argument_list|(
name|historyFile
argument_list|,
name|logDirConfPath
argument_list|,
name|writer
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|jobId
argument_list|,
name|amStartedEvent
operator|.
name|getForcedJobStateOnShutDown
argument_list|()
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
name|fi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|fi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|setJobLaunchTime
argument_list|(
name|amStartedEvent
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|fi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|setJobSubmitTime
argument_list|(
name|amStartedEvent
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|fi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setJobStartTime
argument_list|(
name|amStartedEvent
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|fi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setSubmitTime
argument_list|(
name|amStartedEvent
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|fileMap
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|fi
argument_list|)
expr_stmt|;
block|}
comment|/** Close the event writer for this id     * @throws IOException */
DECL|method|closeWriter (JobId id)
specifier|public
name|void
name|closeWriter
parameter_list|(
name|JobId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|!=
literal|null
condition|)
block|{
name|mi
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing writer for JobID: "
operator|+
name|id
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (JobHistoryEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isJobCompletionEvent
argument_list|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
argument_list|)
condition|)
block|{
comment|// When the job is complete, flush slower but write faster.
name|maxUnflushedCompletionEvents
operator|=
name|maxUnflushedCompletionEvents
operator|*
name|postJobCompletionMultiplier
expr_stmt|;
block|}
name|eventQueue
operator|.
name|put
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isJobCompletionEvent (HistoryEvent historyEvent)
specifier|private
name|boolean
name|isJobCompletionEvent
parameter_list|(
name|HistoryEvent
name|historyEvent
parameter_list|)
block|{
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|EventType
operator|.
name|JOB_FINISHED
argument_list|,
name|EventType
operator|.
name|JOB_FAILED
argument_list|,
name|EventType
operator|.
name|JOB_KILLED
argument_list|)
operator|.
name|contains
argument_list|(
name|historyEvent
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Private
DECL|method|handleEvent (JobHistoryEvent event)
specifier|public
name|void
name|handleEvent
parameter_list|(
name|JobHistoryEvent
name|event
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// If this is JobSubmitted Event, setup the writer
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|AM_STARTED
condition|)
block|{
try|try
block|{
name|AMStartedEvent
name|amStartedEvent
init|=
operator|(
name|AMStartedEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|setupEventWriter
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|,
name|amStartedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error JobHistoryEventHandler in handleEvent: "
operator|+
name|event
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|// For all events
comment|// (1) Write it out
comment|// (2) Process it for JobSummary
comment|// (3) Process it for ATS (if enabled)
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|HistoryEvent
name|historyEvent
init|=
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|historyEvent
operator|instanceof
name|NormalizedResourceEvent
operator|)
condition|)
block|{
name|mi
operator|.
name|writeEvent
argument_list|(
name|historyEvent
argument_list|)
expr_stmt|;
block|}
name|processEventForJobSummary
argument_list|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
argument_list|,
name|mi
operator|.
name|getJobSummary
argument_list|()
argument_list|,
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timelineClient
operator|!=
literal|null
condition|)
block|{
name|processEventForTimelineServer
argument_list|(
name|historyEvent
argument_list|,
name|event
operator|.
name|getJobID
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In HistoryEventHandler "
operator|+
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing History Event: "
operator|+
name|event
operator|.
name|getHistoryEvent
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_SUBMITTED
condition|)
block|{
name|JobSubmittedEvent
name|jobSubmittedEvent
init|=
operator|(
name|JobSubmittedEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setSubmitTime
argument_list|(
name|jobSubmittedEvent
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setQueueName
argument_list|(
name|jobSubmittedEvent
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//initialize the launchTime in the JobIndexInfo of MetaInfo
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_INITED
condition|)
block|{
name|JobInitedEvent
name|jie
init|=
operator|(
name|JobInitedEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setJobStartTime
argument_list|(
name|jie
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_QUEUE_CHANGED
condition|)
block|{
name|JobQueueChangeEvent
name|jQueueEvent
init|=
operator|(
name|JobQueueChangeEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setQueueName
argument_list|(
name|jQueueEvent
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If this is JobFinishedEvent, close the writer and setup the job-index
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_FINISHED
condition|)
block|{
try|try
block|{
name|JobFinishedEvent
name|jFinishedEvent
init|=
operator|(
name|JobFinishedEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setFinishTime
argument_list|(
name|jFinishedEvent
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumMaps
argument_list|(
name|jFinishedEvent
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumReduces
argument_list|(
name|jFinishedEvent
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setJobStatus
argument_list|(
name|JobState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|closeEventWriter
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|processDoneFiles
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// In case of JOB_ERROR, only process all the Done files(e.g. job
comment|// summary, job history file etc.) if it is last AM retry.
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_ERROR
condition|)
block|{
try|try
block|{
name|JobUnsuccessfulCompletionEvent
name|jucEvent
init|=
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setFinishTime
argument_list|(
name|jucEvent
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumMaps
argument_list|(
name|jucEvent
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumReduces
argument_list|(
name|jucEvent
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setJobStatus
argument_list|(
name|jucEvent
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|closeEventWriter
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isLastAMRetry
argument_list|()
condition|)
name|processDoneFiles
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_FAILED
operator|||
name|event
operator|.
name|getHistoryEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|JOB_KILLED
condition|)
block|{
try|try
block|{
name|JobUnsuccessfulCompletionEvent
name|jucEvent
init|=
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
operator|.
name|getHistoryEvent
argument_list|()
decl_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setFinishTime
argument_list|(
name|jucEvent
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumMaps
argument_list|(
name|jucEvent
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setNumReduces
argument_list|(
name|jucEvent
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
operator|.
name|setJobStatus
argument_list|(
name|jucEvent
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|closeEventWriter
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|processDoneFiles
argument_list|(
name|event
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|processEventForJobSummary (HistoryEvent event, JobSummary summary, JobId jobId)
specifier|public
name|void
name|processEventForJobSummary
parameter_list|(
name|HistoryEvent
name|event
parameter_list|,
name|JobSummary
name|summary
parameter_list|,
name|JobId
name|jobId
parameter_list|)
block|{
comment|// context.getJob could be used for some of this info as well.
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|JOB_SUBMITTED
case|:
name|JobSubmittedEvent
name|jse
init|=
operator|(
name|JobSubmittedEvent
operator|)
name|event
decl_stmt|;
name|summary
operator|.
name|setUser
argument_list|(
name|jse
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setQueue
argument_list|(
name|jse
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setJobSubmitTime
argument_list|(
name|jse
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setJobName
argument_list|(
name|jse
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NORMALIZED_RESOURCE
case|:
name|NormalizedResourceEvent
name|normalizedResourceEvent
init|=
operator|(
name|NormalizedResourceEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|normalizedResourceEvent
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|summary
operator|.
name|setResourcesPerMap
argument_list|(
operator|(
name|int
operator|)
name|normalizedResourceEvent
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|normalizedResourceEvent
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|summary
operator|.
name|setResourcesPerReduce
argument_list|(
operator|(
name|int
operator|)
name|normalizedResourceEvent
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|JOB_INITED
case|:
name|JobInitedEvent
name|jie
init|=
operator|(
name|JobInitedEvent
operator|)
name|event
decl_stmt|;
name|summary
operator|.
name|setJobLaunchTime
argument_list|(
name|jie
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_STARTED
case|:
name|TaskAttemptStartedEvent
name|mtase
init|=
operator|(
name|TaskAttemptStartedEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|summary
operator|.
name|getFirstMapTaskLaunchTime
argument_list|()
operator|==
literal|0
condition|)
name|summary
operator|.
name|setFirstMapTaskLaunchTime
argument_list|(
name|mtase
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCE_ATTEMPT_STARTED
case|:
name|TaskAttemptStartedEvent
name|rtase
init|=
operator|(
name|TaskAttemptStartedEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|summary
operator|.
name|getFirstReduceTaskLaunchTime
argument_list|()
operator|==
literal|0
condition|)
name|summary
operator|.
name|setFirstReduceTaskLaunchTime
argument_list|(
name|rtase
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FINISHED
case|:
name|JobFinishedEvent
name|jfe
init|=
operator|(
name|JobFinishedEvent
operator|)
name|event
decl_stmt|;
name|summary
operator|.
name|setJobFinishTime
argument_list|(
name|jfe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFinishedMaps
argument_list|(
name|jfe
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFailedMaps
argument_list|(
name|jfe
operator|.
name|getFailedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFinishedReduces
argument_list|(
name|jfe
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFailedReduces
argument_list|(
name|jfe
operator|.
name|getFailedReduces
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|summary
operator|.
name|getJobStatus
argument_list|()
operator|==
literal|null
condition|)
name|summary
operator|.
name|setJobStatus
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO JOB_FINISHED does not have state. Effectively job history does not
comment|// have state about the finished job.
name|setSummarySlotSeconds
argument_list|(
name|summary
argument_list|,
name|jfe
operator|.
name|getTotalCounters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FAILED
case|:
case|case
name|JOB_KILLED
case|:
name|JobUnsuccessfulCompletionEvent
name|juce
init|=
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
decl_stmt|;
name|summary
operator|.
name|setJobStatus
argument_list|(
name|juce
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFinishedMaps
argument_list|(
name|context
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setNumFinishedReduces
argument_list|(
name|context
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|setJobFinishTime
argument_list|(
name|juce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|setSummarySlotSeconds
argument_list|(
name|summary
argument_list|,
name|context
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
operator|.
name|getAllCounters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|processEventForTimelineServer (HistoryEvent event, JobId jobId, long timestamp)
specifier|private
name|void
name|processEventForTimelineServer
parameter_list|(
name|HistoryEvent
name|event
parameter_list|,
name|JobId
name|jobId
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|TimelineEvent
name|tEvent
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|tEvent
operator|.
name|setEventType
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|TimelineEntity
name|tEntity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|JOB_SUBMITTED
case|:
name|JobSubmittedEvent
name|jse
init|=
operator|(
name|JobSubmittedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SUBMIT_TIME"
argument_list|,
name|jse
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"QUEUE_NAME"
argument_list|,
name|jse
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"JOB_NAME"
argument_list|,
name|jse
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"USER_NAME"
argument_list|,
name|jse
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"JOB_CONF_PATH"
argument_list|,
name|jse
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ACLS"
argument_list|,
name|jse
operator|.
name|getJobAcls
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"JOB_QUEUE_NAME"
argument_list|,
name|jse
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"WORKFLOW_ID"
argument_list|,
name|jse
operator|.
name|getWorkflowId
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"WORKFLOW_NAME"
argument_list|,
name|jse
operator|.
name|getWorkflowName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"WORKFLOW_NAME_NAME"
argument_list|,
name|jse
operator|.
name|getWorkflowNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"WORKFLOW_ADJACENCIES"
argument_list|,
name|jse
operator|.
name|getWorkflowAdjacencies
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"WORKFLOW_TAGS"
argument_list|,
name|jse
operator|.
name|getWorkflowTags
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_STATUS_CHANGED
case|:
name|JobStatusChangedEvent
name|jsce
init|=
operator|(
name|JobStatusChangedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|jsce
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_INFO_CHANGED
case|:
name|JobInfoChangeEvent
name|jice
init|=
operator|(
name|JobInfoChangeEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SUBMIT_TIME"
argument_list|,
name|jice
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"LAUNCH_TIME"
argument_list|,
name|jice
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_INITED
case|:
name|JobInitedEvent
name|jie
init|=
operator|(
name|JobInitedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|jie
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|jie
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TOTAL_MAPS"
argument_list|,
name|jie
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TOTAL_REDUCES"
argument_list|,
name|jie
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"UBERIZED"
argument_list|,
name|jie
operator|.
name|getUberized
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setStartTime
argument_list|(
name|jie
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_PRIORITY_CHANGED
case|:
name|JobPriorityChangeEvent
name|jpce
init|=
operator|(
name|JobPriorityChangeEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"PRIORITY"
argument_list|,
name|jpce
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_QUEUE_CHANGED
case|:
name|JobQueueChangeEvent
name|jqe
init|=
operator|(
name|JobQueueChangeEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"QUEUE_NAMES"
argument_list|,
name|jqe
operator|.
name|getJobQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FAILED
case|:
case|case
name|JOB_KILLED
case|:
case|case
name|JOB_ERROR
case|:
name|JobUnsuccessfulCompletionEvent
name|juce
init|=
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|juce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NUM_MAPS"
argument_list|,
name|juce
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NUM_REDUCES"
argument_list|,
name|juce
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"JOB_STATUS"
argument_list|,
name|juce
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"DIAGNOSTICS"
argument_list|,
name|juce
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISHED_MAPS"
argument_list|,
name|juce
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISHED_REDUCES"
argument_list|,
name|juce
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOB_FINISHED
case|:
name|JobFinishedEvent
name|jfe
init|=
operator|(
name|JobFinishedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|jfe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NUM_MAPS"
argument_list|,
name|jfe
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NUM_REDUCES"
argument_list|,
name|jfe
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FAILED_MAPS"
argument_list|,
name|jfe
operator|.
name|getFailedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FAILED_REDUCES"
argument_list|,
name|jfe
operator|.
name|getFailedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISHED_MAPS"
argument_list|,
name|jfe
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISHED_REDUCES"
argument_list|,
name|jfe
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"MAP_COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|jfe
operator|.
name|getMapCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"REDUCE_COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|jfe
operator|.
name|getReduceCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TOTAL_COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|jfe
operator|.
name|getTotalCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"JOB_STATUS"
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_STARTED
case|:
name|TaskStartedEvent
name|tse
init|=
operator|(
name|TaskStartedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tse
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|tse
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SPLIT_LOCATIONS"
argument_list|,
name|tse
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tse
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_FAILED
case|:
name|TaskFailedEvent
name|tfe
init|=
operator|(
name|TaskFailedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tfe
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|tfe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ERROR"
argument_list|,
name|tfe
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FAILED_ATTEMPT_ID"
argument_list|,
name|tfe
operator|.
name|getFailedAttemptID
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tfe
operator|.
name|getFailedAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|tfe
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tfe
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_UPDATED
case|:
name|TaskUpdatedEvent
name|tue
init|=
operator|(
name|TaskUpdatedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|tue
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tue
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_FINISHED
case|:
name|TaskFinishedEvent
name|tfe2
init|=
operator|(
name|TaskFinishedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tfe2
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|tfe2
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|tfe2
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SUCCESSFUL_TASK_ATTEMPT_ID"
argument_list|,
name|tfe2
operator|.
name|getSuccessfulTaskAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tfe2
operator|.
name|getSuccessfulTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tfe2
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_STARTED
case|:
case|case
name|CLEANUP_ATTEMPT_STARTED
case|:
case|case
name|REDUCE_ATTEMPT_STARTED
case|:
case|case
name|SETUP_ATTEMPT_STARTED
case|:
name|TaskAttemptStartedEvent
name|tase
init|=
operator|(
name|TaskAttemptStartedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tase
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_ATTEMPT_ID"
argument_list|,
name|tase
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|tase
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"HTTP_PORT"
argument_list|,
name|tase
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TRACKER_NAME"
argument_list|,
name|tase
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tase
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SHUFFLE_PORT"
argument_list|,
name|tase
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"CONTAINER_ID"
argument_list|,
name|tase
operator|.
name|getContainerId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tase
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tase
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_FAILED
case|:
case|case
name|CLEANUP_ATTEMPT_FAILED
case|:
case|case
name|REDUCE_ATTEMPT_FAILED
case|:
case|case
name|SETUP_ATTEMPT_FAILED
case|:
case|case
name|MAP_ATTEMPT_KILLED
case|:
case|case
name|CLEANUP_ATTEMPT_KILLED
case|:
case|case
name|REDUCE_ATTEMPT_KILLED
case|:
case|case
name|SETUP_ATTEMPT_KILLED
case|:
name|TaskAttemptUnsuccessfulCompletionEvent
name|tauce
init|=
operator|(
name|TaskAttemptUnsuccessfulCompletionEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tauce
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_ATTEMPT_ID"
argument_list|,
name|tauce
operator|.
name|getTaskAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tauce
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|tauce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ERROR"
argument_list|,
name|tauce
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|tauce
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"HOSTNAME"
argument_list|,
name|tauce
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"PORT"
argument_list|,
name|tauce
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"RACK_NAME"
argument_list|,
name|tauce
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SHUFFLE_FINISH_TIME"
argument_list|,
name|tauce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SORT_FINISH_TIME"
argument_list|,
name|tauce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"MAP_FINISH_TIME"
argument_list|,
name|tauce
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|tauce
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tauce
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_ATTEMPT_FINISHED
case|:
name|MapAttemptFinishedEvent
name|mafe
init|=
operator|(
name|MapAttemptFinishedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|mafe
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|mafe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|mafe
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATE"
argument_list|,
name|mafe
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"MAP_FINISH_TIME"
argument_list|,
name|mafe
operator|.
name|getMapFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|mafe
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"HOSTNAME"
argument_list|,
name|mafe
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"PORT"
argument_list|,
name|mafe
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"RACK_NAME"
argument_list|,
name|mafe
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ATTEMPT_ID"
argument_list|,
name|mafe
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|mafe
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|mafe
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCE_ATTEMPT_FINISHED
case|:
name|ReduceAttemptFinishedEvent
name|rafe
init|=
operator|(
name|ReduceAttemptFinishedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|rafe
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ATTEMPT_ID"
argument_list|,
name|rafe
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rafe
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|rafe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|rafe
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATE"
argument_list|,
name|rafe
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SHUFFLE_FINISH_TIME"
argument_list|,
name|rafe
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SORT_FINISH_TIME"
argument_list|,
name|rafe
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|rafe
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"HOSTNAME"
argument_list|,
name|rafe
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"PORT"
argument_list|,
name|rafe
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"RACK_NAME"
argument_list|,
name|rafe
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|rafe
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETUP_ATTEMPT_FINISHED
case|:
case|case
name|CLEANUP_ATTEMPT_FINISHED
case|:
name|TaskAttemptFinishedEvent
name|tafe
init|=
operator|(
name|TaskAttemptFinishedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"TASK_TYPE"
argument_list|,
name|tafe
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"ATTEMPT_ID"
argument_list|,
name|tafe
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tafe
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"FINISH_TIME"
argument_list|,
name|tafe
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATUS"
argument_list|,
name|tafe
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"STATE"
argument_list|,
name|tafe
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"COUNTERS_GROUPS"
argument_list|,
name|countersToJSON
argument_list|(
name|tafe
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"HOSTNAME"
argument_list|,
name|tafe
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|tafe
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_TASK_ENTITY_TYPE
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addRelatedEntity
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AM_STARTED
case|:
name|AMStartedEvent
name|ase
init|=
operator|(
name|AMStartedEvent
operator|)
name|event
decl_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"APPLICATION_ATTEMPT_ID"
argument_list|,
name|ase
operator|.
name|getAppAttemptId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ase
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"CONTAINER_ID"
argument_list|,
name|ase
operator|.
name|getContainerId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ase
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NODE_MANAGER_HOST"
argument_list|,
name|ase
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NODE_MANAGER_PORT"
argument_list|,
name|ase
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"NODE_MANAGER_HTTP_PORT"
argument_list|,
name|ase
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"START_TIME"
argument_list|,
name|ase
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEvent
operator|.
name|addEventInfo
argument_list|(
literal|"SUBMIT_TIME"
argument_list|,
name|ase
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|addEvent
argument_list|(
name|tEvent
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityId
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tEntity
operator|.
name|setEntityType
argument_list|(
name|MAPREDUCE_JOB_ENTITY_TYPE
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
try|try
block|{
name|TimelinePutResponse
name|response
init|=
name|timelineClient
operator|.
name|putEntities
argument_list|(
name|tEntity
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TimelinePutResponse
operator|.
name|TimelinePutError
argument_list|>
name|errors
init|=
name|response
operator|.
name|getErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Timeline entities are successfully put in event "
operator|+
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|TimelinePutResponse
operator|.
name|TimelinePutError
name|error
range|:
name|errors
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when publishing entity ["
operator|+
name|error
operator|.
name|getEntityType
argument_list|()
operator|+
literal|","
operator|+
name|error
operator|.
name|getEntityId
argument_list|()
operator|+
literal|"], server side error code: "
operator|+
name|error
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
decl||
name|ClientHandlerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error putting entity "
operator|+
name|tEntity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|" to Timeline"
operator|+
literal|"Server"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|countersToJSON (Counters counters)
specifier|public
name|JsonNode
name|countersToJSON
parameter_list|(
name|Counters
name|counters
parameter_list|)
block|{
name|ArrayNode
name|nodes
init|=
name|FACTORY
operator|.
name|arrayNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CounterGroup
name|counterGroup
range|:
name|counters
control|)
block|{
name|ObjectNode
name|groupNode
init|=
name|nodes
operator|.
name|addObject
argument_list|()
decl_stmt|;
name|groupNode
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
name|counterGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groupNode
operator|.
name|put
argument_list|(
literal|"DISPLAY_NAME"
argument_list|,
name|counterGroup
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayNode
name|countersNode
init|=
name|groupNode
operator|.
name|putArray
argument_list|(
literal|"COUNTERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|counterGroup
control|)
block|{
name|ObjectNode
name|counterNode
init|=
name|countersNode
operator|.
name|addObject
argument_list|()
decl_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
name|counter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"DISPLAY_NAME"
argument_list|,
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|counterNode
operator|.
name|put
argument_list|(
literal|"VALUE"
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
DECL|method|setSummarySlotSeconds (JobSummary summary, Counters allCounters)
specifier|private
name|void
name|setSummarySlotSeconds
parameter_list|(
name|JobSummary
name|summary
parameter_list|,
name|Counters
name|allCounters
parameter_list|)
block|{
name|Counter
name|slotMillisMapCounter
init|=
name|allCounters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_MAPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|slotMillisMapCounter
operator|!=
literal|null
condition|)
block|{
name|summary
operator|.
name|setMapSlotSeconds
argument_list|(
name|slotMillisMapCounter
operator|.
name|getValue
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Counter
name|slotMillisReduceCounter
init|=
name|allCounters
operator|.
name|findCounter
argument_list|(
name|JobCounter
operator|.
name|SLOTS_MILLIS_REDUCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|slotMillisReduceCounter
operator|!=
literal|null
condition|)
block|{
name|summary
operator|.
name|setReduceSlotSeconds
argument_list|(
name|slotMillisReduceCounter
operator|.
name|getValue
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeEventWriter (JobId jobId)
specifier|protected
name|void
name|closeEventWriter
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No MetaInfo found for JobId: ["
operator|+
name|jobId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|mi
operator|.
name|isWriterActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inactive Writer: Likely received multiple JobFinished / "
operator|+
literal|"JobUnsuccessful events for JobId: ["
operator|+
name|jobId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Close the Writer
try|try
block|{
name|mi
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing writer for JobID: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|processDoneFiles (JobId jobId)
specifier|protected
name|void
name|processDoneFiles
parameter_list|(
name|JobId
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No MetaInfo found for JobId: ["
operator|+
name|jobId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mi
operator|.
name|getHistoryFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No file for job-history with "
operator|+
name|jobId
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mi
operator|.
name|getConfFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No file for jobconf with "
operator|+
name|jobId
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
comment|// Writing out the summary file.
comment|// TODO JH enhancement - reuse this file to store additional indexing info
comment|// like ACLs, etc. JHServer can use HDFS append to build an index file
comment|// with more info than is available via the filename.
name|Path
name|qualifiedSummaryDoneFile
init|=
literal|null
decl_stmt|;
name|FSDataOutputStream
name|summaryFileOut
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|doneSummaryFileName
init|=
name|getTempFileName
argument_list|(
name|JobHistoryUtils
operator|.
name|getIntermediateSummaryFileName
argument_list|(
name|jobId
argument_list|)
argument_list|)
decl_stmt|;
name|qualifiedSummaryDoneFile
operator|=
name|doneDirFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|doneDirPrefixPath
argument_list|,
name|doneSummaryFileName
argument_list|)
argument_list|)
expr_stmt|;
name|summaryFileOut
operator|=
name|doneDirFS
operator|.
name|create
argument_list|(
name|qualifiedSummaryDoneFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|summaryFileOut
operator|.
name|writeUTF
argument_list|(
name|mi
operator|.
name|getJobSummary
argument_list|()
operator|.
name|getJobSummaryString
argument_list|()
argument_list|)
expr_stmt|;
name|summaryFileOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|doneDirFS
operator|.
name|setPermission
argument_list|(
name|qualifiedSummaryDoneFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_INTERMEDIATE_FILE_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to write out JobSummaryInfo to ["
operator|+
name|qualifiedSummaryDoneFile
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
comment|// Move historyFile to Done Folder.
name|Path
name|qualifiedDoneFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mi
operator|.
name|getHistoryFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Path
name|historyFile
init|=
name|mi
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|Path
name|qualifiedLogFile
init|=
name|stagingDirFS
operator|.
name|makeQualified
argument_list|(
name|historyFile
argument_list|)
decl_stmt|;
name|int
name|jobNameLimit
init|=
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HS_JOBNAME_LIMIT
argument_list|,
name|JHAdminConfig
operator|.
name|DEFAULT_MR_HS_JOBNAME_LIMIT
argument_list|)
decl_stmt|;
name|String
name|doneJobHistoryFileName
init|=
name|getTempFileName
argument_list|(
name|FileNameIndexUtils
operator|.
name|getDoneFileName
argument_list|(
name|mi
operator|.
name|getJobIndexInfo
argument_list|()
argument_list|,
name|jobNameLimit
argument_list|)
argument_list|)
decl_stmt|;
name|qualifiedDoneFile
operator|=
name|doneDirFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|doneDirPrefixPath
argument_list|,
name|doneJobHistoryFileName
argument_list|)
argument_list|)
expr_stmt|;
name|moveToDoneNow
argument_list|(
name|qualifiedLogFile
argument_list|,
name|qualifiedDoneFile
argument_list|)
expr_stmt|;
block|}
comment|// Move confFile to Done Folder
name|Path
name|qualifiedConfDoneFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mi
operator|.
name|getConfFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Path
name|confFile
init|=
name|mi
operator|.
name|getConfFile
argument_list|()
decl_stmt|;
name|Path
name|qualifiedConfFile
init|=
name|stagingDirFS
operator|.
name|makeQualified
argument_list|(
name|confFile
argument_list|)
decl_stmt|;
name|String
name|doneConfFileName
init|=
name|getTempFileName
argument_list|(
name|JobHistoryUtils
operator|.
name|getIntermediateConfFileName
argument_list|(
name|jobId
argument_list|)
argument_list|)
decl_stmt|;
name|qualifiedConfDoneFile
operator|=
name|doneDirFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|doneDirPrefixPath
argument_list|,
name|doneConfFileName
argument_list|)
argument_list|)
expr_stmt|;
name|moveToDoneNow
argument_list|(
name|qualifiedConfFile
argument_list|,
name|qualifiedConfDoneFile
argument_list|)
expr_stmt|;
block|}
name|moveTmpToDone
argument_list|(
name|qualifiedSummaryDoneFile
argument_list|)
expr_stmt|;
name|moveTmpToDone
argument_list|(
name|qualifiedConfDoneFile
argument_list|)
expr_stmt|;
name|moveTmpToDone
argument_list|(
name|qualifiedDoneFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing writer for JobID: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|class|FlushTimerTask
specifier|private
class|class
name|FlushTimerTask
extends|extends
name|TimerTask
block|{
DECL|field|metaInfo
specifier|private
name|MetaInfo
name|metaInfo
decl_stmt|;
DECL|field|ioe
specifier|private
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|method|FlushTimerTask (MetaInfo metaInfo)
name|FlushTimerTask
parameter_list|(
name|MetaInfo
name|metaInfo
parameter_list|)
block|{
name|this
operator|.
name|metaInfo
operator|=
name|metaInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In flush timer task"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|metaInfo
operator|.
name|isTimerShutDown
argument_list|()
operator|&&
name|shouldRun
condition|)
name|metaInfo
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
DECL|method|getException ()
specifier|public
name|IOException
name|getException
parameter_list|()
block|{
return|return
name|ioe
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MetaInfo
specifier|protected
class|class
name|MetaInfo
block|{
DECL|field|historyFile
specifier|private
name|Path
name|historyFile
decl_stmt|;
DECL|field|confFile
specifier|private
name|Path
name|confFile
decl_stmt|;
DECL|field|writer
specifier|private
name|EventWriter
name|writer
decl_stmt|;
DECL|field|jobIndexInfo
name|JobIndexInfo
name|jobIndexInfo
decl_stmt|;
DECL|field|jobSummary
name|JobSummary
name|jobSummary
decl_stmt|;
DECL|field|flushTimer
name|Timer
name|flushTimer
decl_stmt|;
DECL|field|flushTimerTask
name|FlushTimerTask
name|flushTimerTask
decl_stmt|;
DECL|field|isTimerShutDown
specifier|private
name|boolean
name|isTimerShutDown
init|=
literal|false
decl_stmt|;
DECL|field|forcedJobStateOnShutDown
specifier|private
name|String
name|forcedJobStateOnShutDown
decl_stmt|;
DECL|method|MetaInfo (Path historyFile, Path conf, EventWriter writer, String user, String jobName, JobId jobId, String forcedJobStateOnShutDown, String queueName)
name|MetaInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|conf
parameter_list|,
name|EventWriter
name|writer
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobName
parameter_list|,
name|JobId
name|jobId
parameter_list|,
name|String
name|forcedJobStateOnShutDown
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
name|this
operator|.
name|confFile
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|jobIndexInfo
operator|=
operator|new
name|JobIndexInfo
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|jobName
argument_list|,
name|jobId
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobSummary
operator|=
operator|new
name|JobSummary
argument_list|()
expr_stmt|;
name|this
operator|.
name|flushTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"FlushTimer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|forcedJobStateOnShutDown
operator|=
name|forcedJobStateOnShutDown
expr_stmt|;
block|}
DECL|method|getHistoryFile ()
name|Path
name|getHistoryFile
parameter_list|()
block|{
return|return
name|historyFile
return|;
block|}
DECL|method|getConfFile ()
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|confFile
return|;
block|}
DECL|method|getJobIndexInfo ()
name|JobIndexInfo
name|getJobIndexInfo
parameter_list|()
block|{
return|return
name|jobIndexInfo
return|;
block|}
DECL|method|getJobSummary ()
name|JobSummary
name|getJobSummary
parameter_list|()
block|{
return|return
name|jobSummary
return|;
block|}
DECL|method|isWriterActive ()
name|boolean
name|isWriterActive
parameter_list|()
block|{
return|return
name|writer
operator|!=
literal|null
return|;
block|}
DECL|method|isTimerShutDown ()
name|boolean
name|isTimerShutDown
parameter_list|()
block|{
return|return
name|isTimerShutDown
return|;
block|}
DECL|method|getForcedJobStateOnShutDown ()
name|String
name|getForcedJobStateOnShutDown
parameter_list|()
block|{
return|return
name|forcedJobStateOnShutDown
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Job MetaInfo for "
operator|+
name|jobSummary
operator|.
name|getJobId
argument_list|()
operator|+
literal|" history file "
operator|+
name|historyFile
return|;
block|}
DECL|method|closeWriter ()
name|void
name|closeWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing Writer"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|writeEvent (HistoryEvent event)
name|void
name|writeEvent
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing event"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|processEventForFlush
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|maybeFlush
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processEventForFlush (HistoryEvent historyEvent)
name|void
name|processEventForFlush
parameter_list|(
name|HistoryEvent
name|historyEvent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|EventType
operator|.
name|MAP_ATTEMPT_FINISHED
argument_list|,
name|EventType
operator|.
name|MAP_ATTEMPT_FAILED
argument_list|,
name|EventType
operator|.
name|MAP_ATTEMPT_KILLED
argument_list|,
name|EventType
operator|.
name|REDUCE_ATTEMPT_FINISHED
argument_list|,
name|EventType
operator|.
name|REDUCE_ATTEMPT_FAILED
argument_list|,
name|EventType
operator|.
name|REDUCE_ATTEMPT_KILLED
argument_list|,
name|EventType
operator|.
name|TASK_FINISHED
argument_list|,
name|EventType
operator|.
name|TASK_FAILED
argument_list|,
name|EventType
operator|.
name|JOB_FINISHED
argument_list|,
name|EventType
operator|.
name|JOB_FAILED
argument_list|,
name|EventType
operator|.
name|JOB_KILLED
argument_list|)
operator|.
name|contains
argument_list|(
name|historyEvent
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
name|numUnflushedCompletionEvents
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|isTimerActive
condition|)
block|{
name|resetFlushTimer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isTimerShutDown
condition|)
block|{
name|flushTimerTask
operator|=
operator|new
name|FlushTimerTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|flushTimer
operator|.
name|schedule
argument_list|(
name|flushTimerTask
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
name|isTimerActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|resetFlushTimer ()
name|void
name|resetFlushTimer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flushTimerTask
operator|!=
literal|null
condition|)
block|{
name|IOException
name|exception
init|=
name|flushTimerTask
operator|.
name|getException
argument_list|()
decl_stmt|;
name|flushTimerTask
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
name|flushTimerTask
operator|=
literal|null
expr_stmt|;
block|}
name|isTimerActive
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|maybeFlush (HistoryEvent historyEvent)
name|void
name|maybeFlush
parameter_list|(
name|HistoryEvent
name|historyEvent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|eventQueue
operator|.
name|size
argument_list|()
operator|<
name|minQueueSizeForBatchingFlushes
operator|&&
name|numUnflushedCompletionEvents
operator|>
literal|0
operator|)
operator|||
name|numUnflushedCompletionEvents
operator|>=
name|maxUnflushedCompletionEvents
operator|||
name|isJobCompletionEvent
argument_list|(
name|historyEvent
argument_list|)
condition|)
block|{
name|this
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flush ()
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flushing "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|numUnflushedCompletionEvents
operator|!=
literal|0
condition|)
block|{
comment|// skipped timer cancel.
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|numUnflushedCompletionEvents
operator|=
literal|0
expr_stmt|;
name|resetFlushTimer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shutDownTimer ()
name|void
name|shutDownTimer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down timer "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|isTimerShutDown
operator|=
literal|true
expr_stmt|;
name|flushTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
if|if
condition|(
name|flushTimerTask
operator|!=
literal|null
operator|&&
name|flushTimerTask
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|flushTimerTask
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
DECL|method|moveTmpToDone (Path tmpPath)
specifier|private
name|void
name|moveTmpToDone
parameter_list|(
name|Path
name|tmpPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tmpPath
operator|!=
literal|null
condition|)
block|{
name|String
name|tmpFileName
init|=
name|tmpPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|getFileNameFromTmpFN
argument_list|(
name|tmpFileName
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|tmpPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|doneDirFS
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved tmp to done: "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO If the FS objects are the same, this should be a rename instead of a
comment|// copy.
DECL|method|moveToDoneNow (Path fromPath, Path toPath)
specifier|private
name|void
name|moveToDoneNow
parameter_list|(
name|Path
name|fromPath
parameter_list|,
name|Path
name|toPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check if path exists, in case of retries it may not exist
if|if
condition|(
name|stagingDirFS
operator|.
name|exists
argument_list|(
name|fromPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying "
operator|+
name|fromPath
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|toPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO temporarily removing the existing dst
if|if
condition|(
name|doneDirFS
operator|.
name|exists
argument_list|(
name|toPath
argument_list|)
condition|)
block|{
name|doneDirFS
operator|.
name|delete
argument_list|(
name|toPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|copied
init|=
name|FileUtil
operator|.
name|copy
argument_list|(
name|stagingDirFS
argument_list|,
name|fromPath
argument_list|,
name|doneDirFS
argument_list|,
name|toPath
argument_list|,
literal|false
argument_list|,
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|copied
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied to done location: "
operator|+
name|toPath
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|info
argument_list|(
literal|"copy failed"
argument_list|)
expr_stmt|;
name|doneDirFS
operator|.
name|setPermission
argument_list|(
name|toPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistoryUtils
operator|.
name|HISTORY_INTERMEDIATE_FILE_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pathExists (FileSystem fileSys, Path path)
name|boolean
name|pathExists
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fileSys
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getTempFileName (String srcFile)
specifier|private
name|String
name|getTempFileName
parameter_list|(
name|String
name|srcFile
parameter_list|)
block|{
return|return
name|srcFile
operator|+
literal|"_tmp"
return|;
block|}
DECL|method|getFileNameFromTmpFN (String tmpFileName)
specifier|private
name|String
name|getFileNameFromTmpFN
parameter_list|(
name|String
name|tmpFileName
parameter_list|)
block|{
comment|//TODO. Some error checking here.
return|return
name|tmpFileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tmpFileName
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
return|;
block|}
DECL|method|setForcejobCompletion (boolean forceJobCompletion)
specifier|public
name|void
name|setForcejobCompletion
parameter_list|(
name|boolean
name|forceJobCompletion
parameter_list|)
block|{
name|this
operator|.
name|forceJobCompletion
operator|=
name|forceJobCompletion
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobHistoryEventHandler notified that forceJobCompletion is "
operator|+
name|forceJobCompletion
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobStateForJobUnsuccessfulCompletionEvent ( String forcedJobStateOnShutDown)
specifier|private
name|String
name|createJobStateForJobUnsuccessfulCompletionEvent
parameter_list|(
name|String
name|forcedJobStateOnShutDown
parameter_list|)
block|{
if|if
condition|(
name|forcedJobStateOnShutDown
operator|==
literal|null
operator|||
name|forcedJobStateOnShutDown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|JobState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|forcedJobStateOnShutDown
operator|.
name|equals
argument_list|(
name|JobStateInternal
operator|.
name|ERROR
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|forcedJobStateOnShutDown
operator|.
name|equals
argument_list|(
name|JobStateInternal
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|JobState
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|forcedJobStateOnShutDown
operator|.
name|equals
argument_list|(
name|JobStateInternal
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|JobState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|JobState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFlushTimerStatus ()
name|boolean
name|getFlushTimerStatus
parameter_list|()
block|{
return|return
name|isTimerActive
return|;
block|}
block|}
end_class

end_unit

