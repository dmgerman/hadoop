begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|COUNTER_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|COUNTER_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|JOB_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|webapp
operator|.
name|AMParams
operator|.
name|TASK_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|JQueryUI
operator|.
name|_INFO_WRAP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|SingleCounterBlock
specifier|public
class|class
name|SingleCounterBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|values
specifier|protected
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|values
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|job
specifier|protected
name|Job
name|job
decl_stmt|;
DECL|field|task
specifier|protected
name|Task
name|task
decl_stmt|;
DECL|field|counterType
specifier|private
name|TaskType
name|counterType
decl_stmt|;
DECL|method|SingleCounterBlock (AppContext appCtx, ViewContext ctx)
annotation|@
name|Inject
name|SingleCounterBlock
parameter_list|(
name|AppContext
name|appCtx
parameter_list|,
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|populateMembers
argument_list|(
name|appCtx
argument_list|)
expr_stmt|;
block|}
DECL|method|render (Block html)
annotation|@
name|Override
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Sorry, no counters for nonexistent"
argument_list|,
name|$
argument_list|(
name|JOB_ID
argument_list|,
literal|"job"
argument_list|)
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|$
argument_list|(
name|TASK_ID
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|task
operator|==
literal|null
condition|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Sorry, no counters for nonexistent"
argument_list|,
name|$
argument_list|(
name|TASK_ID
argument_list|,
literal|"task"
argument_list|)
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|columnType
init|=
name|task
operator|==
literal|null
condition|?
literal|"Task"
else|:
literal|"Task Attempt"
decl_stmt|;
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|div
argument_list|(
name|_INFO_WRAP
argument_list|)
operator|.
name|table
argument_list|(
literal|"#singleCounter"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".ui-state-default"
argument_list|,
name|columnType
argument_list|)
operator|.
name|th
argument_list|(
literal|".ui-state-default"
argument_list|,
literal|"Value"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TR
argument_list|<
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|row
init|=
name|tbody
operator|.
name|tr
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|td
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|row
operator|.
name|td
argument_list|()
operator|.
name|br
argument_list|()
operator|.
name|$title
argument_list|(
name|val
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|(
name|val
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|td
argument_list|()
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"singletaskcounter"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|$
argument_list|(
name|COUNTER_GROUP
argument_list|)
argument_list|,
name|$
argument_list|(
name|COUNTER_NAME
argument_list|)
argument_list|)
argument_list|,
name|id
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|row
operator|.
name|td
argument_list|()
operator|.
name|br
argument_list|()
operator|.
name|$title
argument_list|(
name|val
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"singletaskcounter"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|$
argument_list|(
name|COUNTER_GROUP
argument_list|)
argument_list|,
name|$
argument_list|(
name|COUNTER_NAME
argument_list|)
argument_list|)
argument_list|,
name|val
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|row
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
DECL|method|populateMembers (AppContext ctx)
specifier|private
name|void
name|populateMembers
parameter_list|(
name|AppContext
name|ctx
parameter_list|)
block|{
name|JobId
name|jobID
init|=
literal|null
decl_stmt|;
name|TaskId
name|taskID
init|=
literal|null
decl_stmt|;
name|String
name|tid
init|=
name|$
argument_list|(
name|TASK_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|$
argument_list|(
name|TITLE
argument_list|)
operator|.
name|contains
argument_list|(
literal|"MAPS"
argument_list|)
condition|)
block|{
name|counterType
operator|=
name|TaskType
operator|.
name|MAP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|$
argument_list|(
name|TITLE
argument_list|)
operator|.
name|contains
argument_list|(
literal|"REDUCES"
argument_list|)
condition|)
block|{
name|counterType
operator|=
name|TaskType
operator|.
name|REDUCE
expr_stmt|;
block|}
else|else
block|{
name|counterType
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|taskID
operator|=
name|MRApps
operator|.
name|toTaskID
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|jobID
operator|=
name|taskID
operator|.
name|getJobId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|jid
init|=
name|$
argument_list|(
name|JOB_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jobID
operator|=
name|MRApps
operator|.
name|toJobID
argument_list|(
name|jid
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobID
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|job
operator|=
name|ctx
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|taskID
operator|!=
literal|null
condition|)
block|{
name|task
operator|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|entry
range|:
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|value
init|=
literal|0
decl_stmt|;
name|Counters
name|counters
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|CounterGroup
name|group
init|=
operator|(
name|counters
operator|!=
literal|null
operator|)
condition|?
name|counters
operator|.
name|getGroup
argument_list|(
name|$
argument_list|(
name|COUNTER_GROUP
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|Counter
name|c
init|=
name|group
operator|.
name|findCounter
argument_list|(
name|$
argument_list|(
name|COUNTER_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|c
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|values
operator|.
name|put
argument_list|(
name|MRApps
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// Get all types of counters
name|Map
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TaskId
argument_list|,
name|Task
argument_list|>
name|entry
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|value
init|=
literal|0
decl_stmt|;
name|Counters
name|counters
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|CounterGroup
name|group
init|=
operator|(
name|counters
operator|!=
literal|null
operator|)
condition|?
name|counters
operator|.
name|getGroup
argument_list|(
name|$
argument_list|(
name|COUNTER_GROUP
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|Counter
name|c
init|=
name|group
operator|.
name|findCounter
argument_list|(
name|$
argument_list|(
name|COUNTER_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|c
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|counterType
operator|==
literal|null
operator|||
name|counterType
operator|==
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|MRApps
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

