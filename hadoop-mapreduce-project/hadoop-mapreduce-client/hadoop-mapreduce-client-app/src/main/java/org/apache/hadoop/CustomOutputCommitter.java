begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContext
import|;
end_import

begin_class
DECL|class|CustomOutputCommitter
specifier|public
class|class
name|CustomOutputCommitter
extends|extends
name|OutputCommitter
block|{
DECL|field|JOB_SETUP_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|JOB_SETUP_FILE_NAME
init|=
literal|"_job_setup"
decl_stmt|;
DECL|field|JOB_COMMIT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|JOB_COMMIT_FILE_NAME
init|=
literal|"_job_commit"
decl_stmt|;
DECL|field|JOB_ABORT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|JOB_ABORT_FILE_NAME
init|=
literal|"_job_abort"
decl_stmt|;
DECL|field|TASK_SETUP_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TASK_SETUP_FILE_NAME
init|=
literal|"_task_setup"
decl_stmt|;
DECL|field|TASK_ABORT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TASK_ABORT_FILE_NAME
init|=
literal|"_task_abort"
decl_stmt|;
DECL|field|TASK_COMMIT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TASK_COMMIT_FILE_NAME
init|=
literal|"_task_commit"
decl_stmt|;
annotation|@
name|Override
DECL|method|setupJob (JobContext jobContext)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|jobContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|JOB_SETUP_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext jobContext)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|jobContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|JOB_COMMIT_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext jobContext, int status)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|int
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|jobContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|JOB_ABORT_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|taskContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|TASK_SETUP_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext taskContext)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|taskContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|TASK_COMMIT_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|taskContext
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|TASK_ABORT_FILE_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (JobConf conf , String filename)
specifier|private
name|void
name|writeFile
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"writing file ----"
operator|+
name|filename
argument_list|)
expr_stmt|;
name|Path
name|outputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|filename
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

