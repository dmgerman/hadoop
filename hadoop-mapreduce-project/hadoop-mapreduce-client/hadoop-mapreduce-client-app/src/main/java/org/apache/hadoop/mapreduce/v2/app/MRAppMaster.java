begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|LocalContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptListenerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|AMStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryCopyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|MRClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|commit
operator|.
name|CommitterEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|JobStateInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobStartEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|local
operator|.
name|LocalContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMCommunicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMHeartbeatHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|DefaultSpeculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|Speculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SpeculatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The Map-Reduce Application Master.  * The state machine is encapsulated in the implementation of Job interface.  * All state changes happens via Job interface. Each event   * results in a Finite State Transition in Job.  *   * MR AppMaster is the composition of loosely coupled services. The services   * interact with each other via events. The components resembles the   * Actors model. The component acts on received event and send out the   * events to other components.  * This keeps it highly concurrent with no or minimal synchronization needs.  *   * The events are dispatched by a central Dispatch mechanism. All components  * register to the Dispatcher.  *   * The information is shared across different components using AppContext.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|MRAppMaster
specifier|public
class|class
name|MRAppMaster
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRAppMaster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Priority of the MRAppMaster shutdown hook.    */
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|appSubmitTime
specifier|private
specifier|final
name|long
name|appSubmitTime
decl_stmt|;
DECL|field|appName
specifier|private
name|String
name|appName
decl_stmt|;
DECL|field|appAttemptID
specifier|private
specifier|final
name|ApplicationAttemptId
name|appAttemptID
decl_stmt|;
DECL|field|containerID
specifier|private
specifier|final
name|ContainerId
name|containerID
decl_stmt|;
DECL|field|nmHost
specifier|private
specifier|final
name|String
name|nmHost
decl_stmt|;
DECL|field|nmPort
specifier|private
specifier|final
name|int
name|nmPort
decl_stmt|;
DECL|field|nmHttpPort
specifier|private
specifier|final
name|int
name|nmHttpPort
decl_stmt|;
DECL|field|metrics
specifier|protected
specifier|final
name|MRAppMetrics
name|metrics
decl_stmt|;
DECL|field|maxAppAttempts
specifier|private
specifier|final
name|int
name|maxAppAttempts
decl_stmt|;
DECL|field|completedTasksFromPreviousRun
specifier|private
name|Map
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
name|completedTasksFromPreviousRun
decl_stmt|;
DECL|field|amInfos
specifier|private
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
decl_stmt|;
DECL|field|context
specifier|private
name|AppContext
name|context
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|clientService
specifier|private
name|ClientService
name|clientService
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|ContainerAllocator
name|containerAllocator
decl_stmt|;
DECL|field|containerLauncher
specifier|private
name|ContainerLauncher
name|containerLauncher
decl_stmt|;
DECL|field|committerEventHandler
specifier|private
name|EventHandler
argument_list|<
name|CommitterEvent
argument_list|>
name|committerEventHandler
decl_stmt|;
DECL|field|speculator
specifier|private
name|Speculator
name|speculator
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|jobTokenSecretManager
specifier|private
name|JobTokenSecretManager
name|jobTokenSecretManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
DECL|field|jobId
specifier|private
name|JobId
name|jobId
decl_stmt|;
DECL|field|newApiCommitter
specifier|private
name|boolean
name|newApiCommitter
decl_stmt|;
DECL|field|committer
specifier|private
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|jobEventDispatcher
specifier|private
name|JobEventDispatcher
name|jobEventDispatcher
decl_stmt|;
DECL|field|jobHistoryEventHandler
specifier|private
name|JobHistoryEventHandler
name|jobHistoryEventHandler
decl_stmt|;
DECL|field|speculatorEventDispatcher
specifier|private
name|SpeculatorEventDispatcher
name|speculatorEventDispatcher
decl_stmt|;
DECL|field|job
specifier|private
name|Job
name|job
decl_stmt|;
DECL|field|fsTokens
specifier|private
name|Credentials
name|fsTokens
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// Filled during init
DECL|field|currentUser
specifier|protected
name|UserGroupInformation
name|currentUser
decl_stmt|;
comment|// Will be setup during init
DECL|field|isLastAMRetry
specifier|private
specifier|volatile
name|boolean
name|isLastAMRetry
init|=
literal|false
decl_stmt|;
comment|//Something happened and we should shut down right after we start up.
DECL|field|errorHappenedShutDown
name|boolean
name|errorHappenedShutDown
init|=
literal|false
decl_stmt|;
DECL|field|shutDownMessage
specifier|private
name|String
name|shutDownMessage
init|=
literal|null
decl_stmt|;
DECL|field|forcedState
name|JobStateInternal
name|forcedState
init|=
literal|null
decl_stmt|;
DECL|field|recoveredJobStartTime
specifier|private
name|long
name|recoveredJobStartTime
init|=
literal|0
decl_stmt|;
DECL|method|MRAppMaster (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String nmHost, int nmPort, int nmHttpPort, long appSubmitTime, int maxAppAttempts)
specifier|public
name|MRAppMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|nmHost
parameter_list|,
name|int
name|nmPort
parameter_list|,
name|int
name|nmHttpPort
parameter_list|,
name|long
name|appSubmitTime
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|nmHost
argument_list|,
name|nmPort
argument_list|,
name|nmHttpPort
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|appSubmitTime
argument_list|,
name|maxAppAttempts
argument_list|)
expr_stmt|;
block|}
DECL|method|MRAppMaster (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String nmHost, int nmPort, int nmHttpPort, Clock clock, long appSubmitTime, int maxAppAttempts)
specifier|public
name|MRAppMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|nmHost
parameter_list|,
name|int
name|nmPort
parameter_list|,
name|int
name|nmHttpPort
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|long
name|appSubmitTime
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|)
block|{
name|super
argument_list|(
name|MRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|appSubmitTime
operator|=
name|appSubmitTime
expr_stmt|;
name|this
operator|.
name|appAttemptID
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|containerID
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nmHost
operator|=
name|nmHost
expr_stmt|;
name|this
operator|.
name|nmPort
operator|=
name|nmPort
expr_stmt|;
name|this
operator|.
name|nmHttpPort
operator|=
name|nmHttpPort
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|MRAppMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAppAttempts
operator|=
name|maxAppAttempts
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created MRAppMaster for application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (final Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|Dispatcher
operator|.
name|DISPATCHER_EXIT_ON_ERROR_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|downloadTokensAndSetupUGI
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|isLastAMRetry
operator|=
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|>=
name|maxAppAttempts
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The specific max attempts: "
operator|+
name|maxAppAttempts
operator|+
literal|" for application: "
operator|+
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|". Attempt num: "
operator|+
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|" is last retry: "
operator|+
name|isLastAMRetry
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|RunningAppContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Job name is the same as the app name util we support DAG of jobs
comment|// for an app later
name|appName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
literal|"<missing app name>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|newApiCommitter
operator|=
literal|false
expr_stmt|;
name|jobId
operator|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numReduceTasks
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|numReduceTasks
operator|>
literal|0
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
operator|||
operator|(
name|numReduceTasks
operator|==
literal|0
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
name|newApiCommitter
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using mapred newApiCommitter."
argument_list|)
expr_stmt|;
block|}
name|boolean
name|copyHistory
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Path
name|stagingDir
init|=
name|MRApps
operator|.
name|getStagingAreaDir
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|stagingExists
init|=
name|fs
operator|.
name|exists
argument_list|(
name|stagingDir
argument_list|)
decl_stmt|;
name|Path
name|startCommitFile
init|=
name|MRApps
operator|.
name|getStartJobCommitFile
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|boolean
name|commitStarted
init|=
name|fs
operator|.
name|exists
argument_list|(
name|startCommitFile
argument_list|)
decl_stmt|;
name|Path
name|endCommitSuccessFile
init|=
name|MRApps
operator|.
name|getEndJobCommitSuccessFile
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|boolean
name|commitSuccess
init|=
name|fs
operator|.
name|exists
argument_list|(
name|endCommitSuccessFile
argument_list|)
decl_stmt|;
name|Path
name|endCommitFailureFile
init|=
name|MRApps
operator|.
name|getEndJobCommitFailureFile
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|boolean
name|commitFailure
init|=
name|fs
operator|.
name|exists
argument_list|(
name|endCommitFailureFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stagingExists
condition|)
block|{
name|isLastAMRetry
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt num: "
operator|+
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|" is last retry: "
operator|+
name|isLastAMRetry
operator|+
literal|" because the staging dir doesn't exist."
argument_list|)
expr_stmt|;
name|errorHappenedShutDown
operator|=
literal|true
expr_stmt|;
name|forcedState
operator|=
name|JobStateInternal
operator|.
name|ERROR
expr_stmt|;
name|shutDownMessage
operator|=
literal|"Staging dir does not exist "
operator|+
name|stagingDir
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|shutDownMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commitStarted
condition|)
block|{
comment|//A commit was started so this is the last time, we just need to know
comment|// what result we will use to notify, and how we will unregister
name|errorHappenedShutDown
operator|=
literal|true
expr_stmt|;
name|isLastAMRetry
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt num: "
operator|+
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|" is last retry: "
operator|+
name|isLastAMRetry
operator|+
literal|" because a commit was started."
argument_list|)
expr_stmt|;
name|copyHistory
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|commitSuccess
condition|)
block|{
name|shutDownMessage
operator|=
literal|"We crashed after successfully committing. Recovering."
expr_stmt|;
name|forcedState
operator|=
name|JobStateInternal
operator|.
name|SUCCEEDED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commitFailure
condition|)
block|{
name|shutDownMessage
operator|=
literal|"We crashed after a commit failure."
expr_stmt|;
name|forcedState
operator|=
name|JobStateInternal
operator|.
name|FAILED
expr_stmt|;
block|}
else|else
block|{
comment|//The commit is still pending, commit error
name|shutDownMessage
operator|=
literal|"We crashed durring a commit"
expr_stmt|;
name|forcedState
operator|=
name|JobStateInternal
operator|.
name|ERROR
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Error while initializing"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|errorHappenedShutDown
condition|)
block|{
name|dispatcher
operator|=
name|createDispatcher
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|NoopEventHandler
name|eater
init|=
operator|new
name|NoopEventHandler
argument_list|()
decl_stmt|;
comment|//We do not have a JobEventDispatcher in this path
name|dispatcher
operator|.
name|register
argument_list|(
name|JobEventType
operator|.
name|class
argument_list|,
name|eater
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|historyService
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyHistory
condition|)
block|{
name|historyService
operator|=
name|createJobHistoryHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|historyService
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dispatcher
operator|.
name|register
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|eater
argument_list|)
expr_stmt|;
block|}
comment|// service to allocate containers from RM (if non-uber) or to fake it (uber)
name|containerAllocator
operator|=
name|createContainerAllocator
argument_list|(
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|containerAllocator
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|containerAllocator
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyHistory
condition|)
block|{
comment|// Add the staging directory cleaner before the history server but after
comment|// the container allocator so the staging directory is cleaned after
comment|// the history has been flushed but before unregistering with the RM.
name|addService
argument_list|(
name|createStagingDirCleaningService
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the JobHistoryEventHandler last so that it is properly stopped first.
comment|// This will guarantee that all history-events are flushed before AM goes
comment|// ahead with shutdown.
comment|// Note: Even though JobHistoryEventHandler is started last, if any
comment|// component creates a JobHistoryEvent in the meanwhile, it will be just be
comment|// queued inside the JobHistoryEventHandler
name|addIfService
argument_list|(
name|historyService
argument_list|)
expr_stmt|;
name|JobHistoryCopyService
name|cpHist
init|=
operator|new
name|JobHistoryCopyService
argument_list|(
name|appAttemptID
argument_list|,
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
decl_stmt|;
name|addIfService
argument_list|(
name|cpHist
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|committer
operator|=
name|createOutputCommitter
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
comment|//service to handle requests from JobClient
name|clientService
operator|=
name|createClientService
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|clientService
argument_list|)
expr_stmt|;
name|containerAllocator
operator|=
name|createContainerAllocator
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|//service to handle the output committer
name|committerEventHandler
operator|=
name|createCommitterEventHandler
argument_list|(
name|context
argument_list|,
name|committer
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|committerEventHandler
argument_list|)
expr_stmt|;
comment|//service to handle requests to TaskUmbilicalProtocol
name|taskAttemptListener
operator|=
name|createTaskAttemptListener
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|taskAttemptListener
argument_list|)
expr_stmt|;
comment|//service to log job history events
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|historyService
init|=
name|createJobHistoryHandler
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|historyService
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobEventDispatcher
operator|=
operator|new
name|JobEventDispatcher
argument_list|()
expr_stmt|;
comment|//register the event dispatchers
name|dispatcher
operator|.
name|register
argument_list|(
name|JobEventType
operator|.
name|class
argument_list|,
name|jobEventDispatcher
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskEventType
operator|.
name|class
argument_list|,
operator|new
name|TaskEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|TaskAttemptEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|CommitterEventType
operator|.
name|class
argument_list|,
name|committerEventHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|//optional service to speculate on task attempts' progress
name|speculator
operator|=
name|createSpeculator
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|speculator
argument_list|)
expr_stmt|;
block|}
name|speculatorEventDispatcher
operator|=
operator|new
name|SpeculatorEventDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|speculatorEventDispatcher
argument_list|)
expr_stmt|;
comment|// service to allocate containers from RM (if non-uber) or to fake it (uber)
name|addIfService
argument_list|(
name|containerAllocator
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|containerAllocator
argument_list|)
expr_stmt|;
comment|// corresponding service to launch allocated containers via NodeManager
name|containerLauncher
operator|=
name|createContainerLauncher
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|containerLauncher
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|containerLauncher
argument_list|)
expr_stmt|;
comment|// Add the staging directory cleaner before the history server but after
comment|// the container allocator so the staging directory is cleaned after
comment|// the history has been flushed but before unregistering with the RM.
name|addService
argument_list|(
name|createStagingDirCleaningService
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the JobHistoryEventHandler last so that it is properly stopped first.
comment|// This will guarantee that all history-events are flushed before AM goes
comment|// ahead with shutdown.
comment|// Note: Even though JobHistoryEventHandler is started last, if any
comment|// component creates a JobHistoryEvent in the meanwhile, it will be just be
comment|// queued inside the JobHistoryEventHandler
name|addIfService
argument_list|(
name|historyService
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// end of init()
DECL|method|createDispatcher ()
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|AsyncDispatcher
argument_list|()
return|;
block|}
DECL|method|createOutputCommitter (Configuration conf)
specifier|private
name|OutputCommitter
name|createOutputCommitter
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|OutputCommitter
name|committer
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter set in config "
operator|+
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.output.committer.class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newApiCommitter
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
name|taskID
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptID
argument_list|)
argument_list|)
decl_stmt|;
name|OutputFormat
name|outputFormat
decl_stmt|;
try|try
block|{
name|outputFormat
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|committer
operator|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|committer
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
literal|"mapred.output.committer.class"
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter is "
operator|+
name|committer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|committer
return|;
block|}
DECL|method|keepJobFiles (JobConf conf)
specifier|protected
name|boolean
name|keepJobFiles
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
operator|(
name|conf
operator|.
name|getKeepTaskFilesPattern
argument_list|()
operator|!=
literal|null
operator|||
name|conf
operator|.
name|getKeepFailedTaskFiles
argument_list|()
operator|)
return|;
block|}
comment|/**    * Create the default file System for this job.    * @param conf the conf object    * @return the default filesystem for this job    * @throws IOException    */
DECL|method|getFileSystem (Configuration conf)
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getCredentials ()
specifier|protected
name|Credentials
name|getCredentials
parameter_list|()
block|{
return|return
name|fsTokens
return|;
block|}
comment|/**    * clean up staging directories for the job.    * @throws IOException    */
DECL|method|cleanupStagingDir ()
specifier|public
name|void
name|cleanupStagingDir
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* make sure we clean the staging files */
name|String
name|jobTempDir
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|keepJobFiles
argument_list|(
operator|new
name|JobConf
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|jobTempDir
operator|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobTempDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job Staging directory is null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|jobTempDirPath
init|=
operator|new
name|Path
argument_list|(
name|jobTempDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting staging directory "
operator|+
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|getConfig
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|jobTempDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobTempDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to cleanup staging dir "
operator|+
name|jobTempDir
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Exit call. Just in a function call to enable testing.    */
DECL|method|sysexit ()
specifier|protected
name|void
name|sysexit
parameter_list|()
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|shutDownJob ()
specifier|public
name|void
name|shutDownJob
parameter_list|()
block|{
comment|// job has finished
comment|// this is the only job, so shut down the Appmaster
comment|// note in a workflow scenario, this may lead to creation of a new
comment|// job (FIXME?)
comment|// Send job-end notification
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MR_JOB_END_NOTIFICATION_URL
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job end notification started for jobID : "
operator|+
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|JobEndNotifier
name|notifier
init|=
operator|new
name|JobEndNotifier
argument_list|()
decl_stmt|;
name|notifier
operator|.
name|setConf
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|notify
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job end notification interrupted for jobID : "
operator|+
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO:currently just wait for some time so clients can know the
comment|// final states. Will be removed once RM come on.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|//if isLastAMRetry comes as true, should never set it to false
if|if
condition|(
operator|!
name|isLastAMRetry
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|JobImpl
operator|)
name|job
operator|)
operator|.
name|getInternalState
argument_list|()
operator|!=
name|JobStateInternal
operator|.
name|REBOOT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We are finishing cleanly so this is the last retry"
argument_list|)
expr_stmt|;
name|isLastAMRetry
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|notifyIsLastAMRetry
argument_list|(
name|isLastAMRetry
argument_list|)
expr_stmt|;
comment|// Stop all services
comment|// This will also send the final report to the ResourceManager
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling stop for all the services"
argument_list|)
expr_stmt|;
name|MRAppMaster
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Graceful stop failed "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|//Bring the process down by force.
comment|//Not needed after HADOOP-7140
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting MR AppMaster..GoodBye!"
argument_list|)
expr_stmt|;
name|sysexit
argument_list|()
expr_stmt|;
block|}
DECL|class|JobFinishEventHandler
specifier|private
class|class
name|JobFinishEventHandler
implements|implements
name|EventHandler
argument_list|<
name|JobFinishEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (JobFinishEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobFinishEvent
name|event
parameter_list|)
block|{
comment|// Create a new thread to shutdown the AM. We should not do it in-line
comment|// to avoid blocking the dispatcher itself.
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|shutDownJob
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * create an event handler that handles the job finish event.    * @return the job finish event handler.    */
DECL|method|createJobFinishEventHandler ()
specifier|protected
name|EventHandler
argument_list|<
name|JobFinishEvent
argument_list|>
name|createJobFinishEventHandler
parameter_list|()
block|{
return|return
operator|new
name|JobFinishEventHandler
argument_list|()
return|;
block|}
comment|/** Create and initialize (but don't start) a single job.     * @param forcedState a state to force the job into or null for normal operation.     * @param diagnostic a diagnostic message to include with the job.    */
DECL|method|createJob (Configuration conf, JobStateInternal forcedState, String diagnostic)
specifier|protected
name|Job
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobStateInternal
name|forcedState
parameter_list|,
name|String
name|diagnostic
parameter_list|)
block|{
comment|// create single job
name|Job
name|newJob
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
name|appAttemptID
argument_list|,
name|conf
argument_list|,
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|taskAttemptListener
argument_list|,
name|jobTokenSecretManager
argument_list|,
name|fsTokens
argument_list|,
name|clock
argument_list|,
name|completedTasksFromPreviousRun
argument_list|,
name|metrics
argument_list|,
name|committer
argument_list|,
name|newApiCommitter
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|appSubmitTime
argument_list|,
name|amInfos
argument_list|,
name|context
argument_list|,
name|forcedState
argument_list|,
name|diagnostic
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RunningAppContext
operator|)
name|context
operator|)
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|newJob
operator|.
name|getID
argument_list|()
argument_list|,
name|newJob
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|JobFinishEvent
operator|.
name|Type
operator|.
name|class
argument_list|,
name|createJobFinishEventHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newJob
return|;
block|}
comment|// end createJob()
comment|/**    * Obtain the tokens needed by the job and put them in the UGI    * @param conf    */
DECL|method|downloadTokensAndSetupUGI (Configuration conf)
specifier|protected
name|void
name|downloadTokensAndSetupUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|currentUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
comment|// Read the file-system tokens from the localized tokens-file.
name|Path
name|jobSubmitDir
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SUBMIT_DIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|jobTokenFile
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|APPLICATION_TOKENS_FILE
argument_list|)
decl_stmt|;
name|fsTokens
operator|.
name|addAll
argument_list|(
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|jobTokenFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"jobSubmitDir="
operator|+
name|jobSubmitDir
operator|+
literal|" jobTokenFile="
operator|+
name|jobTokenFile
argument_list|)
expr_stmt|;
name|currentUser
operator|.
name|addCredentials
argument_list|(
name|fsTokens
argument_list|)
expr_stmt|;
comment|// For use by AppMaster itself.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|addIfService (Object object)
specifier|protected
name|void
name|addIfService
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|addService
argument_list|(
operator|(
name|Service
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|jobHistoryEventHandler
operator|=
operator|new
name|JobHistoryEventHandler
argument_list|(
name|context
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|jobHistoryEventHandler
return|;
block|}
DECL|method|createStagingDirCleaningService ()
specifier|protected
name|AbstractService
name|createStagingDirCleaningService
parameter_list|()
block|{
return|return
operator|new
name|StagingDirCleaningService
argument_list|()
return|;
block|}
DECL|method|createSpeculator (Configuration conf, AppContext context)
specifier|protected
name|Speculator
name|createSpeculator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Speculator
argument_list|>
name|speculatorClass
decl_stmt|;
try|try
block|{
name|speculatorClass
comment|// "yarn.mapreduce.job.speculator.class"
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|DefaultSpeculator
operator|.
name|class
argument_list|,
name|Speculator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Speculator
argument_list|>
name|speculatorConstructor
init|=
name|speculatorClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Speculator
name|result
init|=
name|speculatorConstructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|createTaskAttemptListener (AppContext context)
specifier|protected
name|TaskAttemptListener
name|createTaskAttemptListener
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|TaskAttemptListener
name|lis
init|=
operator|new
name|TaskAttemptListenerImpl
argument_list|(
name|context
argument_list|,
name|jobTokenSecretManager
argument_list|,
name|getRMHeartbeatHandler
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|lis
return|;
block|}
DECL|method|createCommitterEventHandler ( AppContext context, OutputCommitter committer)
specifier|protected
name|EventHandler
argument_list|<
name|CommitterEvent
argument_list|>
name|createCommitterEventHandler
parameter_list|(
name|AppContext
name|context
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|)
block|{
return|return
operator|new
name|CommitterEventHandler
argument_list|(
name|context
argument_list|,
name|committer
argument_list|,
name|getRMHeartbeatHandler
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createContainerAllocator ( final ClientService clientService, final AppContext context)
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
specifier|final
name|ClientService
name|clientService
parameter_list|,
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerAllocatorRouter
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|getRMHeartbeatHandler ()
specifier|protected
name|RMHeartbeatHandler
name|getRMHeartbeatHandler
parameter_list|()
block|{
return|return
operator|(
name|RMHeartbeatHandler
operator|)
name|containerAllocator
return|;
block|}
specifier|protected
name|ContainerLauncher
DECL|method|createContainerLauncher (final AppContext context)
name|createContainerLauncher
parameter_list|(
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerLauncherRouter
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|//TODO:should have an interface for MRClientService
DECL|method|createClientService (AppContext context)
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|method|getAppID ()
specifier|public
name|ApplicationId
name|getAppID
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
DECL|method|getAttemptID ()
specifier|public
name|ApplicationAttemptId
name|getAttemptID
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
DECL|method|getJobId ()
specifier|public
name|JobId
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
DECL|method|getCommitter ()
specifier|public
name|OutputCommitter
name|getCommitter
parameter_list|()
block|{
return|return
name|committer
return|;
block|}
DECL|method|isNewApiCommitter ()
specifier|public
name|boolean
name|isNewApiCommitter
parameter_list|()
block|{
return|return
name|newApiCommitter
return|;
block|}
DECL|method|getStartCount ()
specifier|public
name|int
name|getStartCount
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
return|;
block|}
DECL|method|getContext ()
specifier|public
name|AppContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getDispatcher ()
specifier|public
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
DECL|method|getCompletedTaskFromPreviousRun ()
specifier|public
name|Map
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
name|getCompletedTaskFromPreviousRun
parameter_list|()
block|{
return|return
name|completedTasksFromPreviousRun
return|;
block|}
DECL|method|getAllAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAllAMInfos
parameter_list|()
block|{
return|return
name|amInfos
return|;
block|}
DECL|method|getContainerAllocator ()
specifier|public
name|ContainerAllocator
name|getContainerAllocator
parameter_list|()
block|{
return|return
name|containerAllocator
return|;
block|}
DECL|method|getContainerLauncher ()
specifier|public
name|ContainerLauncher
name|getContainerLauncher
parameter_list|()
block|{
return|return
name|containerLauncher
return|;
block|}
DECL|method|getTaskAttemptListener ()
specifier|public
name|TaskAttemptListener
name|getTaskAttemptListener
parameter_list|()
block|{
return|return
name|taskAttemptListener
return|;
block|}
DECL|method|isLastAMRetry ()
specifier|public
name|Boolean
name|isLastAMRetry
parameter_list|()
block|{
return|return
name|isLastAMRetry
return|;
block|}
comment|/**    * By the time life-cycle of this router starts, job-init would have already    * happened.    */
DECL|class|ContainerAllocatorRouter
specifier|private
specifier|final
class|class
name|ContainerAllocatorRouter
extends|extends
name|AbstractService
implements|implements
name|ContainerAllocator
implements|,
name|RMHeartbeatHandler
block|{
DECL|field|clientService
specifier|private
specifier|final
name|ClientService
name|clientService
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|ContainerAllocator
name|containerAllocator
decl_stmt|;
DECL|method|ContainerAllocatorRouter (ClientService clientService, AppContext context)
name|ContainerAllocatorRouter
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerAllocatorRouter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientService
operator|=
name|clientService
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|this
operator|.
name|containerAllocator
operator|=
operator|new
name|LocalContainerAllocator
argument_list|(
name|this
operator|.
name|clientService
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|nmHost
argument_list|,
name|nmPort
argument_list|,
name|nmHttpPort
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|containerAllocator
operator|=
operator|new
name|RMContainerAllocator
argument_list|(
name|this
operator|.
name|clientService
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerAllocatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|containerAllocator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|setSignalled (boolean isSignalled)
specifier|public
name|void
name|setSignalled
parameter_list|(
name|boolean
name|isSignalled
parameter_list|)
block|{
operator|(
operator|(
name|RMCommunicator
operator|)
name|containerAllocator
operator|)
operator|.
name|setSignalled
argument_list|(
name|isSignalled
argument_list|)
expr_stmt|;
block|}
DECL|method|setShouldUnregister (boolean shouldUnregister)
specifier|public
name|void
name|setShouldUnregister
parameter_list|(
name|boolean
name|shouldUnregister
parameter_list|)
block|{
operator|(
operator|(
name|RMCommunicator
operator|)
name|containerAllocator
operator|)
operator|.
name|setShouldUnregister
argument_list|(
name|shouldUnregister
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastHeartbeatTime ()
specifier|public
name|long
name|getLastHeartbeatTime
parameter_list|()
block|{
return|return
operator|(
operator|(
name|RMCommunicator
operator|)
name|containerAllocator
operator|)
operator|.
name|getLastHeartbeatTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runOnNextHeartbeat (Runnable callback)
specifier|public
name|void
name|runOnNextHeartbeat
parameter_list|(
name|Runnable
name|callback
parameter_list|)
block|{
operator|(
operator|(
name|RMCommunicator
operator|)
name|containerAllocator
operator|)
operator|.
name|runOnNextHeartbeat
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * By the time life-cycle of this router starts, job-init would have already    * happened.    */
DECL|class|ContainerLauncherRouter
specifier|private
specifier|final
class|class
name|ContainerLauncherRouter
extends|extends
name|AbstractService
implements|implements
name|ContainerLauncher
block|{
DECL|field|context
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
DECL|field|containerLauncher
specifier|private
name|ContainerLauncher
name|containerLauncher
decl_stmt|;
DECL|method|ContainerLauncherRouter (AppContext context)
name|ContainerLauncherRouter
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerLauncherRouter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|this
operator|.
name|containerLauncher
operator|=
operator|new
name|LocalContainerLauncher
argument_list|(
name|context
argument_list|,
operator|(
name|TaskUmbilicalProtocol
operator|)
name|taskAttemptListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|containerLauncher
operator|=
operator|new
name|ContainerLauncherImpl
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|containerLauncher
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StagingDirCleaningService
specifier|private
specifier|final
class|class
name|StagingDirCleaningService
extends|extends
name|AbstractService
block|{
DECL|method|StagingDirCleaningService ()
name|StagingDirCleaningService
parameter_list|()
block|{
name|super
argument_list|(
name|StagingDirCleaningService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isLastAMRetry
condition|)
block|{
name|cleanupStagingDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping cleaning up the staging dir. "
operator|+
literal|"assuming AM will be retried."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to cleanup staging dir: "
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RunningAppContext
specifier|private
class|class
name|RunningAppContext
implements|implements
name|AppContext
block|{
DECL|field|jobs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|clusterInfo
specifier|private
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|ClusterInfo
argument_list|()
decl_stmt|;
DECL|method|RunningAppContext (Configuration config)
specifier|public
name|RunningAppContext
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|appName
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|jobs
return|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CharSequence
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterInfo
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|amInfos
operator|=
operator|new
name|LinkedList
argument_list|<
name|AMInfo
argument_list|>
argument_list|()
expr_stmt|;
name|completedTasksFromPreviousRun
operator|=
operator|new
name|HashMap
argument_list|<
name|TaskId
argument_list|,
name|TaskInfo
argument_list|>
argument_list|()
expr_stmt|;
name|processRecovery
argument_list|()
expr_stmt|;
comment|// Current an AMInfo for the current AM generation.
name|AMInfo
name|amInfo
init|=
name|MRBuilderUtils
operator|.
name|newAMInfo
argument_list|(
name|appAttemptID
argument_list|,
name|startTime
argument_list|,
name|containerID
argument_list|,
name|nmHost
argument_list|,
name|nmPort
argument_list|,
name|nmHttpPort
argument_list|)
decl_stmt|;
name|amInfos
operator|.
name|add
argument_list|(
name|amInfo
argument_list|)
expr_stmt|;
comment|// /////////////////// Create the job itself.
name|job
operator|=
name|createJob
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|forcedState
argument_list|,
name|shutDownMessage
argument_list|)
expr_stmt|;
comment|// End of creating the job.
comment|// Send out an MR AM inited event for this AM and all previous AMs.
for|for
control|(
name|AMInfo
name|info
range|:
name|amInfos
control|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|info
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|info
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|info
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|info
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|,
name|info
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|,
name|info
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// metrics system init is really init& start.
comment|// It's more test friendly to put it here.
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"MRAppMaster"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorHappenedShutDown
condition|)
block|{
comment|// create a job event for job intialization
name|JobEvent
name|initJobEvent
init|=
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
decl_stmt|;
comment|// Send init to the job (this does NOT trigger job execution)
comment|// This is a synchronous call, not an event through dispatcher. We want
comment|// job-init to be done completely here.
name|jobEventDispatcher
operator|.
name|handle
argument_list|(
name|initJobEvent
argument_list|)
expr_stmt|;
comment|// JobImpl's InitTransition is done (call above is synchronous), so the
comment|// "uber-decision" (MR-1220) has been made.  Query job and switch to
comment|// ubermode if appropriate (by registering different container-allocator
comment|// and container-launcher services/event-handlers).
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|speculatorEventDispatcher
operator|.
name|disableSpeculation
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppMaster uberizing job "
operator|+
name|job
operator|.
name|getID
argument_list|()
operator|+
literal|" in local container (\"uber-AM\") on node "
operator|+
name|nmHost
operator|+
literal|":"
operator|+
name|nmPort
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// send init to speculator only for non-uber jobs.
comment|// This won't yet start as dispatcher isn't started yet.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppMaster launching normal, non-uberized, multi-container "
operator|+
literal|"job "
operator|+
name|job
operator|.
name|getID
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//start all the components
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// All components have started, start the job.
name|startJobs
argument_list|()
expr_stmt|;
block|}
DECL|method|processRecovery ()
specifier|private
name|void
name|processRecovery
parameter_list|()
block|{
if|if
condition|(
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
comment|// no need to recover on the first attempt
block|}
name|boolean
name|recoveryEnabled
init|=
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|recoverySupportedByCommitter
init|=
name|committer
operator|!=
literal|null
operator|&&
name|committer
operator|.
name|isRecoverySupported
argument_list|()
decl_stmt|;
comment|// If a shuffle secret was not provided by the job client then this app
comment|// attempt will generate one.  However that disables recovery if there
comment|// are reducers as the shuffle secret would be app attempt specific.
name|int
name|numReduceTasks
init|=
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|shuffleKeyValidForRecovery
init|=
operator|(
name|numReduceTasks
operator|>
literal|0
operator|&&
name|TokenCache
operator|.
name|getShuffleSecretKey
argument_list|(
name|fsTokens
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|recoveryEnabled
operator|&&
name|recoverySupportedByCommitter
operator|&&
name|shuffleKeyValidForRecovery
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery is enabled. "
operator|+
literal|"Will try to recover from previous life on best effort basis."
argument_list|)
expr_stmt|;
try|try
block|{
name|parsePreviousJobHistory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse prior job history, aborting recovery"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// try to get just the AMInfos
name|amInfos
operator|.
name|addAll
argument_list|(
name|readJustAMInfos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Will not try to recover. recoveryEnabled: "
operator|+
name|recoveryEnabled
operator|+
literal|" recoverySupportedByCommitter: "
operator|+
name|recoverySupportedByCommitter
operator|+
literal|" shuffleKeyValidForRecovery: "
operator|+
name|shuffleKeyValidForRecovery
operator|+
literal|" ApplicationAttemptID: "
operator|+
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the amInfos anyways whether recovery is enabled or not
name|amInfos
operator|.
name|addAll
argument_list|(
name|readJustAMInfos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreviousJobHistoryStream ( Configuration conf, ApplicationAttemptId appAttemptId)
specifier|private
specifier|static
name|FSDataInputStream
name|getPreviousJobHistoryStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|historyFile
init|=
name|JobHistoryUtils
operator|.
name|getPreviousJobHistoryPath
argument_list|(
name|conf
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Previous history file is at "
operator|+
name|historyFile
argument_list|)
expr_stmt|;
return|return
name|historyFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|open
argument_list|(
name|historyFile
argument_list|)
return|;
block|}
DECL|method|parsePreviousJobHistory ()
specifier|private
name|void
name|parsePreviousJobHistory
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
name|getPreviousJobHistoryStream
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|appAttemptID
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|Exception
name|parseException
init|=
name|parser
operator|.
name|getParseException
argument_list|()
decl_stmt|;
if|if
condition|(
name|parseException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got an error parsing job-history file"
operator|+
literal|", ignoring incomplete events."
argument_list|,
name|parseException
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|taskInfos
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfos
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|TaskState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
argument_list|>
name|taskAttemptIterator
init|=
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|taskAttemptIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|currentEntry
init|=
name|taskAttemptIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|jobInfo
operator|.
name|getAllCompletedTaskAttempts
argument_list|()
operator|.
name|containsKey
argument_list|(
name|currentEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|taskAttemptIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|completedTasksFromPreviousRun
operator|.
name|put
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read from history task "
operator|+
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Read completed tasks from history "
operator|+
name|completedTasksFromPreviousRun
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|recoveredJobStartTime
operator|=
name|jobInfo
operator|.
name|getLaunchTime
argument_list|()
expr_stmt|;
comment|// recover AMInfos
name|List
argument_list|<
name|JobHistoryParser
operator|.
name|AMInfo
argument_list|>
name|jhAmInfoList
init|=
name|jobInfo
operator|.
name|getAMInfos
argument_list|()
decl_stmt|;
if|if
condition|(
name|jhAmInfoList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobHistoryParser
operator|.
name|AMInfo
name|jhAmInfo
range|:
name|jhAmInfoList
control|)
block|{
name|AMInfo
name|amInfo
init|=
name|MRBuilderUtils
operator|.
name|newAMInfo
argument_list|(
name|jhAmInfo
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|jhAmInfo
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|jhAmInfo
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|jhAmInfo
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|,
name|jhAmInfo
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|,
name|jhAmInfo
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
decl_stmt|;
name|amInfos
operator|.
name|add
argument_list|(
name|amInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readJustAMInfos ()
specifier|private
name|List
argument_list|<
name|AMInfo
argument_list|>
name|readJustAMInfos
parameter_list|()
block|{
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|AMInfo
argument_list|>
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|getPreviousJobHistoryStream
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|appAttemptID
argument_list|)
expr_stmt|;
name|EventReader
name|jobHistoryEventReader
init|=
operator|new
name|EventReader
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
comment|// All AMInfos are contiguous. Track when the first AMStartedEvent
comment|// appears.
name|boolean
name|amStartedEventsBegan
init|=
literal|false
decl_stmt|;
name|HistoryEvent
name|event
decl_stmt|;
while|while
condition|(
operator|(
name|event
operator|=
name|jobHistoryEventReader
operator|.
name|getNextEvent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|AM_STARTED
condition|)
block|{
if|if
condition|(
operator|!
name|amStartedEventsBegan
condition|)
block|{
comment|// First AMStartedEvent.
name|amStartedEventsBegan
operator|=
literal|true
expr_stmt|;
block|}
name|AMStartedEvent
name|amStartedEvent
init|=
operator|(
name|AMStartedEvent
operator|)
name|event
decl_stmt|;
name|amInfos
operator|.
name|add
argument_list|(
name|MRBuilderUtils
operator|.
name|newAMInfo
argument_list|(
name|amStartedEvent
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|amStartedEvent
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|amStartedEvent
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|amStartedEvent
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|)
argument_list|,
name|amStartedEvent
operator|.
name|getNodeManagerPort
argument_list|()
argument_list|,
name|amStartedEvent
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|amStartedEventsBegan
condition|)
block|{
comment|// This means AMStartedEvents began and this event is a
comment|// non-AMStarted event.
comment|// No need to continue reading all the other events.
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse the old history file. "
operator|+
literal|"Will not have old AMinfos "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|amInfos
return|;
block|}
comment|/**    * This can be overridden to instantiate multiple jobs and create a     * workflow.    *    * TODO:  Rework the design to actually support this.  Currently much of the    * job stuff has been moved to init() above to support uberization (MR-1220).    * In a typical workflow, one presumably would want to uberize only a subset    * of the jobs (the "small" ones), which is awkward with the current design.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startJobs ()
specifier|protected
name|void
name|startJobs
parameter_list|()
block|{
comment|/** create a job-start event to get this ball rolling */
name|JobEvent
name|startJobEvent
init|=
operator|new
name|JobStartEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|recoveredJobStartTime
argument_list|)
decl_stmt|;
comment|/** send the job-start event. this triggers the job execution. */
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|startJobEvent
argument_list|)
expr_stmt|;
block|}
DECL|class|JobEventDispatcher
specifier|private
class|class
name|JobEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (JobEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobEvent
name|event
parameter_list|)
block|{
operator|(
operator|(
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
operator|)
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskEventDispatcher
specifier|private
class|class
name|TaskEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskEvent
name|event
parameter_list|)
block|{
name|Task
name|task
init|=
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getTaskID
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|.
name|getTask
argument_list|(
name|event
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
operator|)
name|task
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskAttemptEventDispatcher
specifier|private
class|class
name|TaskAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|Job
name|job
init|=
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempt
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
operator|)
name|attempt
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SpeculatorEventDispatcher
specifier|private
class|class
name|SpeculatorEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|SpeculatorEvent
argument_list|>
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|disabled
specifier|private
specifier|volatile
name|boolean
name|disabled
decl_stmt|;
DECL|method|SpeculatorEventDispatcher (Configuration config)
specifier|public
name|SpeculatorEventDispatcher
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SpeculatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SpeculatorEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|disabled
condition|)
block|{
return|return;
block|}
name|TaskId
name|tId
init|=
name|event
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TaskType
name|tType
init|=
literal|null
decl_stmt|;
comment|/* event's TaskId will be null if the event type is JOB_CREATE or        * ATTEMPT_STATUS_UPDATE        */
if|if
condition|(
name|tId
operator|!=
literal|null
condition|)
block|{
name|tType
operator|=
name|tId
operator|.
name|getTaskType
argument_list|()
expr_stmt|;
block|}
name|boolean
name|shouldMapSpec
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|shouldReduceSpec
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/* The point of the following is to allow the MAP and REDUCE speculative        * config values to be independent:        * IF spec-exec is turned on for maps AND the task is a map task        * OR IF spec-exec is turned on for reduces AND the task is a reduce task        * THEN call the speculator to handle the event.        */
if|if
condition|(
operator|(
name|shouldMapSpec
operator|&&
operator|(
name|tType
operator|==
literal|null
operator|||
name|tType
operator|==
name|TaskType
operator|.
name|MAP
operator|)
operator|)
operator|||
operator|(
name|shouldReduceSpec
operator|&&
operator|(
name|tType
operator|==
literal|null
operator|||
name|tType
operator|==
name|TaskType
operator|.
name|REDUCE
operator|)
operator|)
condition|)
block|{
comment|// Speculator IS enabled, direct the event to there.
name|speculator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disableSpeculation ()
specifier|public
name|void
name|disableSpeculation
parameter_list|()
block|{
name|disabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Eats events that are not needed in some error cases.    */
DECL|class|NoopEventHandler
specifier|private
specifier|static
class|class
name|NoopEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|//Empty
block|}
block|}
DECL|method|validateInputParam (String value, String param)
specifier|private
specifier|static
name|void
name|validateInputParam
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|param
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|param
operator|+
literal|" is null"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|containerIdStr
init|=
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeHostString
init|=
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodePortString
init|=
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeHttpPortString
init|=
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|appSubmitTimeStr
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|APP_SUBMIT_TIME_ENV
argument_list|)
decl_stmt|;
name|String
name|maxAppAttempts
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|MAX_APP_ATTEMPTS_ENV
argument_list|)
decl_stmt|;
name|validateInputParam
argument_list|(
name|containerIdStr
argument_list|,
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|validateInputParam
argument_list|(
name|nodeHostString
argument_list|,
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|validateInputParam
argument_list|(
name|nodePortString
argument_list|,
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|validateInputParam
argument_list|(
name|nodeHttpPortString
argument_list|,
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|validateInputParam
argument_list|(
name|appSubmitTimeStr
argument_list|,
name|ApplicationConstants
operator|.
name|APP_SUBMIT_TIME_ENV
argument_list|)
expr_stmt|;
name|validateInputParam
argument_list|(
name|maxAppAttempts
argument_list|,
name|ApplicationConstants
operator|.
name|MAX_APP_ATTEMPTS_ENV
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|long
name|appSubmitTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|appSubmitTimeStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|nodeHostString
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nodePortString
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nodeHttpPortString
argument_list|)
argument_list|,
name|appSubmitTime
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxAppAttempts
argument_list|)
argument_list|)
decl_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|MRAppMasterShutdownHook
argument_list|(
name|appMaster
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// log the system properties
name|String
name|systemPropsToLog
init|=
name|MRApps
operator|.
name|getSystemPropertiesToLog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemPropsToLog
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|systemPropsToLog
argument_list|)
expr_stmt|;
block|}
name|String
name|jobUserName
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|jobUserName
argument_list|)
expr_stmt|;
comment|// Do not automatically close FileSystem objects so that in case of
comment|// SIGTERM I have a chance to write out the job history. I'll be closing
comment|// the objects myself.
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.automatic.close"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set job classloader if configured
name|MRApps
operator|.
name|setJobClassLoader
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|jobUserName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error starting MRAppMaster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The shutdown hook that runs when a signal is received AND during normal
comment|// close of the JVM.
DECL|class|MRAppMasterShutdownHook
specifier|static
class|class
name|MRAppMasterShutdownHook
implements|implements
name|Runnable
block|{
DECL|field|appMaster
name|MRAppMaster
name|appMaster
decl_stmt|;
DECL|method|MRAppMasterShutdownHook (MRAppMaster appMaster)
name|MRAppMasterShutdownHook
parameter_list|(
name|MRAppMaster
name|appMaster
parameter_list|)
block|{
name|this
operator|.
name|appMaster
operator|=
name|appMaster
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppMaster received a signal. Signaling RMCommunicator and "
operator|+
literal|"JobHistoryEventHandler."
argument_list|)
expr_stmt|;
comment|// Notify the JHEH and RMCommunicator that a SIGTERM has been received so
comment|// that they don't take too long in shutting down
if|if
condition|(
name|appMaster
operator|.
name|containerAllocator
operator|instanceof
name|ContainerAllocatorRouter
condition|)
block|{
operator|(
operator|(
name|ContainerAllocatorRouter
operator|)
name|appMaster
operator|.
name|containerAllocator
operator|)
operator|.
name|setSignalled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|appMaster
operator|.
name|notifyIsLastAMRetry
argument_list|(
name|appMaster
operator|.
name|isLastAMRetry
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|notifyIsLastAMRetry (boolean isLastAMRetry)
specifier|public
name|void
name|notifyIsLastAMRetry
parameter_list|(
name|boolean
name|isLastAMRetry
parameter_list|)
block|{
if|if
condition|(
name|containerAllocator
operator|instanceof
name|ContainerAllocatorRouter
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Notify RMCommunicator isAMLastRetry: "
operator|+
name|isLastAMRetry
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ContainerAllocatorRouter
operator|)
name|containerAllocator
operator|)
operator|.
name|setShouldUnregister
argument_list|(
name|isLastAMRetry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobHistoryEventHandler
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Notify JHEH isAMLastRetry: "
operator|+
name|isLastAMRetry
argument_list|)
expr_stmt|;
name|jobHistoryEventHandler
operator|.
name|setForcejobCompletion
argument_list|(
name|isLastAMRetry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initAndStartAppMaster (final MRAppMaster appMaster, final JobConf conf, String jobUserName)
specifier|protected
specifier|static
name|void
name|initAndStartAppMaster
parameter_list|(
specifier|final
name|MRAppMaster
name|appMaster
parameter_list|,
specifier|final
name|JobConf
name|conf
parameter_list|,
name|String
name|jobUserName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Security framework already loaded the tokens into current UGI, just use
comment|// them
name|Credentials
name|credentials
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|appMasterUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|jobUserName
argument_list|)
decl_stmt|;
name|appMasterUgi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|appMasterUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|appMaster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|appMaster
operator|.
name|errorHappenedShutDown
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Was asked to shut down."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

