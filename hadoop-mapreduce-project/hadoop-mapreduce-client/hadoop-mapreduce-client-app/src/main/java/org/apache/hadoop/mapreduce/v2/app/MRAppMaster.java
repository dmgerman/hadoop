begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|LocalContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptListenerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|AMStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|AMInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|client
operator|.
name|MRClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|impl
operator|.
name|JobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncherImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|local
operator|.
name|LocalContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|metrics
operator|.
name|MRAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|recover
operator|.
name|Recovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|recover
operator|.
name|RecoveryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|ContainerAllocatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|rm
operator|.
name|RMContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|DefaultSpeculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|Speculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
operator|.
name|SpeculatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|taskclean
operator|.
name|TaskCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|taskclean
operator|.
name|TaskCleanerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_comment
comment|/**  * The Map-Reduce Application Master.  * The state machine is encapsulated in the implementation of Job interface.  * All state changes happens via Job interface. Each event   * results in a Finite State Transition in Job.  *   * MR AppMaster is the composition of loosely coupled services. The services   * interact with each other via events. The components resembles the   * Actors model. The component acts on received event and send out the   * events to other components.  * This keeps it highly concurrent with no or minimal synchronization needs.  *   * The events are dispatched by a central Dispatch mechanism. All components  * register to the Dispatcher.  *   * The information is shared across different components using AppContext.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|MRAppMaster
specifier|public
class|class
name|MRAppMaster
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRAppMaster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|appSubmitTime
specifier|private
specifier|final
name|long
name|appSubmitTime
decl_stmt|;
DECL|field|appName
specifier|private
name|String
name|appName
decl_stmt|;
DECL|field|appAttemptID
specifier|private
specifier|final
name|ApplicationAttemptId
name|appAttemptID
decl_stmt|;
DECL|field|containerID
specifier|private
specifier|final
name|ContainerId
name|containerID
decl_stmt|;
DECL|field|nmHost
specifier|private
specifier|final
name|String
name|nmHost
decl_stmt|;
DECL|field|nmHttpPort
specifier|private
specifier|final
name|int
name|nmHttpPort
decl_stmt|;
DECL|field|metrics
specifier|protected
specifier|final
name|MRAppMetrics
name|metrics
decl_stmt|;
DECL|field|completedTasksFromPreviousRun
specifier|private
name|Set
argument_list|<
name|TaskId
argument_list|>
name|completedTasksFromPreviousRun
decl_stmt|;
DECL|field|amInfos
specifier|private
name|List
argument_list|<
name|AMInfo
argument_list|>
name|amInfos
decl_stmt|;
DECL|field|context
specifier|private
name|AppContext
name|context
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|clientService
specifier|private
name|ClientService
name|clientService
decl_stmt|;
DECL|field|recoveryServ
specifier|private
name|Recovery
name|recoveryServ
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|ContainerAllocator
name|containerAllocator
decl_stmt|;
DECL|field|containerLauncher
specifier|private
name|ContainerLauncher
name|containerLauncher
decl_stmt|;
DECL|field|taskCleaner
specifier|private
name|TaskCleaner
name|taskCleaner
decl_stmt|;
DECL|field|speculator
specifier|private
name|Speculator
name|speculator
decl_stmt|;
DECL|field|taskAttemptListener
specifier|private
name|TaskAttemptListener
name|taskAttemptListener
decl_stmt|;
DECL|field|jobTokenSecretManager
specifier|private
name|JobTokenSecretManager
name|jobTokenSecretManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
DECL|field|jobId
specifier|private
name|JobId
name|jobId
decl_stmt|;
DECL|field|newApiCommitter
specifier|private
name|boolean
name|newApiCommitter
decl_stmt|;
DECL|field|committer
specifier|private
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|jobEventDispatcher
specifier|private
name|JobEventDispatcher
name|jobEventDispatcher
decl_stmt|;
DECL|field|inRecovery
specifier|private
name|boolean
name|inRecovery
init|=
literal|false
decl_stmt|;
DECL|field|job
specifier|private
name|Job
name|job
decl_stmt|;
DECL|field|fsTokens
specifier|private
name|Credentials
name|fsTokens
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// Filled during init
DECL|field|currentUser
specifier|private
name|UserGroupInformation
name|currentUser
decl_stmt|;
comment|// Will be setup during init
DECL|method|MRAppMaster (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String nmHost, int nmHttpPort, long appSubmitTime)
specifier|public
name|MRAppMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|nmHost
parameter_list|,
name|int
name|nmHttpPort
parameter_list|,
name|long
name|appSubmitTime
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|nmHost
argument_list|,
name|nmHttpPort
argument_list|,
operator|new
name|SystemClock
argument_list|()
argument_list|,
name|appSubmitTime
argument_list|)
expr_stmt|;
block|}
DECL|method|MRAppMaster (ApplicationAttemptId applicationAttemptId, ContainerId containerId, String nmHost, int nmHttpPort, Clock clock, long appSubmitTime)
specifier|public
name|MRAppMaster
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|nmHost
parameter_list|,
name|int
name|nmHttpPort
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|long
name|appSubmitTime
parameter_list|)
block|{
name|super
argument_list|(
name|MRAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|appSubmitTime
operator|=
name|appSubmitTime
expr_stmt|;
name|this
operator|.
name|appAttemptID
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|containerID
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nmHost
operator|=
name|nmHost
expr_stmt|;
name|this
operator|.
name|nmHttpPort
operator|=
name|nmHttpPort
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|MRAppMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created MRAppMaster for application "
operator|+
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (final Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|downloadTokensAndSetupUGI
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|RunningAppContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Job name is the same as the app name util we support DAG of jobs
comment|// for an app later
name|appName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
literal|"<missing app name>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|newApiCommitter
operator|=
literal|false
expr_stmt|;
name|jobId
operator|=
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numReduceTasks
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_REDUCES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|numReduceTasks
operator|>
literal|0
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.reducer.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
operator|||
operator|(
name|numReduceTasks
operator|==
literal|0
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.mapper.new-api"
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
name|newApiCommitter
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using mapred newApiCommitter."
argument_list|)
expr_stmt|;
block|}
name|committer
operator|=
name|createOutputCommitter
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|recoveryEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_RECOVERY_ENABLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|recoverySupportedByCommitter
init|=
name|committer
operator|.
name|isRecoverySupported
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryEnabled
operator|&&
name|recoverySupportedByCommitter
operator|&&
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery is enabled. "
operator|+
literal|"Will try to recover from previous life on best effort basis."
argument_list|)
expr_stmt|;
name|recoveryServ
operator|=
operator|new
name|RecoveryService
argument_list|(
name|appAttemptID
argument_list|,
name|clock
argument_list|,
name|committer
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|recoveryServ
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|recoveryServ
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|clock
operator|=
name|recoveryServ
operator|.
name|getClock
argument_list|()
expr_stmt|;
name|inRecovery
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not starting RecoveryService: recoveryEnabled: "
operator|+
name|recoveryEnabled
operator|+
literal|" recoverySupportedByCommitter: "
operator|+
name|recoverySupportedByCommitter
operator|+
literal|" ApplicationAttemptID: "
operator|+
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|addIfService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
comment|//service to handle requests to TaskUmbilicalProtocol
name|taskAttemptListener
operator|=
name|createTaskAttemptListener
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|taskAttemptListener
argument_list|)
expr_stmt|;
comment|//service to do the task cleanup
name|taskCleaner
operator|=
name|createTaskCleaner
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|taskCleaner
argument_list|)
expr_stmt|;
comment|//service to handle requests from JobClient
name|clientService
operator|=
name|createClientService
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|clientService
argument_list|)
expr_stmt|;
comment|//service to log job history events
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|historyService
init|=
name|createJobHistoryHandler
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|historyService
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobEventDispatcher
operator|=
operator|new
name|JobEventDispatcher
argument_list|()
expr_stmt|;
comment|//register the event dispatchers
name|dispatcher
operator|.
name|register
argument_list|(
name|JobEventType
operator|.
name|class
argument_list|,
name|jobEventDispatcher
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskEventType
operator|.
name|class
argument_list|,
operator|new
name|TaskEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|TaskAttemptEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|TaskCleaner
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|taskCleaner
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|//optional service to speculate on task attempts' progress
name|speculator
operator|=
name|createSpeculator
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|speculator
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|register
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|class
argument_list|,
operator|new
name|SpeculatorEventDispatcher
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// service to allocate containers from RM (if non-uber) or to fake it (uber)
name|containerAllocator
operator|=
name|createContainerAllocator
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|containerAllocator
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerAllocator
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|containerAllocator
argument_list|)
expr_stmt|;
comment|// corresponding service to launch allocated containers via NodeManager
name|containerLauncher
operator|=
name|createContainerLauncher
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|addIfService
argument_list|(
name|containerLauncher
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerLauncher
operator|.
name|EventType
operator|.
name|class
argument_list|,
name|containerLauncher
argument_list|)
expr_stmt|;
comment|// Add the JobHistoryEventHandler last so that it is properly stopped first.
comment|// This will guarantee that all history-events are flushed before AM goes
comment|// ahead with shutdown.
comment|// Note: Even though JobHistoryEventHandler is started last, if any
comment|// component creates a JobHistoryEvent in the meanwhile, it will be just be
comment|// queued inside the JobHistoryEventHandler
name|addIfService
argument_list|(
name|historyService
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// end of init()
DECL|method|createOutputCommitter (Configuration conf)
specifier|private
name|OutputCommitter
name|createOutputCommitter
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|OutputCommitter
name|committer
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter set in config "
operator|+
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.output.committer.class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newApiCommitter
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
name|taskID
init|=
name|MRBuilderUtils
operator|.
name|newTaskId
argument_list|(
name|jobId
argument_list|,
literal|0
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|MRBuilderUtils
operator|.
name|newTaskAttemptId
argument_list|(
name|taskID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|taskContext
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|attemptID
argument_list|)
argument_list|)
decl_stmt|;
name|OutputFormat
name|outputFormat
decl_stmt|;
try|try
block|{
name|outputFormat
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|taskContext
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|committer
operator|=
name|outputFormat
operator|.
name|getOutputCommitter
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|committer
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
literal|"mapred.output.committer.class"
argument_list|,
name|FileOutputCommitter
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OutputCommitter is "
operator|+
name|committer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|committer
return|;
block|}
DECL|method|keepJobFiles (JobConf conf)
specifier|protected
name|boolean
name|keepJobFiles
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
operator|(
name|conf
operator|.
name|getKeepTaskFilesPattern
argument_list|()
operator|!=
literal|null
operator|||
name|conf
operator|.
name|getKeepFailedTaskFiles
argument_list|()
operator|)
return|;
block|}
comment|/**    * Create the default file System for this job.    * @param conf the conf object    * @return the default filesystem for this job    * @throws IOException    */
DECL|method|getFileSystem (Configuration conf)
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * clean up staging directories for the job.    * @throws IOException    */
DECL|method|cleanupStagingDir ()
specifier|public
name|void
name|cleanupStagingDir
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* make sure we clean the staging files */
name|String
name|jobTempDir
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|keepJobFiles
argument_list|(
operator|new
name|JobConf
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|jobTempDir
operator|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAPREDUCE_JOB_DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobTempDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job Staging directory is null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|jobTempDirPath
init|=
operator|new
name|Path
argument_list|(
name|jobTempDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting staging directory "
operator|+
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|getConfig
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|jobTempDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobTempDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to cleanup staging dir "
operator|+
name|jobTempDir
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Exit call. Just in a function call to enable testing.    */
DECL|method|sysexit ()
specifier|protected
name|void
name|sysexit
parameter_list|()
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|JobFinishEventHandler
specifier|private
class|class
name|JobFinishEventHandler
implements|implements
name|EventHandler
argument_list|<
name|JobFinishEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (JobFinishEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobFinishEvent
name|event
parameter_list|)
block|{
comment|// job has finished
comment|// this is the only job, so shut down the Appmaster
comment|// note in a workflow scenario, this may lead to creation of a new
comment|// job (FIXME?)
comment|// TODO:currently just wait for some time so clients can know the
comment|// final states. Will be removed once RM come on.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// Stop all services
comment|// This will also send the final report to the ResourceManager
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling stop for all the services"
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
comment|// Send job-end notification
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job end notification started for jobID : "
operator|+
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|JobEndNotifier
name|notifier
init|=
operator|new
name|JobEndNotifier
argument_list|()
decl_stmt|;
name|notifier
operator|.
name|setConf
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|notify
argument_list|(
name|job
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job end notification interrupted for jobID : "
operator|+
name|job
operator|.
name|getReport
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Graceful stop failed "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Cleanup staging directory
try|try
block|{
name|cleanupStagingDir
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete staging dir"
argument_list|)
expr_stmt|;
block|}
comment|//Bring the process down by force.
comment|//Not needed after HADOOP-7140
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting MR AppMaster..GoodBye!"
argument_list|)
expr_stmt|;
name|sysexit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * create an event handler that handles the job finish event.    * @return the job finish event handler.    */
DECL|method|createJobFinishEventHandler ()
specifier|protected
name|EventHandler
argument_list|<
name|JobFinishEvent
argument_list|>
name|createJobFinishEventHandler
parameter_list|()
block|{
return|return
operator|new
name|JobFinishEventHandler
argument_list|()
return|;
block|}
comment|/** Create and initialize (but don't start) a single job. */
DECL|method|createJob (Configuration conf)
specifier|protected
name|Job
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// create single job
name|Job
name|newJob
init|=
operator|new
name|JobImpl
argument_list|(
name|jobId
argument_list|,
name|appAttemptID
argument_list|,
name|conf
argument_list|,
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|,
name|taskAttemptListener
argument_list|,
name|jobTokenSecretManager
argument_list|,
name|fsTokens
argument_list|,
name|clock
argument_list|,
name|completedTasksFromPreviousRun
argument_list|,
name|metrics
argument_list|,
name|committer
argument_list|,
name|newApiCommitter
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|appSubmitTime
argument_list|,
name|amInfos
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RunningAppContext
operator|)
name|context
operator|)
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|newJob
operator|.
name|getID
argument_list|()
argument_list|,
name|newJob
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|JobFinishEvent
operator|.
name|Type
operator|.
name|class
argument_list|,
name|createJobFinishEventHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newJob
return|;
block|}
comment|// end createJob()
comment|/**    * Obtain the tokens needed by the job and put them in the UGI    * @param conf    */
DECL|method|downloadTokensAndSetupUGI (Configuration conf)
specifier|protected
name|void
name|downloadTokensAndSetupUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|currentUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Read the file-system tokens from the localized tokens-file.
name|Path
name|jobSubmitDir
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|MRJobConfig
operator|.
name|JOB_SUBMIT_DIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|jobTokenFile
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|,
name|MRJobConfig
operator|.
name|APPLICATION_TOKENS_FILE
argument_list|)
decl_stmt|;
name|fsTokens
operator|.
name|addAll
argument_list|(
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|jobTokenFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"jobSubmitDir="
operator|+
name|jobSubmitDir
operator|+
literal|" jobTokenFile="
operator|+
name|jobTokenFile
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|fsTokens
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Token of kind "
operator|+
name|tk
operator|.
name|getKind
argument_list|()
operator|+
literal|"in current ugi in the AppMaster for service "
operator|+
name|tk
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentUser
operator|.
name|addToken
argument_list|(
name|tk
argument_list|)
expr_stmt|;
comment|// For use by AppMaster itself.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|addIfService (Object object)
specifier|protected
name|void
name|addIfService
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|addService
argument_list|(
operator|(
name|Service
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJobHistoryHandler ( AppContext context)
specifier|protected
name|EventHandler
argument_list|<
name|JobHistoryEvent
argument_list|>
name|createJobHistoryHandler
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|JobHistoryEventHandler
name|eventHandler
init|=
operator|new
name|JobHistoryEventHandler
argument_list|(
name|context
argument_list|,
name|getStartCount
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|eventHandler
return|;
block|}
DECL|method|createSpeculator (Configuration conf, AppContext context)
specifier|protected
name|Speculator
name|createSpeculator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Speculator
argument_list|>
name|speculatorClass
decl_stmt|;
try|try
block|{
name|speculatorClass
comment|// "yarn.mapreduce.job.speculator.class"
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|DefaultSpeculator
operator|.
name|class
argument_list|,
name|Speculator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Speculator
argument_list|>
name|speculatorConstructor
init|=
name|speculatorClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
name|AppContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Speculator
name|result
init|=
name|speculatorConstructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't make a speculator -- check "
operator|+
name|MRJobConfig
operator|.
name|MR_AM_JOB_SPECULATOR
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|createTaskAttemptListener (AppContext context)
specifier|protected
name|TaskAttemptListener
name|createTaskAttemptListener
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|TaskAttemptListener
name|lis
init|=
operator|new
name|TaskAttemptListenerImpl
argument_list|(
name|context
argument_list|,
name|jobTokenSecretManager
argument_list|)
decl_stmt|;
return|return
name|lis
return|;
block|}
DECL|method|createTaskCleaner (AppContext context)
specifier|protected
name|TaskCleaner
name|createTaskCleaner
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|TaskCleanerImpl
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|method|createContainerAllocator ( final ClientService clientService, final AppContext context)
specifier|protected
name|ContainerAllocator
name|createContainerAllocator
parameter_list|(
specifier|final
name|ClientService
name|clientService
parameter_list|,
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerAllocatorRouter
argument_list|(
name|clientService
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|protected
name|ContainerLauncher
DECL|method|createContainerLauncher (final AppContext context)
name|createContainerLauncher
parameter_list|(
specifier|final
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerLauncherRouter
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|//TODO:should have an interface for MRClientService
DECL|method|createClientService (AppContext context)
specifier|protected
name|ClientService
name|createClientService
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MRClientService
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|method|getAppID ()
specifier|public
name|ApplicationId
name|getAppID
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
DECL|method|getAttemptID ()
specifier|public
name|ApplicationAttemptId
name|getAttemptID
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
DECL|method|getJobId ()
specifier|public
name|JobId
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
DECL|method|getCommitter ()
specifier|public
name|OutputCommitter
name|getCommitter
parameter_list|()
block|{
return|return
name|committer
return|;
block|}
DECL|method|isNewApiCommitter ()
specifier|public
name|boolean
name|isNewApiCommitter
parameter_list|()
block|{
return|return
name|newApiCommitter
return|;
block|}
DECL|method|getStartCount ()
specifier|public
name|int
name|getStartCount
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getAttemptId
argument_list|()
return|;
block|}
DECL|method|getContext ()
specifier|public
name|AppContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getDispatcher ()
specifier|public
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
DECL|method|getCompletedTaskFromPreviousRun ()
specifier|public
name|Set
argument_list|<
name|TaskId
argument_list|>
name|getCompletedTaskFromPreviousRun
parameter_list|()
block|{
return|return
name|completedTasksFromPreviousRun
return|;
block|}
DECL|method|getAllAMInfos ()
specifier|public
name|List
argument_list|<
name|AMInfo
argument_list|>
name|getAllAMInfos
parameter_list|()
block|{
return|return
name|amInfos
return|;
block|}
DECL|method|getContainerAllocator ()
specifier|public
name|ContainerAllocator
name|getContainerAllocator
parameter_list|()
block|{
return|return
name|containerAllocator
return|;
block|}
DECL|method|getContainerLauncher ()
specifier|public
name|ContainerLauncher
name|getContainerLauncher
parameter_list|()
block|{
return|return
name|containerLauncher
return|;
block|}
DECL|method|getTaskAttemptListener ()
specifier|public
name|TaskAttemptListener
name|getTaskAttemptListener
parameter_list|()
block|{
return|return
name|taskAttemptListener
return|;
block|}
comment|/**    * By the time life-cycle of this router starts, job-init would have already    * happened.    */
DECL|class|ContainerAllocatorRouter
specifier|private
specifier|final
class|class
name|ContainerAllocatorRouter
extends|extends
name|AbstractService
implements|implements
name|ContainerAllocator
block|{
DECL|field|clientService
specifier|private
specifier|final
name|ClientService
name|clientService
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|ContainerAllocator
name|containerAllocator
decl_stmt|;
DECL|method|ContainerAllocatorRouter (ClientService clientService, AppContext context)
name|ContainerAllocatorRouter
parameter_list|(
name|ClientService
name|clientService
parameter_list|,
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerAllocatorRouter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientService
operator|=
name|clientService
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|this
operator|.
name|containerAllocator
operator|=
operator|new
name|LocalContainerAllocator
argument_list|(
name|this
operator|.
name|clientService
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|containerAllocator
operator|=
operator|new
name|RMContainerAllocator
argument_list|(
name|this
operator|.
name|clientService
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerAllocator
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerAllocatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerAllocatorEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|containerAllocator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * By the time life-cycle of this router starts, job-init would have already    * happened.    */
DECL|class|ContainerLauncherRouter
specifier|private
specifier|final
class|class
name|ContainerLauncherRouter
extends|extends
name|AbstractService
implements|implements
name|ContainerLauncher
block|{
DECL|field|context
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
DECL|field|containerLauncher
specifier|private
name|ContainerLauncher
name|containerLauncher
decl_stmt|;
DECL|method|ContainerLauncherRouter (AppContext context)
name|ContainerLauncherRouter
parameter_list|(
name|AppContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerLauncherRouter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|this
operator|.
name|containerLauncher
operator|=
operator|new
name|LocalContainerLauncher
argument_list|(
name|context
argument_list|,
operator|(
name|TaskUmbilicalProtocol
operator|)
name|taskAttemptListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|containerLauncher
operator|=
operator|new
name|ContainerLauncherImpl
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerLauncherEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|containerLauncher
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
operator|(
operator|(
name|Service
operator|)
name|this
operator|.
name|containerLauncher
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RunningAppContext
specifier|private
class|class
name|RunningAppContext
implements|implements
name|AppContext
block|{
DECL|field|jobs
specifier|private
specifier|final
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|RunningAppContext (Configuration config)
specifier|public
name|RunningAppContext
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|appAttemptID
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|appAttemptID
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|appName
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobId jobID)
specifier|public
name|Job
name|getJob
parameter_list|(
name|JobId
name|jobID
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|Map
argument_list|<
name|JobId
argument_list|,
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
name|jobs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CharSequence
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getClock ()
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Pull completedTasks etc from recovery
if|if
condition|(
name|inRecovery
condition|)
block|{
name|completedTasksFromPreviousRun
operator|=
name|recoveryServ
operator|.
name|getCompletedTasks
argument_list|()
expr_stmt|;
name|amInfos
operator|=
name|recoveryServ
operator|.
name|getAMInfos
argument_list|()
expr_stmt|;
block|}
comment|// / Create the AMInfo for the current AppMaster
if|if
condition|(
name|amInfos
operator|==
literal|null
condition|)
block|{
name|amInfos
operator|=
operator|new
name|LinkedList
argument_list|<
name|AMInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|AMInfo
name|amInfo
init|=
operator|new
name|AMInfo
argument_list|(
name|appAttemptID
argument_list|,
name|startTime
argument_list|,
name|containerID
argument_list|,
name|nmHost
argument_list|,
name|nmHttpPort
argument_list|)
decl_stmt|;
name|amInfos
operator|.
name|add
argument_list|(
name|amInfo
argument_list|)
expr_stmt|;
comment|// /////////////////// Create the job itself.
name|job
operator|=
name|createJob
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// End of creating the job.
comment|// Send out an MR AM inited event for this AM and all previous AMs.
for|for
control|(
name|AMInfo
name|info
range|:
name|amInfos
control|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobHistoryEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
operator|new
name|AMStartedEvent
argument_list|(
name|info
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|info
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|info
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|info
operator|.
name|getNodeManagerHost
argument_list|()
argument_list|,
name|info
operator|.
name|getNodeManagerHttpPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// metrics system init is really init& start.
comment|// It's more test friendly to put it here.
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"MRAppMaster"
argument_list|)
expr_stmt|;
comment|// create a job event for job intialization
name|JobEvent
name|initJobEvent
init|=
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_INIT
argument_list|)
decl_stmt|;
comment|// Send init to the job (this does NOT trigger job execution)
comment|// This is a synchronous call, not an event through dispatcher. We want
comment|// job-init to be done completely here.
name|jobEventDispatcher
operator|.
name|handle
argument_list|(
name|initJobEvent
argument_list|)
expr_stmt|;
comment|// send init to speculator. This won't yest start as dispatcher isn't
comment|// started yet.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|SpeculatorEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// JobImpl's InitTransition is done (call above is synchronous), so the
comment|// "uber-decision" (MR-1220) has been made.  Query job and switch to
comment|// ubermode if appropriate (by registering different container-allocator
comment|// and container-launcher services/event-handlers).
if|if
condition|(
name|job
operator|.
name|isUber
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppMaster uberizing job "
operator|+
name|job
operator|.
name|getID
argument_list|()
operator|+
literal|" in local container (\"uber-AM\")."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MRAppMaster launching normal, non-uberized, multi-container "
operator|+
literal|"job "
operator|+
name|job
operator|.
name|getID
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|//start all the components
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// All components have started, start the job.
name|startJobs
argument_list|()
expr_stmt|;
block|}
comment|/**    * This can be overridden to instantiate multiple jobs and create a     * workflow.    *    * TODO:  Rework the design to actually support this.  Currently much of the    * job stuff has been moved to init() above to support uberization (MR-1220).    * In a typical workflow, one presumably would want to uberize only a subset    * of the jobs (the "small" ones), which is awkward with the current design.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startJobs ()
specifier|protected
name|void
name|startJobs
parameter_list|()
block|{
comment|/** create a job-start event to get this ball rolling */
name|JobEvent
name|startJobEvent
init|=
operator|new
name|JobEvent
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|JobEventType
operator|.
name|JOB_START
argument_list|)
decl_stmt|;
comment|/** send the job-start event. this triggers the job execution. */
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|startJobEvent
argument_list|)
expr_stmt|;
block|}
DECL|class|JobEventDispatcher
specifier|private
class|class
name|JobEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (JobEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|JobEvent
name|event
parameter_list|)
block|{
operator|(
operator|(
name|EventHandler
argument_list|<
name|JobEvent
argument_list|>
operator|)
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskEventDispatcher
specifier|private
class|class
name|TaskEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskEvent
name|event
parameter_list|)
block|{
name|Task
name|task
init|=
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getTaskID
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
operator|.
name|getTask
argument_list|(
name|event
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EventHandler
argument_list|<
name|TaskEvent
argument_list|>
operator|)
name|task
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TaskAttemptEventDispatcher
specifier|private
class|class
name|TaskAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (TaskAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|TaskAttemptEvent
name|event
parameter_list|)
block|{
name|Job
name|job
init|=
name|context
operator|.
name|getJob
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getJobId
argument_list|()
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttempt
name|attempt
init|=
name|task
operator|.
name|getAttempt
argument_list|(
name|event
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EventHandler
argument_list|<
name|TaskAttemptEvent
argument_list|>
operator|)
name|attempt
operator|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SpeculatorEventDispatcher
specifier|private
class|class
name|SpeculatorEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|SpeculatorEvent
argument_list|>
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|SpeculatorEventDispatcher (Configuration config)
specifier|public
name|SpeculatorEventDispatcher
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SpeculatorEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SpeculatorEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Speculator IS enabled, direct the event to there.
name|speculator
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|String
name|containerIdStr
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|AM_CONTAINER_ID_ENV
argument_list|)
decl_stmt|;
name|String
name|nodeHttpAddressStr
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|NM_HTTP_ADDRESS_ENV
argument_list|)
decl_stmt|;
name|String
name|appSubmitTimeStr
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|APP_SUBMIT_TIME_ENV
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerIdStr
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|ApplicationConstants
operator|.
name|AM_CONTAINER_ID_ENV
operator|+
literal|" is null"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeHttpAddressStr
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|ApplicationConstants
operator|.
name|NM_HTTP_ADDRESS_ENV
operator|+
literal|" is null"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|appSubmitTimeStr
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|ApplicationConstants
operator|.
name|APP_SUBMIT_TIME_ENV
operator|+
literal|" is null"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|ContainerId
name|containerId
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|nodeHttpInetAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nodeHttpAddressStr
argument_list|)
decl_stmt|;
name|long
name|appSubmitTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|appSubmitTimeStr
argument_list|)
decl_stmt|;
name|MRAppMaster
name|appMaster
init|=
operator|new
name|MRAppMaster
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerId
argument_list|,
name|nodeHttpInetAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nodeHttpInetAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|appSubmitTime
argument_list|)
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|appMaster
argument_list|)
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|MRJobConfig
operator|.
name|JOB_CONF_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|jobUserName
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|jobUserName
argument_list|)
expr_stmt|;
name|initAndStartAppMaster
argument_list|(
name|appMaster
argument_list|,
name|conf
argument_list|,
name|jobUserName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error starting MRAppMaster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initAndStartAppMaster (final MRAppMaster appMaster, final YarnConfiguration conf, String jobUserName)
specifier|protected
specifier|static
name|void
name|initAndStartAppMaster
parameter_list|(
specifier|final
name|MRAppMaster
name|appMaster
parameter_list|,
specifier|final
name|YarnConfiguration
name|conf
parameter_list|,
name|String
name|jobUserName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|appMasterUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|jobUserName
argument_list|)
decl_stmt|;
name|appMasterUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|appMaster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

